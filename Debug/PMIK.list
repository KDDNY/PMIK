
PMIK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006768  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  08006878  08006878  00016878  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006df8  08006df8  00020234  2**0
                  CONTENTS
  4 .ARM          00000000  08006df8  08006df8  00020234  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006df8  08006df8  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006df8  08006df8  00016df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dfc  08006dfc  00016dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  08006e00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000112c  20000234  08007034  00020234  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001360  08007034  00021360  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 12 .debug_info   000111dd  00000000  00000000  0002025d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002721  00000000  00000000  0003143a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fa0  00000000  00000000  00033b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000eb0  00000000  00000000  00034b00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018ed3  00000000  00000000  000359b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e037  00000000  00000000  0004e883  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d02c  00000000  00000000  0005c8ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e98e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b5c  00000000  00000000  000e9964  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000234 	.word	0x20000234
 800012c:	00000000 	.word	0x00000000
 8000130:	08006860 	.word	0x08006860

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000238 	.word	0x20000238
 800014c:	08006860 	.word	0x08006860

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <getIP>:

char* ip_ad;
extern char out[5] = {'1','1','.','1','1'};
/*****************************************************************************************************************************************/

char* getIP(){
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
	return ip_ad;
 8000a8c:	4b02      	ldr	r3, [pc, #8]	; (8000a98 <getIP+0x10>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	20001098 	.word	0x20001098

08000a9c <ESP_Init>:

void ESP_Init (char *SSID, char *PASSWD)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b098      	sub	sp, #96	; 0x60
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 8000aa6:	f000 fa0b 	bl	8000ec0 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n", wifi_uart);
 8000aaa:	4968      	ldr	r1, [pc, #416]	; (8000c4c <ESP_Init+0x1b0>)
 8000aac:	4868      	ldr	r0, [pc, #416]	; (8000c50 <ESP_Init+0x1b4>)
 8000aae:	f000 fcee 	bl	800148e <Uart_sendstring>
	Uart_sendstring("RESETTING.", pc_uart);
 8000ab2:	4968      	ldr	r1, [pc, #416]	; (8000c54 <ESP_Init+0x1b8>)
 8000ab4:	4868      	ldr	r0, [pc, #416]	; (8000c58 <ESP_Init+0x1bc>)
 8000ab6:	f000 fcea 	bl	800148e <Uart_sendstring>
	for (int i=0; i<5; i++)
 8000aba:	2300      	movs	r3, #0
 8000abc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000abe:	e00a      	b.n	8000ad6 <ESP_Init+0x3a>
	{
		Uart_sendstring(".", pc_uart);
 8000ac0:	4964      	ldr	r1, [pc, #400]	; (8000c54 <ESP_Init+0x1b8>)
 8000ac2:	4866      	ldr	r0, [pc, #408]	; (8000c5c <ESP_Init+0x1c0>)
 8000ac4:	f000 fce3 	bl	800148e <Uart_sendstring>
		HAL_Delay(1000);
 8000ac8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000acc:	f001 fd2e 	bl	800252c <HAL_Delay>
	for (int i=0; i<5; i++)
 8000ad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000ad6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ad8:	2b04      	cmp	r3, #4
 8000ada:	ddf1      	ble.n	8000ac0 <ESP_Init+0x24>
	}

	/********* AT **********/
	Uart_flush(wifi_uart);
 8000adc:	485b      	ldr	r0, [pc, #364]	; (8000c4c <ESP_Init+0x1b0>)
 8000ade:	f000 fa81 	bl	8000fe4 <Uart_flush>
	Uart_sendstring("AT\r\n", wifi_uart);
 8000ae2:	495a      	ldr	r1, [pc, #360]	; (8000c4c <ESP_Init+0x1b0>)
 8000ae4:	485e      	ldr	r0, [pc, #376]	; (8000c60 <ESP_Init+0x1c4>)
 8000ae6:	f000 fcd2 	bl	800148e <Uart_sendstring>
	while(!(Wait_for("OK\r\n", wifi_uart)));
 8000aea:	bf00      	nop
 8000aec:	4957      	ldr	r1, [pc, #348]	; (8000c4c <ESP_Init+0x1b0>)
 8000aee:	485d      	ldr	r0, [pc, #372]	; (8000c64 <ESP_Init+0x1c8>)
 8000af0:	f000 fd62 	bl	80015b8 <Wait_for>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d0f8      	beq.n	8000aec <ESP_Init+0x50>
	Uart_sendstring("AT---->OK\n\n", pc_uart);
 8000afa:	4956      	ldr	r1, [pc, #344]	; (8000c54 <ESP_Init+0x1b8>)
 8000afc:	485a      	ldr	r0, [pc, #360]	; (8000c68 <ESP_Init+0x1cc>)
 8000afe:	f000 fcc6 	bl	800148e <Uart_sendstring>


	/********* AT+CWMODE=1 **********/
	Uart_flush(wifi_uart);
 8000b02:	4852      	ldr	r0, [pc, #328]	; (8000c4c <ESP_Init+0x1b0>)
 8000b04:	f000 fa6e 	bl	8000fe4 <Uart_flush>
	Uart_sendstring("AT+CWMODE=1\r\n", wifi_uart);
 8000b08:	4950      	ldr	r1, [pc, #320]	; (8000c4c <ESP_Init+0x1b0>)
 8000b0a:	4858      	ldr	r0, [pc, #352]	; (8000c6c <ESP_Init+0x1d0>)
 8000b0c:	f000 fcbf 	bl	800148e <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8000b10:	bf00      	nop
 8000b12:	494e      	ldr	r1, [pc, #312]	; (8000c4c <ESP_Init+0x1b0>)
 8000b14:	4853      	ldr	r0, [pc, #332]	; (8000c64 <ESP_Init+0x1c8>)
 8000b16:	f000 fd4f 	bl	80015b8 <Wait_for>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d0f8      	beq.n	8000b12 <ESP_Init+0x76>
	Uart_sendstring("CW MODE---->1\n\n", pc_uart);
 8000b20:	494c      	ldr	r1, [pc, #304]	; (8000c54 <ESP_Init+0x1b8>)
 8000b22:	4853      	ldr	r0, [pc, #332]	; (8000c70 <ESP_Init+0x1d4>)
 8000b24:	f000 fcb3 	bl	800148e <Uart_sendstring>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	Uart_flush(wifi_uart);
 8000b28:	4848      	ldr	r0, [pc, #288]	; (8000c4c <ESP_Init+0x1b0>)
 8000b2a:	f000 fa5b 	bl	8000fe4 <Uart_flush>
	Uart_sendstring("connecting... to the provided AP\n", pc_uart);
 8000b2e:	4949      	ldr	r1, [pc, #292]	; (8000c54 <ESP_Init+0x1b8>)
 8000b30:	4850      	ldr	r0, [pc, #320]	; (8000c74 <ESP_Init+0x1d8>)
 8000b32:	f000 fcac 	bl	800148e <Uart_sendstring>
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8000b36:	f107 0008 	add.w	r0, r7, #8
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	494e      	ldr	r1, [pc, #312]	; (8000c78 <ESP_Init+0x1dc>)
 8000b40:	f004 fb46 	bl	80051d0 <siprintf>
	Uart_sendstring(data, wifi_uart);
 8000b44:	f107 0308 	add.w	r3, r7, #8
 8000b48:	4940      	ldr	r1, [pc, #256]	; (8000c4c <ESP_Init+0x1b0>)
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 fc9f 	bl	800148e <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8000b50:	bf00      	nop
 8000b52:	493e      	ldr	r1, [pc, #248]	; (8000c4c <ESP_Init+0x1b0>)
 8000b54:	4843      	ldr	r0, [pc, #268]	; (8000c64 <ESP_Init+0x1c8>)
 8000b56:	f000 fd2f 	bl	80015b8 <Wait_for>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d0f8      	beq.n	8000b52 <ESP_Init+0xb6>
	sprintf (data, "Connected to,\"%s\"\n\n", SSID);
 8000b60:	f107 0308 	add.w	r3, r7, #8
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	4945      	ldr	r1, [pc, #276]	; (8000c7c <ESP_Init+0x1e0>)
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f004 fb31 	bl	80051d0 <siprintf>
	Uart_sendstring(data,pc_uart);
 8000b6e:	f107 0308 	add.w	r3, r7, #8
 8000b72:	4938      	ldr	r1, [pc, #224]	; (8000c54 <ESP_Init+0x1b8>)
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 fc8a 	bl	800148e <Uart_sendstring>


	/********* AT+CIFSR **********/
	Uart_flush(wifi_uart);
 8000b7a:	4834      	ldr	r0, [pc, #208]	; (8000c4c <ESP_Init+0x1b0>)
 8000b7c:	f000 fa32 	bl	8000fe4 <Uart_flush>
	Uart_sendstring("AT+CIFSR\r\n", wifi_uart);
 8000b80:	4932      	ldr	r1, [pc, #200]	; (8000c4c <ESP_Init+0x1b0>)
 8000b82:	483f      	ldr	r0, [pc, #252]	; (8000c80 <ESP_Init+0x1e4>)
 8000b84:	f000 fc83 	bl	800148e <Uart_sendstring>
	while (!(Wait_for("CIFSR:STAIP,\"", wifi_uart)));
 8000b88:	bf00      	nop
 8000b8a:	4930      	ldr	r1, [pc, #192]	; (8000c4c <ESP_Init+0x1b0>)
 8000b8c:	483d      	ldr	r0, [pc, #244]	; (8000c84 <ESP_Init+0x1e8>)
 8000b8e:	f000 fd13 	bl	80015b8 <Wait_for>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d0f8      	beq.n	8000b8a <ESP_Init+0xee>
	while (!(Copy_upto("\"",buffer, wifi_uart)));
 8000b98:	bf00      	nop
 8000b9a:	4a2c      	ldr	r2, [pc, #176]	; (8000c4c <ESP_Init+0x1b0>)
 8000b9c:	493a      	ldr	r1, [pc, #232]	; (8000c88 <ESP_Init+0x1ec>)
 8000b9e:	483b      	ldr	r0, [pc, #236]	; (8000c8c <ESP_Init+0x1f0>)
 8000ba0:	f000 fc8c 	bl	80014bc <Copy_upto>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d0f7      	beq.n	8000b9a <ESP_Init+0xfe>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8000baa:	bf00      	nop
 8000bac:	4927      	ldr	r1, [pc, #156]	; (8000c4c <ESP_Init+0x1b0>)
 8000bae:	482d      	ldr	r0, [pc, #180]	; (8000c64 <ESP_Init+0x1c8>)
 8000bb0:	f000 fd02 	bl	80015b8 <Wait_for>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d0f8      	beq.n	8000bac <ESP_Init+0x110>
	int len = strlen (buffer);
 8000bba:	4833      	ldr	r0, [pc, #204]	; (8000c88 <ESP_Init+0x1ec>)
 8000bbc:	f7ff fac8 	bl	8000150 <strlen>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	65bb      	str	r3, [r7, #88]	; 0x58
	buffer[len-1] = '\0';
 8000bc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	4a2f      	ldr	r2, [pc, #188]	; (8000c88 <ESP_Init+0x1ec>)
 8000bca:	2100      	movs	r1, #0
 8000bcc:	54d1      	strb	r1, [r2, r3]
	ip_ad = buffer;
 8000bce:	4b30      	ldr	r3, [pc, #192]	; (8000c90 <ESP_Init+0x1f4>)
 8000bd0:	4a2d      	ldr	r2, [pc, #180]	; (8000c88 <ESP_Init+0x1ec>)
 8000bd2:	601a      	str	r2, [r3, #0]
	sprintf (data, "IP ADDR: %s\n\n", buffer);
 8000bd4:	f107 0308 	add.w	r3, r7, #8
 8000bd8:	4a2b      	ldr	r2, [pc, #172]	; (8000c88 <ESP_Init+0x1ec>)
 8000bda:	492e      	ldr	r1, [pc, #184]	; (8000c94 <ESP_Init+0x1f8>)
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f004 faf7 	bl	80051d0 <siprintf>
	Uart_sendstring(data, pc_uart);
 8000be2:	f107 0308 	add.w	r3, r7, #8
 8000be6:	491b      	ldr	r1, [pc, #108]	; (8000c54 <ESP_Init+0x1b8>)
 8000be8:	4618      	mov	r0, r3
 8000bea:	f000 fc50 	bl	800148e <Uart_sendstring>

	/********* AT+CIPMUX **********/
	Uart_flush(wifi_uart);
 8000bee:	4817      	ldr	r0, [pc, #92]	; (8000c4c <ESP_Init+0x1b0>)
 8000bf0:	f000 f9f8 	bl	8000fe4 <Uart_flush>
	Uart_sendstring("AT+CIPMUX=1\r\n", wifi_uart);
 8000bf4:	4915      	ldr	r1, [pc, #84]	; (8000c4c <ESP_Init+0x1b0>)
 8000bf6:	4828      	ldr	r0, [pc, #160]	; (8000c98 <ESP_Init+0x1fc>)
 8000bf8:	f000 fc49 	bl	800148e <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8000bfc:	bf00      	nop
 8000bfe:	4913      	ldr	r1, [pc, #76]	; (8000c4c <ESP_Init+0x1b0>)
 8000c00:	4818      	ldr	r0, [pc, #96]	; (8000c64 <ESP_Init+0x1c8>)
 8000c02:	f000 fcd9 	bl	80015b8 <Wait_for>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d0f8      	beq.n	8000bfe <ESP_Init+0x162>
	Uart_sendstring("CIPMUX---->OK\n\n", pc_uart);
 8000c0c:	4911      	ldr	r1, [pc, #68]	; (8000c54 <ESP_Init+0x1b8>)
 8000c0e:	4823      	ldr	r0, [pc, #140]	; (8000c9c <ESP_Init+0x200>)
 8000c10:	f000 fc3d 	bl	800148e <Uart_sendstring>

	/********* AT+CIPSERVER **********/
	Uart_flush(wifi_uart);
 8000c14:	480d      	ldr	r0, [pc, #52]	; (8000c4c <ESP_Init+0x1b0>)
 8000c16:	f000 f9e5 	bl	8000fe4 <Uart_flush>
	Uart_sendstring("AT+CIPSERVER=1,80\r\n", wifi_uart);
 8000c1a:	490c      	ldr	r1, [pc, #48]	; (8000c4c <ESP_Init+0x1b0>)
 8000c1c:	4820      	ldr	r0, [pc, #128]	; (8000ca0 <ESP_Init+0x204>)
 8000c1e:	f000 fc36 	bl	800148e <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8000c22:	bf00      	nop
 8000c24:	4909      	ldr	r1, [pc, #36]	; (8000c4c <ESP_Init+0x1b0>)
 8000c26:	480f      	ldr	r0, [pc, #60]	; (8000c64 <ESP_Init+0x1c8>)
 8000c28:	f000 fcc6 	bl	80015b8 <Wait_for>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d0f8      	beq.n	8000c24 <ESP_Init+0x188>
	Uart_sendstring("CIPSERVER---->OK\n\n", pc_uart);
 8000c32:	4908      	ldr	r1, [pc, #32]	; (8000c54 <ESP_Init+0x1b8>)
 8000c34:	481b      	ldr	r0, [pc, #108]	; (8000ca4 <ESP_Init+0x208>)
 8000c36:	f000 fc2a 	bl	800148e <Uart_sendstring>

	Uart_sendstring("Now Connect to the IP ADRESS\n\n", pc_uart);
 8000c3a:	4906      	ldr	r1, [pc, #24]	; (8000c54 <ESP_Init+0x1b8>)
 8000c3c:	481a      	ldr	r0, [pc, #104]	; (8000ca8 <ESP_Init+0x20c>)
 8000c3e:	f000 fc26 	bl	800148e <Uart_sendstring>

}
 8000c42:	bf00      	nop
 8000c44:	3760      	adds	r7, #96	; 0x60
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	200012d8 	.word	0x200012d8
 8000c50:	0800699c 	.word	0x0800699c
 8000c54:	20001318 	.word	0x20001318
 8000c58:	080069a8 	.word	0x080069a8
 8000c5c:	080069b4 	.word	0x080069b4
 8000c60:	080069b8 	.word	0x080069b8
 8000c64:	080069c0 	.word	0x080069c0
 8000c68:	080069c8 	.word	0x080069c8
 8000c6c:	080069d4 	.word	0x080069d4
 8000c70:	080069e4 	.word	0x080069e4
 8000c74:	080069f4 	.word	0x080069f4
 8000c78:	08006a18 	.word	0x08006a18
 8000c7c:	08006a30 	.word	0x08006a30
 8000c80:	08006a44 	.word	0x08006a44
 8000c84:	08006a50 	.word	0x08006a50
 8000c88:	2000109c 	.word	0x2000109c
 8000c8c:	08006a60 	.word	0x08006a60
 8000c90:	20001098 	.word	0x20001098
 8000c94:	08006a64 	.word	0x08006a64
 8000c98:	08006a74 	.word	0x08006a74
 8000c9c:	08006a84 	.word	0x08006a84
 8000ca0:	08006a94 	.word	0x08006a94
 8000ca4:	08006aa8 	.word	0x08006aa8
 8000ca8:	08006abc 	.word	0x08006abc

08000cac <Server_Send>:




int Server_Send (char *str, int Link_ID)
{
 8000cac:	b590      	push	{r4, r7, lr}
 8000cae:	b099      	sub	sp, #100	; 0x64
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
	int len = strlen (str);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff fa4a 	bl	8000150 <strlen>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
	char data[80];
	sprintf (data, "AT+CIPSEND=%d,%d\r\n", Link_ID, len);
 8000cc0:	f107 000c 	add.w	r0, r7, #12
 8000cc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cc6:	683a      	ldr	r2, [r7, #0]
 8000cc8:	491b      	ldr	r1, [pc, #108]	; (8000d38 <Server_Send+0x8c>)
 8000cca:	f004 fa81 	bl	80051d0 <siprintf>
	Uart_sendstring(data, wifi_uart);
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	491a      	ldr	r1, [pc, #104]	; (8000d3c <Server_Send+0x90>)
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f000 fbda 	bl	800148e <Uart_sendstring>
	while (!(Wait_for(">", wifi_uart)));
 8000cda:	bf00      	nop
 8000cdc:	4917      	ldr	r1, [pc, #92]	; (8000d3c <Server_Send+0x90>)
 8000cde:	4818      	ldr	r0, [pc, #96]	; (8000d40 <Server_Send+0x94>)
 8000ce0:	f000 fc6a 	bl	80015b8 <Wait_for>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d0f8      	beq.n	8000cdc <Server_Send+0x30>
	Uart_sendstring (str, wifi_uart);
 8000cea:	4914      	ldr	r1, [pc, #80]	; (8000d3c <Server_Send+0x90>)
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f000 fbce 	bl	800148e <Uart_sendstring>
	while (!(Wait_for("SEND OK", wifi_uart)));
 8000cf2:	bf00      	nop
 8000cf4:	4911      	ldr	r1, [pc, #68]	; (8000d3c <Server_Send+0x90>)
 8000cf6:	4813      	ldr	r0, [pc, #76]	; (8000d44 <Server_Send+0x98>)
 8000cf8:	f000 fc5e 	bl	80015b8 <Wait_for>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d0f8      	beq.n	8000cf4 <Server_Send+0x48>
	sprintf (data, "AT+CIPCLOSE=5\r\n");
 8000d02:	f107 030c 	add.w	r3, r7, #12
 8000d06:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <Server_Send+0x9c>)
 8000d08:	461c      	mov	r4, r3
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Uart_sendstring(data, wifi_uart);
 8000d12:	f107 030c 	add.w	r3, r7, #12
 8000d16:	4909      	ldr	r1, [pc, #36]	; (8000d3c <Server_Send+0x90>)
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 fbb8 	bl	800148e <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8000d1e:	bf00      	nop
 8000d20:	4906      	ldr	r1, [pc, #24]	; (8000d3c <Server_Send+0x90>)
 8000d22:	480a      	ldr	r0, [pc, #40]	; (8000d4c <Server_Send+0xa0>)
 8000d24:	f000 fc48 	bl	80015b8 <Wait_for>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d0f8      	beq.n	8000d20 <Server_Send+0x74>
	return 1;
 8000d2e:	2301      	movs	r3, #1
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3764      	adds	r7, #100	; 0x64
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd90      	pop	{r4, r7, pc}
 8000d38:	08006adc 	.word	0x08006adc
 8000d3c:	200012d8 	.word	0x200012d8
 8000d40:	08006af0 	.word	0x08006af0
 8000d44:	08006af4 	.word	0x08006af4
 8000d48:	08006afc 	.word	0x08006afc
 8000d4c:	080069c0 	.word	0x080069c0

08000d50 <Server_Handle>:

void Server_Handle (char *str, int Link_ID)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	6018      	str	r0, [r3, #0]
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	6019      	str	r1, [r3, #0]
	char datatosend[1024] = {0};
 8000d60:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d64:	4618      	mov	r0, r3
 8000d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	f003 fced 	bl	800474c <memset>
		sprintf (datatosend, Basic_inclusion);
 8000d72:	4b23      	ldr	r3, [pc, #140]	; (8000e00 <Server_Handle+0xb0>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f004 fa27 	bl	80051d0 <siprintf>
		strcat(datatosend, "<p>");
 8000d82:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff f9e2 	bl	8000150 <strlen>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	461a      	mov	r2, r3
 8000d90:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d94:	4413      	add	r3, r2
 8000d96:	4a1b      	ldr	r2, [pc, #108]	; (8000e04 <Server_Handle+0xb4>)
 8000d98:	6810      	ldr	r0, [r2, #0]
 8000d9a:	6018      	str	r0, [r3, #0]
		char buffer[100];
		snprintf(buffer, 10, "%s", out);
 8000d9c:	f107 000c 	add.w	r0, r7, #12
 8000da0:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <Server_Handle+0xb8>)
 8000da2:	4a1a      	ldr	r2, [pc, #104]	; (8000e0c <Server_Handle+0xbc>)
 8000da4:	210a      	movs	r1, #10
 8000da6:	f004 f9df 	bl	8005168 <sniprintf>
		strcat(datatosend, buffer);
 8000daa:	f107 020c 	add.w	r2, r7, #12
 8000dae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f004 fa2b 	bl	8005210 <strcat>
		strcat(datatosend, "</p>");
 8000dba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff f9c6 	bl	8000150 <strlen>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000dcc:	4413      	add	r3, r2
 8000dce:	4a10      	ldr	r2, [pc, #64]	; (8000e10 <Server_Handle+0xc0>)
 8000dd0:	6810      	ldr	r0, [r2, #0]
 8000dd2:	6018      	str	r0, [r3, #0]
 8000dd4:	7912      	ldrb	r2, [r2, #4]
 8000dd6:	711a      	strb	r2, [r3, #4]
		strcat(datatosend, Terminate);
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <Server_Handle+0xc4>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000de0:	4611      	mov	r1, r2
 8000de2:	4618      	mov	r0, r3
 8000de4:	f004 fa14 	bl	8005210 <strcat>
		Server_Send(datatosend, Link_ID);
 8000de8:	463b      	mov	r3, r7
 8000dea:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000dee:	6819      	ldr	r1, [r3, #0]
 8000df0:	4610      	mov	r0, r2
 8000df2:	f7ff ff5b 	bl	8000cac <Server_Send>
}
 8000df6:	bf00      	nop
 8000df8:	f507 678e 	add.w	r7, r7, #1136	; 0x470
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000000 	.word	0x20000000
 8000e04:	08006b0c 	.word	0x08006b0c
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	08006b10 	.word	0x08006b10
 8000e10:	08006b14 	.word	0x08006b14
 8000e14:	20000004 	.word	0x20000004

08000e18 <Server_Start>:

void Server_Start ()
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b092      	sub	sp, #72	; 0x48
 8000e1c:	af00      	add	r7, sp, #0
	char buftocopyinto[64] = {0};
 8000e1e:	f107 0308 	add.w	r3, r7, #8
 8000e22:	2240      	movs	r2, #64	; 0x40
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f003 fc90 	bl	800474c <memset>
	char Link_ID;
	while (!(Get_after("+IPD,", 1, &Link_ID, wifi_uart)));
 8000e2c:	bf00      	nop
 8000e2e:	1dfa      	adds	r2, r7, #7
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <Server_Start+0x58>)
 8000e32:	2101      	movs	r1, #1
 8000e34:	480f      	ldr	r0, [pc, #60]	; (8000e74 <Server_Start+0x5c>)
 8000e36:	f000 fafb 	bl	8001430 <Get_after>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d0f6      	beq.n	8000e2e <Server_Start+0x16>
	Link_ID -= 48;
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	3b30      	subs	r3, #48	; 0x30
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	71fb      	strb	r3, [r7, #7]
	while (!(Copy_upto(" HTTP/1.1", buftocopyinto, wifi_uart)));
 8000e48:	bf00      	nop
 8000e4a:	f107 0308 	add.w	r3, r7, #8
 8000e4e:	4a08      	ldr	r2, [pc, #32]	; (8000e70 <Server_Start+0x58>)
 8000e50:	4619      	mov	r1, r3
 8000e52:	4809      	ldr	r0, [pc, #36]	; (8000e78 <Server_Start+0x60>)
 8000e54:	f000 fb32 	bl	80014bc <Copy_upto>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d0f5      	beq.n	8000e4a <Server_Start+0x32>
	Server_Handle("/ ", Link_ID);
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	4619      	mov	r1, r3
 8000e62:	4806      	ldr	r0, [pc, #24]	; (8000e7c <Server_Start+0x64>)
 8000e64:	f7ff ff74 	bl	8000d50 <Server_Handle>
}
 8000e68:	bf00      	nop
 8000e6a:	3748      	adds	r7, #72	; 0x48
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	200012d8 	.word	0x200012d8
 8000e74:	08006b1c 	.word	0x08006b1c
 8000e78:	08006b24 	.word	0x08006b24
 8000e7c:	08006b30 	.word	0x08006b30

08000e80 <setOut>:

void setOut(char in[]){
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	out[0] = in[0];
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	781a      	ldrb	r2, [r3, #0]
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <setOut+0x3c>)
 8000e8e:	701a      	strb	r2, [r3, #0]
	out[1] = in[1];
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	785a      	ldrb	r2, [r3, #1]
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <setOut+0x3c>)
 8000e96:	705a      	strb	r2, [r3, #1]
	out[2] = in[2];
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	789a      	ldrb	r2, [r3, #2]
 8000e9c:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <setOut+0x3c>)
 8000e9e:	709a      	strb	r2, [r3, #2]
	out[3] = in[3];
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	78da      	ldrb	r2, [r3, #3]
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <setOut+0x3c>)
 8000ea6:	70da      	strb	r2, [r3, #3]
	out[4] = in[4];
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	791a      	ldrb	r2, [r3, #4]
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <setOut+0x3c>)
 8000eae:	711a      	strb	r2, [r3, #4]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000008 	.word	0x20000008

08000ec0 <Ringbuf_init>:
void store_char (unsigned char c, ring_buffer *buffer);



void Ringbuf_init(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 8000ec4:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <Ringbuf_init+0x90>)
 8000ec6:	4a23      	ldr	r2, [pc, #140]	; (8000f54 <Ringbuf_init+0x94>)
 8000ec8:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 8000eca:	4b23      	ldr	r3, [pc, #140]	; (8000f58 <Ringbuf_init+0x98>)
 8000ecc:	4a23      	ldr	r2, [pc, #140]	; (8000f5c <Ringbuf_init+0x9c>)
 8000ece:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 8000ed0:	4b23      	ldr	r3, [pc, #140]	; (8000f60 <Ringbuf_init+0xa0>)
 8000ed2:	4a24      	ldr	r2, [pc, #144]	; (8000f64 <Ringbuf_init+0xa4>)
 8000ed4:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 8000ed6:	4b24      	ldr	r3, [pc, #144]	; (8000f68 <Ringbuf_init+0xa8>)
 8000ed8:	4a24      	ldr	r2, [pc, #144]	; (8000f6c <Ringbuf_init+0xac>)
 8000eda:	601a      	str	r2, [r3, #0]
  _rx_buffer3 = &rx_buffer3;
 8000edc:	4b24      	ldr	r3, [pc, #144]	; (8000f70 <Ringbuf_init+0xb0>)
 8000ede:	4a25      	ldr	r2, [pc, #148]	; (8000f74 <Ringbuf_init+0xb4>)
 8000ee0:	601a      	str	r2, [r3, #0]
  _tx_buffer3 = &tx_buffer3;
 8000ee2:	4b25      	ldr	r3, [pc, #148]	; (8000f78 <Ringbuf_init+0xb8>)
 8000ee4:	4a25      	ldr	r2, [pc, #148]	; (8000f7c <Ringbuf_init+0xbc>)
 8000ee6:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_ERR);
 8000ee8:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <Ringbuf_init+0xc0>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	695a      	ldr	r2, [r3, #20]
 8000eee:	4b24      	ldr	r3, [pc, #144]	; (8000f80 <Ringbuf_init+0xc0>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f042 0201 	orr.w	r2, r2, #1
 8000ef6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_ERR);
 8000ef8:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <Ringbuf_init+0xc4>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	695a      	ldr	r2, [r3, #20]
 8000efe:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <Ringbuf_init+0xc4>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f042 0201 	orr.w	r2, r2, #1
 8000f06:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(bmp_uart, UART_IT_ERR);
 8000f08:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <Ringbuf_init+0xc8>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	695a      	ldr	r2, [r3, #20]
 8000f0e:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <Ringbuf_init+0xc8>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f042 0201 	orr.w	r2, r2, #1
 8000f16:	615a      	str	r2, [r3, #20]


  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
 8000f18:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <Ringbuf_init+0xc0>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	68da      	ldr	r2, [r3, #12]
 8000f1e:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <Ringbuf_init+0xc0>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f042 0220 	orr.w	r2, r2, #32
 8000f26:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
 8000f28:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <Ringbuf_init+0xc4>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	68da      	ldr	r2, [r3, #12]
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <Ringbuf_init+0xc4>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f042 0220 	orr.w	r2, r2, #32
 8000f36:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(bmp_uart, UART_IT_RXNE);
 8000f38:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <Ringbuf_init+0xc8>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	68da      	ldr	r2, [r3, #12]
 8000f3e:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <Ringbuf_init+0xc8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f042 0220 	orr.w	r2, r2, #32
 8000f46:	60da      	str	r2, [r3, #12]


}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr
 8000f50:	200010b4 	.word	0x200010b4
 8000f54:	20000250 	.word	0x20000250
 8000f58:	200010b8 	.word	0x200010b8
 8000f5c:	20000458 	.word	0x20000458
 8000f60:	200010c4 	.word	0x200010c4
 8000f64:	20000660 	.word	0x20000660
 8000f68:	200010b0 	.word	0x200010b0
 8000f6c:	20000868 	.word	0x20000868
 8000f70:	200010bc 	.word	0x200010bc
 8000f74:	20000a70 	.word	0x20000a70
 8000f78:	200010c0 	.word	0x200010c0
 8000f7c:	20000c78 	.word	0x20000c78
 8000f80:	200012d8 	.word	0x200012d8
 8000f84:	20001318 	.word	0x20001318
 8000f88:	20001298 	.word	0x20001298

08000f8c <getBuffer>:

ring_buffer* getBuffer(){
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
	return _tx_buffer3;
 8000f90:	4b02      	ldr	r3, [pc, #8]	; (8000f9c <getBuffer+0x10>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	200010c0 	.word	0x200010c0

08000fa0 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000fb8:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d009      	beq.n	8000fda <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000fcc:	683a      	ldr	r2, [r7, #0]
 8000fce:	79f9      	ldrb	r1, [r7, #7]
 8000fd0:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8000fda:	bf00      	nop
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr

08000fe4 <Uart_flush>:
	}
}


void Uart_flush (UART_HandleTypeDef *uart)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a1b      	ldr	r2, [pc, #108]	; (800105c <Uart_flush+0x78>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d10c      	bne.n	800100e <Uart_flush+0x2a>
	{
		memset(_rx_buffer1->buffer,'\0', UART_BUFFER_SIZE);
 8000ff4:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <Uart_flush+0x7c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f003 fba4 	bl	800474c <memset>
		_rx_buffer1->head = 0;
 8001004:	4b16      	ldr	r3, [pc, #88]	; (8001060 <Uart_flush+0x7c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2200      	movs	r2, #0
 800100a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
	if (uart == pc_uart)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a14      	ldr	r2, [pc, #80]	; (8001064 <Uart_flush+0x80>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d10c      	bne.n	8001030 <Uart_flush+0x4c>
	{
		memset(_rx_buffer2->buffer,'\0', UART_BUFFER_SIZE);
 8001016:	4b14      	ldr	r3, [pc, #80]	; (8001068 <Uart_flush+0x84>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f003 fb93 	bl	800474c <memset>
		_rx_buffer2->head = 0;
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <Uart_flush+0x84>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2200      	movs	r2, #0
 800102c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
	if (uart == bmp_uart)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a0e      	ldr	r2, [pc, #56]	; (800106c <Uart_flush+0x88>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d10c      	bne.n	8001052 <Uart_flush+0x6e>
	{
		memset(_rx_buffer3->buffer,'\0', UART_BUFFER_SIZE);
 8001038:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <Uart_flush+0x8c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f003 fb82 	bl	800474c <memset>
		_rx_buffer3->head = 0;
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <Uart_flush+0x8c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2200      	movs	r2, #0
 800104e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200012d8 	.word	0x200012d8
 8001060:	200010b4 	.word	0x200010b4
 8001064:	20001318 	.word	0x20001318
 8001068:	200010c4 	.word	0x200010c4
 800106c:	20001298 	.word	0x20001298
 8001070:	200010bc 	.word	0x200010bc

08001074 <Uart_peek>:


int Uart_peek(UART_HandleTypeDef *uart)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a28      	ldr	r2, [pc, #160]	; (8001120 <Uart_peek+0xac>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d114      	bne.n	80010ae <Uart_peek+0x3a>
	{
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8001084:	4b27      	ldr	r3, [pc, #156]	; (8001124 <Uart_peek+0xb0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800108c:	4b25      	ldr	r3, [pc, #148]	; (8001124 <Uart_peek+0xb0>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001094:	429a      	cmp	r2, r3
 8001096:	d102      	bne.n	800109e <Uart_peek+0x2a>
		  {
		    return -1;
 8001098:	f04f 33ff 	mov.w	r3, #4294967295
 800109c:	e03b      	b.n	8001116 <Uart_peek+0xa2>
		  }
		  else
		  {
		    return _rx_buffer1->buffer[_rx_buffer1->tail];
 800109e:	4b21      	ldr	r3, [pc, #132]	; (8001124 <Uart_peek+0xb0>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	4b20      	ldr	r3, [pc, #128]	; (8001124 <Uart_peek+0xb0>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80010aa:	5cd3      	ldrb	r3, [r2, r3]
 80010ac:	e033      	b.n	8001116 <Uart_peek+0xa2>
		  }
	}

	else if (uart == pc_uart)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a1d      	ldr	r2, [pc, #116]	; (8001128 <Uart_peek+0xb4>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d114      	bne.n	80010e0 <Uart_peek+0x6c>
	{
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 80010b6:	4b1d      	ldr	r3, [pc, #116]	; (800112c <Uart_peek+0xb8>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80010be:	4b1b      	ldr	r3, [pc, #108]	; (800112c <Uart_peek+0xb8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d102      	bne.n	80010d0 <Uart_peek+0x5c>
		  {
		    return -1;
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
 80010ce:	e022      	b.n	8001116 <Uart_peek+0xa2>
		  }
		  else
		  {
		    return _rx_buffer2->buffer[_rx_buffer2->tail];
 80010d0:	4b16      	ldr	r3, [pc, #88]	; (800112c <Uart_peek+0xb8>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b15      	ldr	r3, [pc, #84]	; (800112c <Uart_peek+0xb8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80010dc:	5cd3      	ldrb	r3, [r2, r3]
 80010de:	e01a      	b.n	8001116 <Uart_peek+0xa2>
		  }
	}

	else if (uart == bmp_uart)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a13      	ldr	r2, [pc, #76]	; (8001130 <Uart_peek+0xbc>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d114      	bne.n	8001112 <Uart_peek+0x9e>
	{
			  if(_rx_buffer3->head == _rx_buffer3->tail)
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <Uart_peek+0xc0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80010f0:	4b10      	ldr	r3, [pc, #64]	; (8001134 <Uart_peek+0xc0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d102      	bne.n	8001102 <Uart_peek+0x8e>
			  {
			    return -1;
 80010fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001100:	e009      	b.n	8001116 <Uart_peek+0xa2>
			  }
			  else
			  {
			    return _rx_buffer3->buffer[_rx_buffer3->tail];
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <Uart_peek+0xc0>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <Uart_peek+0xc0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800110e:	5cd3      	ldrb	r3, [r2, r3]
 8001110:	e001      	b.n	8001116 <Uart_peek+0xa2>
			  }
	}

	return -1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001116:	4618      	mov	r0, r3
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr
 8001120:	200012d8 	.word	0x200012d8
 8001124:	200010b4 	.word	0x200010b4
 8001128:	20001318 	.word	0x20001318
 800112c:	200010c4 	.word	0x200010c4
 8001130:	20001298 	.word	0x20001298
 8001134:	200010bc 	.word	0x200010bc

08001138 <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a3f      	ldr	r2, [pc, #252]	; (8001240 <Uart_read+0x108>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d121      	bne.n	800118c <Uart_read+0x54>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8001148:	4b3e      	ldr	r3, [pc, #248]	; (8001244 <Uart_read+0x10c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001150:	4b3c      	ldr	r3, [pc, #240]	; (8001244 <Uart_read+0x10c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001158:	429a      	cmp	r2, r3
 800115a:	d102      	bne.n	8001162 <Uart_read+0x2a>
		  {
		    return -1;
 800115c:	f04f 33ff 	mov.w	r3, #4294967295
 8001160:	e069      	b.n	8001236 <Uart_read+0xfe>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 8001162:	4b38      	ldr	r3, [pc, #224]	; (8001244 <Uart_read+0x10c>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	4b37      	ldr	r3, [pc, #220]	; (8001244 <Uart_read+0x10c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800116e:	5cd3      	ldrb	r3, [r2, r3]
 8001170:	737b      	strb	r3, [r7, #13]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8001172:	4b34      	ldr	r3, [pc, #208]	; (8001244 <Uart_read+0x10c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800117a:	1c5a      	adds	r2, r3, #1
 800117c:	4b31      	ldr	r3, [pc, #196]	; (8001244 <Uart_read+0x10c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001184:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8001188:	7b7b      	ldrb	r3, [r7, #13]
 800118a:	e054      	b.n	8001236 <Uart_read+0xfe>
		  }
	}

	else if (uart == pc_uart)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a2e      	ldr	r2, [pc, #184]	; (8001248 <Uart_read+0x110>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d121      	bne.n	80011d8 <Uart_read+0xa0>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 8001194:	4b2d      	ldr	r3, [pc, #180]	; (800124c <Uart_read+0x114>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800119c:	4b2b      	ldr	r3, [pc, #172]	; (800124c <Uart_read+0x114>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d102      	bne.n	80011ae <Uart_read+0x76>
		  {
		    return -1;
 80011a8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ac:	e043      	b.n	8001236 <Uart_read+0xfe>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 80011ae:	4b27      	ldr	r3, [pc, #156]	; (800124c <Uart_read+0x114>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	4b26      	ldr	r3, [pc, #152]	; (800124c <Uart_read+0x114>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80011ba:	5cd3      	ldrb	r3, [r2, r3]
 80011bc:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 80011be:	4b23      	ldr	r3, [pc, #140]	; (800124c <Uart_read+0x114>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80011c6:	1c5a      	adds	r2, r3, #1
 80011c8:	4b20      	ldr	r3, [pc, #128]	; (800124c <Uart_read+0x114>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80011d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 80011d4:	7bbb      	ldrb	r3, [r7, #14]
 80011d6:	e02e      	b.n	8001236 <Uart_read+0xfe>
		  }
	}

	else if (uart == bmp_uart)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a1d      	ldr	r2, [pc, #116]	; (8001250 <Uart_read+0x118>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d128      	bne.n	8001232 <Uart_read+0xfa>
		{
			  // if the head isn't ahead of the tail, we don't have any characters
			  if(_rx_buffer3->head == _rx_buffer3->tail)
 80011e0:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <Uart_read+0x11c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80011e8:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <Uart_read+0x11c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d102      	bne.n	80011fa <Uart_read+0xc2>
			  {
			    return -1;
 80011f4:	f04f 33ff 	mov.w	r3, #4294967295
 80011f8:	e01d      	b.n	8001236 <Uart_read+0xfe>
			  }
			  else
			  {
			    unsigned char c = _rx_buffer3->buffer[_rx_buffer3->tail];
 80011fa:	4b16      	ldr	r3, [pc, #88]	; (8001254 <Uart_read+0x11c>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <Uart_read+0x11c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001206:	5cd3      	ldrb	r3, [r2, r3]
 8001208:	73fb      	strb	r3, [r7, #15]
			    buff[_rx_buffer3->tail] = c;
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <Uart_read+0x11c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001212:	4911      	ldr	r1, [pc, #68]	; (8001258 <Uart_read+0x120>)
 8001214:	7bfa      	ldrb	r2, [r7, #15]
 8001216:	54ca      	strb	r2, [r1, r3]
			    _rx_buffer3->tail = (unsigned int)(_rx_buffer3->tail + 1) % UART_BUFFER_SIZE;
 8001218:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <Uart_read+0x11c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001220:	1c5a      	adds	r2, r3, #1
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <Uart_read+0x11c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800122a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			    return c;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	e001      	b.n	8001236 <Uart_read+0xfe>
			  }
		}


	else return -1;
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001236:	4618      	mov	r0, r3
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	200012d8 	.word	0x200012d8
 8001244:	200010b4 	.word	0x200010b4
 8001248:	20001318 	.word	0x20001318
 800124c:	200010c4 	.word	0x200010c4
 8001250:	20001298 	.word	0x20001298
 8001254:	200010bc 	.word	0x200010bc
 8001258:	20000e98 	.word	0x20000e98

0800125c <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)
{
 800125c:	b480      	push	{r7}
 800125e:	b087      	sub	sp, #28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
	if (c>=0)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	db7f      	blt.n	800136c <Uart_write+0x110>
	{
		if (uart == device_uart){
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	4a42      	ldr	r2, [pc, #264]	; (8001378 <Uart_write+0x11c>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d126      	bne.n	80012c2 <Uart_write+0x66>
		int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8001274:	4b41      	ldr	r3, [pc, #260]	; (800137c <Uart_write+0x120>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800127c:	3301      	adds	r3, #1
 800127e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001282:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer1->tail);
 8001284:	bf00      	nop
 8001286:	4b3d      	ldr	r3, [pc, #244]	; (800137c <Uart_write+0x120>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	429a      	cmp	r2, r3
 8001292:	d0f8      	beq.n	8001286 <Uart_write+0x2a>

		_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 8001294:	4b39      	ldr	r3, [pc, #228]	; (800137c <Uart_write+0x120>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b38      	ldr	r3, [pc, #224]	; (800137c <Uart_write+0x120>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012a0:	6879      	ldr	r1, [r7, #4]
 80012a2:	b2c9      	uxtb	r1, r1
 80012a4:	54d1      	strb	r1, [r2, r3]
		_tx_buffer1->head = i;
 80012a6:	4b35      	ldr	r3, [pc, #212]	; (800137c <Uart_write+0x120>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		__HAL_UART_ENABLE_IT(device_uart, UART_IT_TXE); // Enable UART transmission interrupt
 80012b0:	4b31      	ldr	r3, [pc, #196]	; (8001378 <Uart_write+0x11c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	68da      	ldr	r2, [r3, #12]
 80012b6:	4b30      	ldr	r3, [pc, #192]	; (8001378 <Uart_write+0x11c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012be:	60da      	str	r2, [r3, #12]
					_tx_buffer3->head = i;

					__HAL_UART_ENABLE_IT(bmp_uart, UART_IT_TXE); // Enable UART transmission interrupt
					}
	}
}
 80012c0:	e054      	b.n	800136c <Uart_write+0x110>
		else if (uart == pc_uart){
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	4a2e      	ldr	r2, [pc, #184]	; (8001380 <Uart_write+0x124>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d126      	bne.n	8001318 <Uart_write+0xbc>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 80012ca:	4b2e      	ldr	r3, [pc, #184]	; (8001384 <Uart_write+0x128>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012d2:	3301      	adds	r3, #1
 80012d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012d8:	613b      	str	r3, [r7, #16]
			while (i == _tx_buffer2->tail);
 80012da:	bf00      	nop
 80012dc:	4b29      	ldr	r3, [pc, #164]	; (8001384 <Uart_write+0x128>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d0f8      	beq.n	80012dc <Uart_write+0x80>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 80012ea:	4b26      	ldr	r3, [pc, #152]	; (8001384 <Uart_write+0x128>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	4b25      	ldr	r3, [pc, #148]	; (8001384 <Uart_write+0x128>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	b2c9      	uxtb	r1, r1
 80012fa:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 80012fc:	4b21      	ldr	r3, [pc, #132]	; (8001384 <Uart_write+0x128>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8001306:	4b1e      	ldr	r3, [pc, #120]	; (8001380 <Uart_write+0x124>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	68da      	ldr	r2, [r3, #12]
 800130c:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <Uart_write+0x124>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001314:	60da      	str	r2, [r3, #12]
}
 8001316:	e029      	b.n	800136c <Uart_write+0x110>
		else if (uart == bmp_uart){
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	4a1b      	ldr	r2, [pc, #108]	; (8001388 <Uart_write+0x12c>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d125      	bne.n	800136c <Uart_write+0x110>
					int i = (_tx_buffer3->head + 1) % UART_BUFFER_SIZE;
 8001320:	4b1a      	ldr	r3, [pc, #104]	; (800138c <Uart_write+0x130>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001328:	3301      	adds	r3, #1
 800132a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800132e:	617b      	str	r3, [r7, #20]
					while (i == _tx_buffer3->tail);
 8001330:	bf00      	nop
 8001332:	4b16      	ldr	r3, [pc, #88]	; (800138c <Uart_write+0x130>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	429a      	cmp	r2, r3
 800133e:	d0f8      	beq.n	8001332 <Uart_write+0xd6>
					_tx_buffer3->buffer[_tx_buffer3->head] = (uint8_t)c;
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <Uart_write+0x130>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <Uart_write+0x130>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	b2c9      	uxtb	r1, r1
 8001350:	54d1      	strb	r1, [r2, r3]
					_tx_buffer3->head = i;
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <Uart_write+0x130>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
					__HAL_UART_ENABLE_IT(bmp_uart, UART_IT_TXE); // Enable UART transmission interrupt
 800135c:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <Uart_write+0x12c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	68da      	ldr	r2, [r3, #12]
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <Uart_write+0x12c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800136a:	60da      	str	r2, [r3, #12]
}
 800136c:	bf00      	nop
 800136e:	371c      	adds	r7, #28
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	200012d8 	.word	0x200012d8
 800137c:	200010b8 	.word	0x200010b8
 8001380:	20001318 	.word	0x20001318
 8001384:	200010b0 	.word	0x200010b0
 8001388:	20001298 	.word	0x20001298
 800138c:	200010c0 	.word	0x200010c0

08001390 <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a1f      	ldr	r2, [pc, #124]	; (8001418 <IsDataAvailable+0x88>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d10e      	bne.n	80013be <IsDataAvailable+0x2e>
 80013a0:	4b1e      	ldr	r3, [pc, #120]	; (800141c <IsDataAvailable+0x8c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	4b1c      	ldr	r3, [pc, #112]	; (800141c <IsDataAvailable+0x8c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013bc:	e027      	b.n	800140e <IsDataAvailable+0x7e>
	else if (uart == pc_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a17      	ldr	r2, [pc, #92]	; (8001420 <IsDataAvailable+0x90>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d10e      	bne.n	80013e4 <IsDataAvailable+0x54>
 80013c6:	4b17      	ldr	r3, [pc, #92]	; (8001424 <IsDataAvailable+0x94>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	4b14      	ldr	r3, [pc, #80]	; (8001424 <IsDataAvailable+0x94>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80013d8:	b29b      	uxth	r3, r3
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	b29b      	uxth	r3, r3
 80013de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013e2:	e014      	b.n	800140e <IsDataAvailable+0x7e>
	else if (uart == bmp_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer3->head - _rx_buffer3->tail) % UART_BUFFER_SIZE;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a10      	ldr	r2, [pc, #64]	; (8001428 <IsDataAvailable+0x98>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d10e      	bne.n	800140a <IsDataAvailable+0x7a>
 80013ec:	4b0f      	ldr	r3, [pc, #60]	; (800142c <IsDataAvailable+0x9c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	4b0d      	ldr	r3, [pc, #52]	; (800142c <IsDataAvailable+0x9c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80013fe:	b29b      	uxth	r3, r3
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	b29b      	uxth	r3, r3
 8001404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001408:	e001      	b.n	800140e <IsDataAvailable+0x7e>
	return -1;
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	200012d8 	.word	0x200012d8
 800141c:	200010b4 	.word	0x200010b4
 8001420:	20001318 	.word	0x20001318
 8001424:	200010c4 	.word	0x200010c4
 8001428:	20001298 	.word	0x20001298
 800142c:	200010bc 	.word	0x200010bc

08001430 <Get_after>:



int Get_after (char *string, uint8_t numberofchars, char *buffertosave, UART_HandleTypeDef *uart)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	607a      	str	r2, [r7, #4]
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	460b      	mov	r3, r1
 800143e:	72fb      	strb	r3, [r7, #11]

	while (Wait_for(string, uart) != 1);
 8001440:	bf00      	nop
 8001442:	6839      	ldr	r1, [r7, #0]
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f000 f8b7 	bl	80015b8 <Wait_for>
 800144a:	4603      	mov	r3, r0
 800144c:	2b01      	cmp	r3, #1
 800144e:	d1f8      	bne.n	8001442 <Get_after+0x12>
	for (int indx=0; indx<numberofchars; indx++)
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	e012      	b.n	800147c <Get_after+0x4c>
	{
		while (!(IsDataAvailable(uart)));
 8001456:	bf00      	nop
 8001458:	6838      	ldr	r0, [r7, #0]
 800145a:	f7ff ff99 	bl	8001390 <IsDataAvailable>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0f9      	beq.n	8001458 <Get_after+0x28>
		buffertosave[indx] = Uart_read(uart);
 8001464:	6838      	ldr	r0, [r7, #0]
 8001466:	f7ff fe67 	bl	8001138 <Uart_read>
 800146a:	4601      	mov	r1, r0
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	b2ca      	uxtb	r2, r1
 8001474:	701a      	strb	r2, [r3, #0]
	for (int indx=0; indx<numberofchars; indx++)
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	3301      	adds	r3, #1
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	7afb      	ldrb	r3, [r7, #11]
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	429a      	cmp	r2, r3
 8001482:	dbe8      	blt.n	8001456 <Get_after+0x26>
	}
	return 1;
 8001484:	2301      	movs	r3, #1
}
 8001486:	4618      	mov	r0, r3
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <Uart_sendstring>:

void Uart_sendstring (const char *s, UART_HandleTypeDef *uart)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	6039      	str	r1, [r7, #0]
	while(*s!='\0') Uart_write(*s++, uart);
 8001498:	e007      	b.n	80014aa <Uart_sendstring+0x1c>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	1c5a      	adds	r2, r3, #1
 800149e:	607a      	str	r2, [r7, #4]
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	6839      	ldr	r1, [r7, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fed9 	bl	800125c <Uart_write>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f3      	bne.n	800149a <Uart_sendstring+0xc>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <Copy_upto>:
  while(*s) Uart_write(*s++, uart);
}


int Copy_upto (char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
	int so_far =0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f7fe fe3f 	bl	8000150 <strlen>
 80014d2:	4603      	mov	r3, r0
 80014d4:	617b      	str	r3, [r7, #20]
	int indx = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61bb      	str	r3, [r7, #24]

again:
	while (!IsDataAvailable(uart));
 80014da:	bf00      	nop
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ff57 	bl	8001390 <IsDataAvailable>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0f9      	beq.n	80014dc <Copy_upto+0x20>
	while (Uart_peek(uart) != string[so_far])
 80014e8:	e01f      	b.n	800152a <Copy_upto+0x6e>
		{
			buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 80014ea:	4b32      	ldr	r3, [pc, #200]	; (80015b4 <Copy_upto+0xf8>)
 80014ec:	6819      	ldr	r1, [r3, #0]
 80014ee:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <Copy_upto+0xf8>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	68b8      	ldr	r0, [r7, #8]
 80014fa:	4403      	add	r3, r0
 80014fc:	5c8a      	ldrb	r2, [r1, r2]
 80014fe:	701a      	strb	r2, [r3, #0]
			_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8001500:	4b2c      	ldr	r3, [pc, #176]	; (80015b4 <Copy_upto+0xf8>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001508:	1c5a      	adds	r2, r3, #1
 800150a:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <Copy_upto+0xf8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001512:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	3301      	adds	r3, #1
 800151a:	61bb      	str	r3, [r7, #24]
			while (!IsDataAvailable(uart));
 800151c:	bf00      	nop
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ff36 	bl	8001390 <IsDataAvailable>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f9      	beq.n	800151e <Copy_upto+0x62>
	while (Uart_peek(uart) != string[so_far])
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff fda2 	bl	8001074 <Uart_peek>
 8001530:	4601      	mov	r1, r0
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	4413      	add	r3, r2
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	4299      	cmp	r1, r3
 800153c:	d1d5      	bne.n	80014ea <Copy_upto+0x2e>

		}
	while (Uart_peek(uart) == string [so_far])
 800153e:	e01b      	b.n	8001578 <Copy_upto+0xbc>
	{
		so_far++;
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	3301      	adds	r3, #1
 8001544:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = Uart_read(uart);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff fdf6 	bl	8001138 <Uart_read>
 800154c:	4601      	mov	r1, r0
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	1c5a      	adds	r2, r3, #1
 8001552:	61ba      	str	r2, [r7, #24]
 8001554:	461a      	mov	r2, r3
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	4413      	add	r3, r2
 800155a:	b2ca      	uxtb	r2, r1
 800155c:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 800155e:	69fa      	ldr	r2, [r7, #28]
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	429a      	cmp	r2, r3
 8001564:	d101      	bne.n	800156a <Copy_upto+0xae>
 8001566:	2301      	movs	r3, #1
 8001568:	e01f      	b.n	80015aa <Copy_upto+0xee>
		while (!IsDataAvailable(uart));
 800156a:	bf00      	nop
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff0f 	bl	8001390 <IsDataAvailable>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0f9      	beq.n	800156c <Copy_upto+0xb0>
	while (Uart_peek(uart) == string [so_far])
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff fd7b 	bl	8001074 <Uart_peek>
 800157e:	4601      	mov	r1, r0
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	4413      	add	r3, r2
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	4299      	cmp	r1, r3
 800158a:	d0d9      	beq.n	8001540 <Copy_upto+0x84>
	}

	if (so_far != len)
 800158c:	69fa      	ldr	r2, [r7, #28]
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	429a      	cmp	r2, r3
 8001592:	d002      	beq.n	800159a <Copy_upto+0xde>
	{
		so_far = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
		goto again;
 8001598:	e79f      	b.n	80014da <Copy_upto+0x1e>
	}

	if (so_far == len) return 1;
 800159a:	69fa      	ldr	r2, [r7, #28]
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d101      	bne.n	80015a6 <Copy_upto+0xea>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e001      	b.n	80015aa <Copy_upto+0xee>
	else return -1;
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295

}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3720      	adds	r7, #32
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200010b4 	.word	0x200010b4

080015b8 <Wait_for>:


int Wait_for (char *string,UART_HandleTypeDef *uart)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
	int so_far =0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7fe fdc2 	bl	8000150 <strlen>
 80015cc:	4603      	mov	r3, r0
 80015ce:	60bb      	str	r3, [r7, #8]

again_device:
	while (!IsDataAvailable(uart));
 80015d0:	bf00      	nop
 80015d2:	6838      	ldr	r0, [r7, #0]
 80015d4:	f7ff fedc 	bl	8001390 <IsDataAvailable>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0f9      	beq.n	80015d2 <Wait_for+0x1a>
	if (Uart_peek(uart) != string[so_far])
 80015de:	6838      	ldr	r0, [r7, #0]
 80015e0:	f7ff fd48 	bl	8001074 <Uart_peek>
 80015e4:	4601      	mov	r1, r0
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	4413      	add	r3, r2
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	4299      	cmp	r1, r3
 80015f0:	d01e      	beq.n	8001630 <Wait_for+0x78>
	{
		 _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE ;
 80015f2:	4b1e      	ldr	r3, [pc, #120]	; (800166c <Wait_for+0xb4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	4b1b      	ldr	r3, [pc, #108]	; (800166c <Wait_for+0xb4>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001604:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		goto again_device;
 8001608:	e7e2      	b.n	80015d0 <Wait_for+0x18>

	}
	while (Uart_peek(uart) == string [so_far])
	{
		so_far++;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	3301      	adds	r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
		Uart_read(uart);
 8001610:	6838      	ldr	r0, [r7, #0]
 8001612:	f7ff fd91 	bl	8001138 <Uart_read>
		if (so_far == len) return 1;
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	429a      	cmp	r2, r3
 800161c:	d101      	bne.n	8001622 <Wait_for+0x6a>
 800161e:	2301      	movs	r3, #1
 8001620:	e01f      	b.n	8001662 <Wait_for+0xaa>
		while (!IsDataAvailable(uart));
 8001622:	bf00      	nop
 8001624:	6838      	ldr	r0, [r7, #0]
 8001626:	f7ff feb3 	bl	8001390 <IsDataAvailable>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f9      	beq.n	8001624 <Wait_for+0x6c>
	while (Uart_peek(uart) == string [so_far])
 8001630:	6838      	ldr	r0, [r7, #0]
 8001632:	f7ff fd1f 	bl	8001074 <Uart_peek>
 8001636:	4601      	mov	r1, r0
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	4299      	cmp	r1, r3
 8001642:	d0e2      	beq.n	800160a <Wait_for+0x52>
	}

	if (so_far != len)
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	429a      	cmp	r2, r3
 800164a:	d002      	beq.n	8001652 <Wait_for+0x9a>
	{
		so_far = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	60fb      	str	r3, [r7, #12]
		goto again_device;
 8001650:	e7be      	b.n	80015d0 <Wait_for+0x18>
	}

	if (so_far == len) return 1;
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	429a      	cmp	r2, r3
 8001658:	d101      	bne.n	800165e <Wait_for+0xa6>
 800165a:	2301      	movs	r3, #1
 800165c:	e001      	b.n	8001662 <Wait_for+0xaa>
	else return -1;
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200010b4 	.word	0x200010b4

08001670 <Uart_isr>:

void Uart_isr (UART_HandleTypeDef *huart)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	f003 0320 	and.w	r3, r3, #32
 800168e:	2b00      	cmp	r3, #0
 8001690:	d030      	beq.n	80016f4 <Uart_isr+0x84>
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	f003 0320 	and.w	r3, r3, #32
 8001698:	2b00      	cmp	r3, #0
 800169a:	d02b      	beq.n	80016f4 <Uart_isr+0x84>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	73fb      	strb	r3, [r7, #15]
        if (huart == device_uart)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a5d      	ldr	r2, [pc, #372]	; (8001824 <Uart_isr+0x1b4>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d107      	bne.n	80016c2 <Uart_isr+0x52>
        {
        	store_char (c, _rx_buffer1);  // store data in buffer
 80016b2:	4b5d      	ldr	r3, [pc, #372]	; (8001828 <Uart_isr+0x1b8>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
 80016b8:	4611      	mov	r1, r2
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fc70 	bl	8000fa0 <store_char>

        else if (huart == bmp_uart)
                {
                   	store_char (c, _rx_buffer3);  // store data in buffer
                }
        return;
 80016c0:	e0a9      	b.n	8001816 <Uart_isr+0x1a6>
        else if (huart == pc_uart)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a59      	ldr	r2, [pc, #356]	; (800182c <Uart_isr+0x1bc>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d107      	bne.n	80016da <Uart_isr+0x6a>
           	store_char (c, _rx_buffer2);  // store data in buffer
 80016ca:	4b59      	ldr	r3, [pc, #356]	; (8001830 <Uart_isr+0x1c0>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	4611      	mov	r1, r2
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fc64 	bl	8000fa0 <store_char>
        return;
 80016d8:	e09d      	b.n	8001816 <Uart_isr+0x1a6>
        else if (huart == bmp_uart)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a55      	ldr	r2, [pc, #340]	; (8001834 <Uart_isr+0x1c4>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	f040 8099 	bne.w	8001816 <Uart_isr+0x1a6>
                   	store_char (c, _rx_buffer3);  // store data in buffer
 80016e4:	4b54      	ldr	r3, [pc, #336]	; (8001838 <Uart_isr+0x1c8>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	4611      	mov	r1, r2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fc57 	bl	8000fa0 <store_char>
        return;
 80016f2:	e090      	b.n	8001816 <Uart_isr+0x1a6>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 808e 	beq.w	800181c <Uart_isr+0x1ac>
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 8088 	beq.w	800181c <Uart_isr+0x1ac>
    {
    	if (huart == device_uart){
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a45      	ldr	r2, [pc, #276]	; (8001824 <Uart_isr+0x1b4>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d127      	bne.n	8001764 <Uart_isr+0xf4>
    	if(tx_buffer1.head == tx_buffer1.tail)
 8001714:	4b49      	ldr	r3, [pc, #292]	; (800183c <Uart_isr+0x1cc>)
 8001716:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800171a:	4b48      	ldr	r3, [pc, #288]	; (800183c <Uart_isr+0x1cc>)
 800171c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001720:	429a      	cmp	r2, r3
 8001722:	d108      	bne.n	8001736 <Uart_isr+0xc6>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	68da      	ldr	r2, [r3, #12]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001732:	60da      	str	r2, [r3, #12]
    	        	      huart->Instance->SR;
    	        	      huart->Instance->DR = c;

    	        	    }
    	        	}
    	return;
 8001734:	e071      	b.n	800181a <Uart_isr+0x1aa>
    	      unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8001736:	4b41      	ldr	r3, [pc, #260]	; (800183c <Uart_isr+0x1cc>)
 8001738:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800173c:	4a3f      	ldr	r2, [pc, #252]	; (800183c <Uart_isr+0x1cc>)
 800173e:	5cd3      	ldrb	r3, [r2, r3]
 8001740:	733b      	strb	r3, [r7, #12]
    	      tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8001742:	4b3e      	ldr	r3, [pc, #248]	; (800183c <Uart_isr+0x1cc>)
 8001744:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001748:	3301      	adds	r3, #1
 800174a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800174e:	4a3b      	ldr	r2, [pc, #236]	; (800183c <Uart_isr+0x1cc>)
 8001750:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	7b3a      	ldrb	r2, [r7, #12]
 8001760:	605a      	str	r2, [r3, #4]
    	return;
 8001762:	e05a      	b.n	800181a <Uart_isr+0x1aa>
    	else if (huart == pc_uart){
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a31      	ldr	r2, [pc, #196]	; (800182c <Uart_isr+0x1bc>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d127      	bne.n	80017bc <Uart_isr+0x14c>
        	if(tx_buffer2.head == tx_buffer2.tail)
 800176c:	4b34      	ldr	r3, [pc, #208]	; (8001840 <Uart_isr+0x1d0>)
 800176e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001772:	4b33      	ldr	r3, [pc, #204]	; (8001840 <Uart_isr+0x1d0>)
 8001774:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001778:	429a      	cmp	r2, r3
 800177a:	d108      	bne.n	800178e <Uart_isr+0x11e>
        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800178a:	60da      	str	r2, [r3, #12]
    	return;
 800178c:	e045      	b.n	800181a <Uart_isr+0x1aa>
        	      unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 800178e:	4b2c      	ldr	r3, [pc, #176]	; (8001840 <Uart_isr+0x1d0>)
 8001790:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001794:	4a2a      	ldr	r2, [pc, #168]	; (8001840 <Uart_isr+0x1d0>)
 8001796:	5cd3      	ldrb	r3, [r2, r3]
 8001798:	737b      	strb	r3, [r7, #13]
        	      tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 800179a:	4b29      	ldr	r3, [pc, #164]	; (8001840 <Uart_isr+0x1d0>)
 800179c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80017a0:	3301      	adds	r3, #1
 80017a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017a6:	4a26      	ldr	r2, [pc, #152]	; (8001840 <Uart_isr+0x1d0>)
 80017a8:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
        	      huart->Instance->SR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
        	      huart->Instance->DR = c;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	7b7a      	ldrb	r2, [r7, #13]
 80017b8:	605a      	str	r2, [r3, #4]
    	return;
 80017ba:	e02e      	b.n	800181a <Uart_isr+0x1aa>
    	else if (huart == bmp_uart){
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a1d      	ldr	r2, [pc, #116]	; (8001834 <Uart_isr+0x1c4>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d12a      	bne.n	800181a <Uart_isr+0x1aa>
    	        	if(tx_buffer3.head == tx_buffer3.tail)
 80017c4:	4b1f      	ldr	r3, [pc, #124]	; (8001844 <Uart_isr+0x1d4>)
 80017c6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80017ca:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <Uart_isr+0x1d4>)
 80017cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d108      	bne.n	80017e6 <Uart_isr+0x176>
    	        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68da      	ldr	r2, [r3, #12]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017e2:	60da      	str	r2, [r3, #12]
    	return;
 80017e4:	e019      	b.n	800181a <Uart_isr+0x1aa>
    	        	      unsigned char c = tx_buffer3.buffer[tx_buffer3.tail];
 80017e6:	4b17      	ldr	r3, [pc, #92]	; (8001844 <Uart_isr+0x1d4>)
 80017e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80017ec:	4a15      	ldr	r2, [pc, #84]	; (8001844 <Uart_isr+0x1d4>)
 80017ee:	5cd3      	ldrb	r3, [r2, r3]
 80017f0:	73bb      	strb	r3, [r7, #14]
    	        	      tx_buffer3.tail = (tx_buffer3.tail + 1) % UART_BUFFER_SIZE;
 80017f2:	4b14      	ldr	r3, [pc, #80]	; (8001844 <Uart_isr+0x1d4>)
 80017f4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80017f8:	3301      	adds	r3, #1
 80017fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017fe:	4a11      	ldr	r2, [pc, #68]	; (8001844 <Uart_isr+0x1d4>)
 8001800:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	        	      huart->Instance->SR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
    	        	      huart->Instance->DR = c;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	7bba      	ldrb	r2, [r7, #14]
 8001810:	605a      	str	r2, [r3, #4]
    	return;
 8001812:	bf00      	nop
 8001814:	e001      	b.n	800181a <Uart_isr+0x1aa>
        return;
 8001816:	bf00      	nop
 8001818:	e000      	b.n	800181c <Uart_isr+0x1ac>
    	return;
 800181a:	bf00      	nop
    }
}
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200012d8 	.word	0x200012d8
 8001828:	200010b4 	.word	0x200010b4
 800182c:	20001318 	.word	0x20001318
 8001830:	200010c4 	.word	0x200010c4
 8001834:	20001298 	.word	0x20001298
 8001838:	200010bc 	.word	0x200010bc
 800183c:	20000458 	.word	0x20000458
 8001840:	20000868 	.word	0x20000868
 8001844:	20000c78 	.word	0x20000c78

08001848 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184e:	f107 0310 	add.w	r3, r7, #16
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800185c:	4b2d      	ldr	r3, [pc, #180]	; (8001914 <MX_GPIO_Init+0xcc>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	4a2c      	ldr	r2, [pc, #176]	; (8001914 <MX_GPIO_Init+0xcc>)
 8001862:	f043 0310 	orr.w	r3, r3, #16
 8001866:	6193      	str	r3, [r2, #24]
 8001868:	4b2a      	ldr	r3, [pc, #168]	; (8001914 <MX_GPIO_Init+0xcc>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	f003 0310 	and.w	r3, r3, #16
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001874:	4b27      	ldr	r3, [pc, #156]	; (8001914 <MX_GPIO_Init+0xcc>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	4a26      	ldr	r2, [pc, #152]	; (8001914 <MX_GPIO_Init+0xcc>)
 800187a:	f043 0320 	orr.w	r3, r3, #32
 800187e:	6193      	str	r3, [r2, #24]
 8001880:	4b24      	ldr	r3, [pc, #144]	; (8001914 <MX_GPIO_Init+0xcc>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	f003 0320 	and.w	r3, r3, #32
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800188c:	4b21      	ldr	r3, [pc, #132]	; (8001914 <MX_GPIO_Init+0xcc>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	4a20      	ldr	r2, [pc, #128]	; (8001914 <MX_GPIO_Init+0xcc>)
 8001892:	f043 0304 	orr.w	r3, r3, #4
 8001896:	6193      	str	r3, [r2, #24]
 8001898:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <MX_GPIO_Init+0xcc>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a4:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <MX_GPIO_Init+0xcc>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	4a1a      	ldr	r2, [pc, #104]	; (8001914 <MX_GPIO_Init+0xcc>)
 80018aa:	f043 0308 	orr.w	r3, r3, #8
 80018ae:	6193      	str	r3, [r2, #24]
 80018b0:	4b18      	ldr	r3, [pc, #96]	; (8001914 <MX_GPIO_Init+0xcc>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	603b      	str	r3, [r7, #0]
 80018ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018bc:	2200      	movs	r2, #0
 80018be:	2120      	movs	r1, #32
 80018c0:	4815      	ldr	r0, [pc, #84]	; (8001918 <MX_GPIO_Init+0xd0>)
 80018c2:	f001 f8bd 	bl	8002a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 80018c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018cc:	4b13      	ldr	r3, [pc, #76]	; (800191c <MX_GPIO_Init+0xd4>)
 80018ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80018d4:	f107 0310 	add.w	r3, r7, #16
 80018d8:	4619      	mov	r1, r3
 80018da:	4811      	ldr	r0, [pc, #68]	; (8001920 <MX_GPIO_Init+0xd8>)
 80018dc:	f000 ff56 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80018e0:	2320      	movs	r3, #32
 80018e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2302      	movs	r3, #2
 80018ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018f0:	f107 0310 	add.w	r3, r7, #16
 80018f4:	4619      	mov	r1, r3
 80018f6:	4808      	ldr	r0, [pc, #32]	; (8001918 <MX_GPIO_Init+0xd0>)
 80018f8:	f000 ff48 	bl	800278c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2100      	movs	r1, #0
 8001900:	2028      	movs	r0, #40	; 0x28
 8001902:	f000 ff0c 	bl	800271e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001906:	2028      	movs	r0, #40	; 0x28
 8001908:	f000 ff25 	bl	8002756 <HAL_NVIC_EnableIRQ>

}
 800190c:	bf00      	nop
 800190e:	3720      	adds	r7, #32
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40021000 	.word	0x40021000
 8001918:	40010800 	.word	0x40010800
 800191c:	10210000 	.word	0x10210000
 8001920:	40011000 	.word	0x40011000

08001924 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <MX_I2C1_Init+0x50>)
 800192a:	4a13      	ldr	r2, [pc, #76]	; (8001978 <MX_I2C1_Init+0x54>)
 800192c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800192e:	4b11      	ldr	r3, [pc, #68]	; (8001974 <MX_I2C1_Init+0x50>)
 8001930:	4a12      	ldr	r2, [pc, #72]	; (800197c <MX_I2C1_Init+0x58>)
 8001932:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <MX_I2C1_Init+0x50>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800193a:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <MX_I2C1_Init+0x50>)
 800193c:	2200      	movs	r2, #0
 800193e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <MX_I2C1_Init+0x50>)
 8001942:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001946:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001948:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <MX_I2C1_Init+0x50>)
 800194a:	2200      	movs	r2, #0
 800194c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <MX_I2C1_Init+0x50>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001954:	4b07      	ldr	r3, [pc, #28]	; (8001974 <MX_I2C1_Init+0x50>)
 8001956:	2200      	movs	r2, #0
 8001958:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800195a:	4b06      	ldr	r3, [pc, #24]	; (8001974 <MX_I2C1_Init+0x50>)
 800195c:	2200      	movs	r2, #0
 800195e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001960:	4804      	ldr	r0, [pc, #16]	; (8001974 <MX_I2C1_Init+0x50>)
 8001962:	f001 f8c1 	bl	8002ae8 <HAL_I2C_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800196c:	f000 faca 	bl	8001f04 <Error_Handler>
  }

}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	200010c8 	.word	0x200010c8
 8001978:	40005400 	.word	0x40005400
 800197c:	000186a0 	.word	0x000186a0

08001980 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	; 0x28
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a1d      	ldr	r2, [pc, #116]	; (8001a10 <HAL_I2C_MspInit+0x90>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d132      	bne.n	8001a06 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a0:	4b1c      	ldr	r3, [pc, #112]	; (8001a14 <HAL_I2C_MspInit+0x94>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	4a1b      	ldr	r2, [pc, #108]	; (8001a14 <HAL_I2C_MspInit+0x94>)
 80019a6:	f043 0308 	orr.w	r3, r3, #8
 80019aa:	6193      	str	r3, [r2, #24]
 80019ac:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <HAL_I2C_MspInit+0x94>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	f003 0308 	and.w	r3, r3, #8
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019be:	2312      	movs	r3, #18
 80019c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019c2:	2303      	movs	r3, #3
 80019c4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c6:	f107 0314 	add.w	r3, r7, #20
 80019ca:	4619      	mov	r1, r3
 80019cc:	4812      	ldr	r0, [pc, #72]	; (8001a18 <HAL_I2C_MspInit+0x98>)
 80019ce:	f000 fedd 	bl	800278c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80019d2:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_I2C_MspInit+0x9c>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	f043 0302 	orr.w	r3, r3, #2
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
 80019e8:	4a0c      	ldr	r2, [pc, #48]	; (8001a1c <HAL_I2C_MspInit+0x9c>)
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <HAL_I2C_MspInit+0x94>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	4a08      	ldr	r2, [pc, #32]	; (8001a14 <HAL_I2C_MspInit+0x94>)
 80019f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019f8:	61d3      	str	r3, [r2, #28]
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_I2C_MspInit+0x94>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a06:	bf00      	nop
 8001a08:	3728      	adds	r7, #40	; 0x28
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40005400 	.word	0x40005400
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40010c00 	.word	0x40010c00
 8001a1c:	40010000 	.word	0x40010000

08001a20 <lcd_init>:
#include "lcd_chars.h"
#include "stm32f1xx_hal.h"
#include "i2c.h"

void lcd_init(struct lcd_disp * lcd)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 8001a36:	2308      	movs	r3, #8
 8001a38:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 8001a3a:	2028      	movs	r0, #40	; 0x28
 8001a3c:	f000 fd76 	bl	800252c <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	7bfa      	ldrb	r2, [r7, #15]
 8001a46:	2130      	movs	r1, #48	; 0x30
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f000 f82f 	bl	8001aac <lcd_write>
	HAL_Delay(5);
 8001a4e:	2005      	movs	r0, #5
 8001a50:	f000 fd6c 	bl	800252c <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	7bfa      	ldrb	r2, [r7, #15]
 8001a5a:	2130      	movs	r1, #48	; 0x30
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f000 f825 	bl	8001aac <lcd_write>
	HAL_Delay(1);
 8001a62:	2001      	movs	r0, #1
 8001a64:	f000 fd62 	bl	800252c <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	7bfa      	ldrb	r2, [r7, #15]
 8001a6e:	2130      	movs	r1, #48	; 0x30
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 f81b 	bl	8001aac <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	7bfa      	ldrb	r2, [r7, #15]
 8001a7c:	2102      	movs	r1, #2
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 f814 	bl	8001aac <lcd_write>
	HAL_Delay(5);
 8001a84:	2005      	movs	r0, #5
 8001a86:	f000 fd51 	bl	800252c <HAL_Delay>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	7bfa      	ldrb	r2, [r7, #15]
 8001a90:	210c      	movs	r1, #12
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 f80a 	bl	8001aac <lcd_write>
	HAL_Delay(5);
 8001a98:	2005      	movs	r0, #5
 8001a9a:	f000 fd47 	bl	800252c <HAL_Delay>

	/* clear */
	lcd_clear(lcd);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f8a7 	bl	8001bf2 <lcd_clear>
}
 8001aa4:	bf00      	nop
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af02      	add	r7, sp, #8
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	71fb      	strb	r3, [r7, #7]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	71bb      	strb	r3, [r7, #6]
 8001aba:	4613      	mov	r3, r2
 8001abc:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 8001abe:	79bb      	ldrb	r3, [r7, #6]
 8001ac0:	f023 030f 	bic.w	r3, r3, #15
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	797b      	ldrb	r3, [r7, #5]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	f043 0304 	orr.w	r3, r3, #4
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8001ad4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001ad8:	f023 030f 	bic.w	r3, r3, #15
 8001adc:	b25a      	sxtb	r2, r3
 8001ade:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	b25b      	sxtb	r3, r3
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 8001aea:	79bb      	ldrb	r3, [r7, #6]
 8001aec:	011b      	lsls	r3, r3, #4
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	797b      	ldrb	r3, [r7, #5]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	f043 0304 	orr.w	r3, r3, #4
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 8001afe:	79bb      	ldrb	r3, [r7, #6]
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	b25a      	sxtb	r2, r3
 8001b04:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	b25b      	sxtb	r3, r3
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	b299      	uxth	r1, r3
 8001b14:	f107 020c 	add.w	r2, r7, #12
 8001b18:	2364      	movs	r3, #100	; 0x64
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	4803      	ldr	r0, [pc, #12]	; (8001b2c <lcd_write+0x80>)
 8001b20:	f001 f91a 	bl	8002d58 <HAL_I2C_Master_Transmit>
}
 8001b24:	bf00      	nop
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	200010c8 	.word	0x200010c8

08001b30 <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	73fb      	strb	r3, [r7, #15]
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	73bb      	strb	r3, [r7, #14]
	char ch;

	/* set backlight */
	if(lcd->bl)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 8001b4a:	2308      	movs	r3, #8
 8001b4c:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f84f 	bl	8001bf2 <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	7bfa      	ldrb	r2, [r7, #15]
 8001b5a:	2180      	movs	r1, #128	; 0x80
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ffa5 	bl	8001aac <lcd_write>
	while(ch = lcd->f_line[i])
 8001b62:	e015      	b.n	8001b90 <lcd_display+0x60>
	{
		if (ch < 9)
 8001b64:	7b7b      	ldrb	r3, [r7, #13]
 8001b66:	2b08      	cmp	r3, #8
 8001b68:	d802      	bhi.n	8001b70 <lcd_display+0x40>
		{
			ch--;
 8001b6a:	7b7b      	ldrb	r3, [r7, #13]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	737b      	strb	r3, [r7, #13]
		}
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	7818      	ldrb	r0, [r3, #0]
 8001b74:	7bbb      	ldrb	r3, [r7, #14]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	7859      	ldrb	r1, [r3, #1]
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	461a      	mov	r2, r3
 8001b86:	f7ff ff91 	bl	8001aac <lcd_write>
		i++;
 8001b8a:	7bbb      	ldrb	r3, [r7, #14]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	73bb      	strb	r3, [r7, #14]
	while(ch = lcd->f_line[i])
 8001b90:	7bbb      	ldrb	r3, [r7, #14]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	785b      	ldrb	r3, [r3, #1]
 8001b98:	737b      	strb	r3, [r7, #13]
 8001b9a:	7b7b      	ldrb	r3, [r7, #13]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1e1      	bne.n	8001b64 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	7bfa      	ldrb	r2, [r7, #15]
 8001baa:	21c0      	movs	r1, #192	; 0xc0
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff7d 	bl	8001aac <lcd_write>
	while(ch = lcd->s_line[i])
 8001bb2:	e012      	b.n	8001bda <lcd_display+0xaa>
	{
		if (ch < 9)
 8001bb4:	7b7b      	ldrb	r3, [r7, #13]
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d802      	bhi.n	8001bc0 <lcd_display+0x90>
		{
			ch--;
 8001bba:	7b7b      	ldrb	r3, [r7, #13]
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	737b      	strb	r3, [r7, #13]
		}
		lcd_write(lcd->addr, ch, (xpin | RS_PIN));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	7818      	ldrb	r0, [r3, #0]
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	7b7b      	ldrb	r3, [r7, #13]
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f7ff ff6c 	bl	8001aac <lcd_write>
		i++;
 8001bd4:	7bbb      	ldrb	r3, [r7, #14]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	73bb      	strb	r3, [r7, #14]
	while(ch = lcd->s_line[i])
 8001bda:	7bbb      	ldrb	r3, [r7, #14]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	4413      	add	r3, r2
 8001be0:	7c9b      	ldrb	r3, [r3, #18]
 8001be2:	737b      	strb	r3, [r7, #13]
 8001be4:	7b7b      	ldrb	r3, [r7, #13]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1e4      	bne.n	8001bb4 <lcd_display+0x84>
	}
}
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b084      	sub	sp, #16
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 8001c08:	2308      	movs	r3, #8
 8001c0a:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	7bfa      	ldrb	r2, [r7, #15]
 8001c12:	2101      	movs	r1, #1
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ff49 	bl	8001aac <lcd_write>
//	HAL_Delay(2);
}
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <lcd_prog>:


void lcd_prog(struct lcd_disp * lcd)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i, j;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <lcd_prog+0x1a>
	{
		xpin = BL_PIN;
 8001c3a:	2308      	movs	r3, #8
 8001c3c:	73fb      	strb	r3, [r7, #15]
	}

	/* send 8 custom chars */
	lcd_write(lcd->addr, (CG_FIRST_CHAR), xpin);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	7bfa      	ldrb	r2, [r7, #15]
 8001c44:	2140      	movs	r1, #64	; 0x40
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff ff30 	bl	8001aac <lcd_write>
	for(i = 0; i <= 7; i++)
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	73bb      	strb	r3, [r7, #14]
 8001c50:	e01b      	b.n	8001c8a <lcd_prog+0x66>
	{
		for(j = 0; j <= 7; j ++)
 8001c52:	2300      	movs	r3, #0
 8001c54:	737b      	strb	r3, [r7, #13]
 8001c56:	e012      	b.n	8001c7e <lcd_prog+0x5a>
		{
			lcd_write(lcd->addr, (user_chars[i][j]), (xpin | RS_PIN));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	7818      	ldrb	r0, [r3, #0]
 8001c5c:	7bba      	ldrb	r2, [r7, #14]
 8001c5e:	7b7b      	ldrb	r3, [r7, #13]
 8001c60:	490d      	ldr	r1, [pc, #52]	; (8001c98 <lcd_prog+0x74>)
 8001c62:	00d2      	lsls	r2, r2, #3
 8001c64:	440a      	add	r2, r1
 8001c66:	4413      	add	r3, r2
 8001c68:	7819      	ldrb	r1, [r3, #0]
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	461a      	mov	r2, r3
 8001c74:	f7ff ff1a 	bl	8001aac <lcd_write>
		for(j = 0; j <= 7; j ++)
 8001c78:	7b7b      	ldrb	r3, [r7, #13]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	737b      	strb	r3, [r7, #13]
 8001c7e:	7b7b      	ldrb	r3, [r7, #13]
 8001c80:	2b07      	cmp	r3, #7
 8001c82:	d9e9      	bls.n	8001c58 <lcd_prog+0x34>
	for(i = 0; i <= 7; i++)
 8001c84:	7bbb      	ldrb	r3, [r7, #14]
 8001c86:	3301      	adds	r3, #1
 8001c88:	73bb      	strb	r3, [r7, #14]
 8001c8a:	7bbb      	ldrb	r3, [r7, #14]
 8001c8c:	2b07      	cmp	r3, #7
 8001c8e:	d9e0      	bls.n	8001c52 <lcd_prog+0x2e>
		}
	}
}
 8001c90:	bf00      	nop
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000010 	.word	0x20000010

08001c9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ca2:	f000 fbe1 	bl	8002468 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ca6:	f000 f86d 	bl	8001d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001caa:	f7ff fdcd 	bl	8001848 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001cae:	f000 fa95 	bl	80021dc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001cb2:	f000 fa69 	bl	8002188 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001cb6:	f7ff fe35 	bl	8001924 <MX_I2C1_Init>
  MX_TIM4_Init();
 8001cba:	f000 f9f1 	bl	80020a0 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8001cbe:	f000 fab7 	bl	8002230 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8001cc2:	4824      	ldr	r0, [pc, #144]	; (8001d54 <main+0xb8>)
 8001cc4:	f001 ffba 	bl	8003c3c <HAL_TIM_Base_Start_IT>

  ESP_Init("HUAWEI-B315-4735","RE7EF6GRR7L");
 8001cc8:	4923      	ldr	r1, [pc, #140]	; (8001d58 <main+0xbc>)
 8001cca:	4824      	ldr	r0, [pc, #144]	; (8001d5c <main+0xc0>)
 8001ccc:	f7fe fee6 	bl	8000a9c <ESP_Init>

    HAL_UART_Transmit(&huart2, Data, size, 1000);
 8001cd0:	4b23      	ldr	r3, [pc, #140]	; (8001d60 <main+0xc4>)
 8001cd2:	881a      	ldrh	r2, [r3, #0]
 8001cd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cd8:	4922      	ldr	r1, [pc, #136]	; (8001d64 <main+0xc8>)
 8001cda:	4823      	ldr	r0, [pc, #140]	; (8001d68 <main+0xcc>)
 8001cdc:	f002 fb99 	bl	8004412 <HAL_UART_Transmit>

      disp.addr = (0x27 << 1);
 8001ce0:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <main+0xd0>)
 8001ce2:	224e      	movs	r2, #78	; 0x4e
 8001ce4:	701a      	strb	r2, [r3, #0]
      disp.bl = true;
 8001ce6:	4b21      	ldr	r3, [pc, #132]	; (8001d6c <main+0xd0>)
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
      lcd_init(&disp);
 8001cee:	481f      	ldr	r0, [pc, #124]	; (8001d6c <main+0xd0>)
 8001cf0:	f7ff fe96 	bl	8001a20 <lcd_init>
      lcd_prog(&disp);
 8001cf4:	481d      	ldr	r0, [pc, #116]	; (8001d6c <main+0xd0>)
 8001cf6:	f7ff ff95 	bl	8001c24 <lcd_prog>
      char* front = "  ";
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <main+0xd4>)
 8001cfc:	617b      	str	r3, [r7, #20]
      char* addr = getIP();
 8001cfe:	f7fe fec3 	bl	8000a88 <getIP>
 8001d02:	4603      	mov	r3, r0
 8001d04:	613b      	str	r3, [r7, #16]
      char* txtlcd;
      txtlcd = malloc(strlen(front)+1+4);
 8001d06:	6978      	ldr	r0, [r7, #20]
 8001d08:	f7fe fa22 	bl	8000150 <strlen>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	3305      	adds	r3, #5
 8001d10:	4618      	mov	r0, r3
 8001d12:	f002 fd13 	bl	800473c <malloc>
 8001d16:	4603      	mov	r3, r0
 8001d18:	60fb      	str	r3, [r7, #12]
      strcpy(txtlcd, front);
 8001d1a:	6979      	ldr	r1, [r7, #20]
 8001d1c:	68f8      	ldr	r0, [r7, #12]
 8001d1e:	f003 fa86 	bl	800522e <strcpy>
      strcat(txtlcd, addr);
 8001d22:	6939      	ldr	r1, [r7, #16]
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f003 fa73 	bl	8005210 <strcat>
      sprintf(disp.f_line, txtlcd);
 8001d2a:	68f9      	ldr	r1, [r7, #12]
 8001d2c:	4811      	ldr	r0, [pc, #68]	; (8001d74 <main+0xd8>)
 8001d2e:	f003 fa4f 	bl	80051d0 <siprintf>
      sprintf(disp.s_line, "Temp.:");
 8001d32:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <main+0xdc>)
 8001d34:	4a11      	ldr	r2, [pc, #68]	; (8001d7c <main+0xe0>)
 8001d36:	6810      	ldr	r0, [r2, #0]
 8001d38:	6018      	str	r0, [r3, #0]
 8001d3a:	8891      	ldrh	r1, [r2, #4]
 8001d3c:	7992      	ldrb	r2, [r2, #6]
 8001d3e:	8099      	strh	r1, [r3, #4]
 8001d40:	719a      	strb	r2, [r3, #6]
      lcd_display(&disp);
 8001d42:	480a      	ldr	r0, [pc, #40]	; (8001d6c <main+0xd0>)
 8001d44:	f7ff fef4 	bl	8001b30 <lcd_display>

      is_LCD_avaliable = true;
 8001d48:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <main+0xe4>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Server_Start();
 8001d4e:	f7ff f863 	bl	8000e18 <Server_Start>
 8001d52:	e7fc      	b.n	8001d4e <main+0xb2>
 8001d54:	20001250 	.word	0x20001250
 8001d58:	08006b34 	.word	0x08006b34
 8001d5c:	08006b40 	.word	0x08006b40
 8001d60:	20001228 	.word	0x20001228
 8001d64:	20001128 	.word	0x20001128
 8001d68:	20001318 	.word	0x20001318
 8001d6c:	2000122c 	.word	0x2000122c
 8001d70:	08006b54 	.word	0x08006b54
 8001d74:	2000122d 	.word	0x2000122d
 8001d78:	2000123e 	.word	0x2000123e
 8001d7c:	08006b58 	.word	0x08006b58
 8001d80:	20000e80 	.word	0x20000e80

08001d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b090      	sub	sp, #64	; 0x40
 8001d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d8a:	f107 0318 	add.w	r3, r7, #24
 8001d8e:	2228      	movs	r2, #40	; 0x28
 8001d90:	2100      	movs	r1, #0
 8001d92:	4618      	mov	r0, r3
 8001d94:	f002 fcda 	bl	800474c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d98:	1d3b      	adds	r3, r7, #4
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]
 8001da4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001da6:	2302      	movs	r3, #2
 8001da8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001daa:	2301      	movs	r3, #1
 8001dac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dae:	2310      	movs	r3, #16
 8001db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001db2:	2302      	movs	r3, #2
 8001db4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001db6:	2300      	movs	r3, #0
 8001db8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001dba:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dc0:	f107 0318 	add.w	r3, r7, #24
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f001 facd 	bl	8003364 <HAL_RCC_OscConfig>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001dd0:	f000 f898 	bl	8001f04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dd4:	230f      	movs	r3, #15
 8001dd6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001de0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001de4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	2102      	movs	r1, #2
 8001dee:	4618      	mov	r0, r3
 8001df0:	f001 fd38 	bl	8003864 <HAL_RCC_ClockConfig>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001dfa:	f000 f883 	bl	8001f04 <Error_Handler>
  }
}
 8001dfe:	bf00      	nop
 8001e00:	3740      	adds	r7, #64	; 0x40
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4){
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a31      	ldr	r2, [pc, #196]	; (8001edc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d15b      	bne.n	8001ed2 <HAL_TIM_PeriodElapsedCallback+0xca>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001e1a:	2120      	movs	r1, #32
 8001e1c:	4830      	ldr	r0, [pc, #192]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001e1e:	f000 fe27 	bl	8002a70 <HAL_GPIO_TogglePin>
		if(is_LCD_avaliable){
 8001e22:	4b30      	ldr	r3, [pc, #192]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d053      	beq.n	8001ed2 <HAL_TIM_PeriodElapsedCallback+0xca>
				if(IsDataAvailable(bmp_uart)){
 8001e2a:	482f      	ldr	r0, [pc, #188]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001e2c:	f7ff fab0 	bl	8001390 <IsDataAvailable>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d042      	beq.n	8001ebc <HAL_TIM_PeriodElapsedCallback+0xb4>
					int data = Uart_read(bmp_uart);
 8001e36:	482c      	ldr	r0, [pc, #176]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001e38:	f7ff f97e 	bl	8001138 <Uart_read>
 8001e3c:	60b8      	str	r0, [r7, #8]
					Uart_write(data,bmp_uart);
 8001e3e:	492a      	ldr	r1, [pc, #168]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001e40:	68b8      	ldr	r0, [r7, #8]
 8001e42:	f7ff fa0b 	bl	800125c <Uart_write>
					if(x = 10) {
 8001e46:	4b29      	ldr	r3, [pc, #164]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001e48:	220a      	movs	r2, #10
 8001e4a:	601a      	str	r2, [r3, #0]
					int j = 0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60fb      	str	r3, [r7, #12]
					while(getBuffer()->buffer[i]!=';'){
 8001e50:	e01d      	b.n	8001e8e <HAL_TIM_PeriodElapsedCallback+0x86>
						output[j] = getBuffer()->buffer[i];
 8001e52:	f7ff f89b 	bl	8000f8c <getBuffer>
 8001e56:	4602      	mov	r2, r0
 8001e58:	4b25      	ldr	r3, [pc, #148]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	5cd1      	ldrb	r1, [r2, r3]
 8001e5e:	4a25      	ldr	r2, [pc, #148]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4413      	add	r3, r2
 8001e64:	460a      	mov	r2, r1
 8001e66:	701a      	strb	r2, [r3, #0]
						j++;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	60fb      	str	r3, [r7, #12]
						if(j>=5) break;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	dc15      	bgt.n	8001ea0 <HAL_TIM_PeriodElapsedCallback+0x98>
						i++;
 8001e74:	4b1e      	ldr	r3, [pc, #120]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	4a1d      	ldr	r2, [pc, #116]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001e7c:	6013      	str	r3, [r2, #0]
						if(i >= 512) i = 0;
 8001e7e:	4b1c      	ldr	r3, [pc, #112]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e86:	db02      	blt.n	8001e8e <HAL_TIM_PeriodElapsedCallback+0x86>
 8001e88:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
					while(getBuffer()->buffer[i]!=';'){
 8001e8e:	f7ff f87d 	bl	8000f8c <getBuffer>
 8001e92:	4602      	mov	r2, r0
 8001e94:	4b16      	ldr	r3, [pc, #88]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	5cd3      	ldrb	r3, [r2, r3]
 8001e9a:	2b3b      	cmp	r3, #59	; 0x3b
 8001e9c:	d1d9      	bne.n	8001e52 <HAL_TIM_PeriodElapsedCallback+0x4a>
 8001e9e:	e000      	b.n	8001ea2 <HAL_TIM_PeriodElapsedCallback+0x9a>
						if(j>=5) break;
 8001ea0:	bf00      	nop
					}
					i++;
 8001ea2:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	4a11      	ldr	r2, [pc, #68]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001eaa:	6013      	str	r3, [r2, #0]
					x = 0;
 8001eac:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
					}
					x++;
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	4a0c      	ldr	r2, [pc, #48]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001eba:	6013      	str	r3, [r2, #0]
			}
			sprintf(disp.s_line, "Temp.:%sC", output);
 8001ebc:	4a0d      	ldr	r2, [pc, #52]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001ebe:	490e      	ldr	r1, [pc, #56]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001ec0:	480e      	ldr	r0, [pc, #56]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001ec2:	f003 f985 	bl	80051d0 <siprintf>
			lcd_display(&disp);
 8001ec6:	480e      	ldr	r0, [pc, #56]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001ec8:	f7ff fe32 	bl	8001b30 <lcd_display>
			setOut(output);
 8001ecc:	4809      	ldr	r0, [pc, #36]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001ece:	f7fe ffd7 	bl	8000e80 <setOut>
		}
	}
}
 8001ed2:	bf00      	nop
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40000800 	.word	0x40000800
 8001ee0:	40010800 	.word	0x40010800
 8001ee4:	20000e80 	.word	0x20000e80
 8001ee8:	20001298 	.word	0x20001298
 8001eec:	20000e88 	.word	0x20000e88
 8001ef0:	20000e84 	.word	0x20000e84
 8001ef4:	20000050 	.word	0x20000050
 8001ef8:	08006b60 	.word	0x08006b60
 8001efc:	2000123e 	.word	0x2000123e
 8001f00:	2000122c 	.word	0x2000122c

08001f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr

08001f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <HAL_MspInit+0x5c>)
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	4a14      	ldr	r2, [pc, #80]	; (8001f6c <HAL_MspInit+0x5c>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6193      	str	r3, [r2, #24]
 8001f22:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <HAL_MspInit+0x5c>)
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2e:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <HAL_MspInit+0x5c>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	4a0e      	ldr	r2, [pc, #56]	; (8001f6c <HAL_MspInit+0x5c>)
 8001f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f38:	61d3      	str	r3, [r2, #28]
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <HAL_MspInit+0x5c>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f42:	607b      	str	r3, [r7, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f46:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <HAL_MspInit+0x60>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <HAL_MspInit+0x60>)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40010000 	.word	0x40010000

08001f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <HardFault_Handler+0x4>

08001f86 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f8a:	e7fe      	b.n	8001f8a <MemManage_Handler+0x4>

08001f8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f90:	e7fe      	b.n	8001f90 <BusFault_Handler+0x4>

08001f92 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f96:	e7fe      	b.n	8001f96 <UsageFault_Handler+0x4>

08001f98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr

08001fb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr

08001fbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fc0:	f000 fa98 	bl	80024f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fcc:	4802      	ldr	r0, [pc, #8]	; (8001fd8 <TIM4_IRQHandler+0x10>)
 8001fce:	f001 fe87 	bl	8003ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20001250 	.word	0x20001250

08001fdc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8001fe0:	4802      	ldr	r0, [pc, #8]	; (8001fec <USART1_IRQHandler+0x10>)
 8001fe2:	f7ff fb45 	bl	8001670 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  //HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	200012d8 	.word	0x200012d8

08001ff0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 8001ff4:	4802      	ldr	r0, [pc, #8]	; (8002000 <USART2_IRQHandler+0x10>)
 8001ff6:	f7ff fb3b 	bl	8001670 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  //HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20001318 	.word	0x20001318

08002004 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	Uart_isr(&huart3);
 8002008:	4802      	ldr	r0, [pc, #8]	; (8002014 <USART3_IRQHandler+0x10>)
 800200a:	f7ff fb31 	bl	8001670 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
 // HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20001298 	.word	0x20001298

08002018 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800201c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002020:	f000 fd40 	bl	8002aa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002024:	bf00      	nop
 8002026:	bd80      	pop	{r7, pc}

08002028 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002030:	4a14      	ldr	r2, [pc, #80]	; (8002084 <_sbrk+0x5c>)
 8002032:	4b15      	ldr	r3, [pc, #84]	; (8002088 <_sbrk+0x60>)
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800203c:	4b13      	ldr	r3, [pc, #76]	; (800208c <_sbrk+0x64>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d102      	bne.n	800204a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002044:	4b11      	ldr	r3, [pc, #68]	; (800208c <_sbrk+0x64>)
 8002046:	4a12      	ldr	r2, [pc, #72]	; (8002090 <_sbrk+0x68>)
 8002048:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800204a:	4b10      	ldr	r3, [pc, #64]	; (800208c <_sbrk+0x64>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4413      	add	r3, r2
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	429a      	cmp	r2, r3
 8002056:	d207      	bcs.n	8002068 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002058:	f002 fb46 	bl	80046e8 <__errno>
 800205c:	4602      	mov	r2, r0
 800205e:	230c      	movs	r3, #12
 8002060:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002062:	f04f 33ff 	mov.w	r3, #4294967295
 8002066:	e009      	b.n	800207c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <_sbrk+0x64>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800206e:	4b07      	ldr	r3, [pc, #28]	; (800208c <_sbrk+0x64>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4413      	add	r3, r2
 8002076:	4a05      	ldr	r2, [pc, #20]	; (800208c <_sbrk+0x64>)
 8002078:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800207a:	68fb      	ldr	r3, [r7, #12]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20005000 	.word	0x20005000
 8002088:	00000400 	.word	0x00000400
 800208c:	20000e8c 	.word	0x20000e8c
 8002090:	20001360 	.word	0x20001360

08002094 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr

080020a0 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020a6:	f107 0308 	add.w	r3, r7, #8
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b4:	463b      	mov	r3, r7
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 80020bc:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <MX_TIM4_Init+0x94>)
 80020be:	4a1e      	ldr	r2, [pc, #120]	; (8002138 <MX_TIM4_Init+0x98>)
 80020c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 639 ;
 80020c2:	4b1c      	ldr	r3, [pc, #112]	; (8002134 <MX_TIM4_Init+0x94>)
 80020c4:	f240 227f 	movw	r2, #639	; 0x27f
 80020c8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ca:	4b1a      	ldr	r3, [pc, #104]	; (8002134 <MX_TIM4_Init+0x94>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999 ;
 80020d0:	4b18      	ldr	r3, [pc, #96]	; (8002134 <MX_TIM4_Init+0x94>)
 80020d2:	f242 720f 	movw	r2, #9999	; 0x270f
 80020d6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d8:	4b16      	ldr	r3, [pc, #88]	; (8002134 <MX_TIM4_Init+0x94>)
 80020da:	2200      	movs	r2, #0
 80020dc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020de:	4b15      	ldr	r3, [pc, #84]	; (8002134 <MX_TIM4_Init+0x94>)
 80020e0:	2280      	movs	r2, #128	; 0x80
 80020e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80020e4:	4813      	ldr	r0, [pc, #76]	; (8002134 <MX_TIM4_Init+0x94>)
 80020e6:	f001 fd59 	bl	8003b9c <HAL_TIM_Base_Init>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80020f0:	f7ff ff08 	bl	8001f04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80020fa:	f107 0308 	add.w	r3, r7, #8
 80020fe:	4619      	mov	r1, r3
 8002100:	480c      	ldr	r0, [pc, #48]	; (8002134 <MX_TIM4_Init+0x94>)
 8002102:	f001 fef5 	bl	8003ef0 <HAL_TIM_ConfigClockSource>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800210c:	f7ff fefa 	bl	8001f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002110:	2300      	movs	r3, #0
 8002112:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002114:	2300      	movs	r3, #0
 8002116:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002118:	463b      	mov	r3, r7
 800211a:	4619      	mov	r1, r3
 800211c:	4805      	ldr	r0, [pc, #20]	; (8002134 <MX_TIM4_Init+0x94>)
 800211e:	f002 f8bb 	bl	8004298 <HAL_TIMEx_MasterConfigSynchronization>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002128:	f7ff feec 	bl	8001f04 <Error_Handler>
  }

}
 800212c:	bf00      	nop
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20001250 	.word	0x20001250
 8002138:	40000800 	.word	0x40000800

0800213c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a0d      	ldr	r2, [pc, #52]	; (8002180 <HAL_TIM_Base_MspInit+0x44>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d113      	bne.n	8002176 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800214e:	4b0d      	ldr	r3, [pc, #52]	; (8002184 <HAL_TIM_Base_MspInit+0x48>)
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	4a0c      	ldr	r2, [pc, #48]	; (8002184 <HAL_TIM_Base_MspInit+0x48>)
 8002154:	f043 0304 	orr.w	r3, r3, #4
 8002158:	61d3      	str	r3, [r2, #28]
 800215a:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <HAL_TIM_Base_MspInit+0x48>)
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002166:	2200      	movs	r2, #0
 8002168:	2100      	movs	r1, #0
 800216a:	201e      	movs	r0, #30
 800216c:	f000 fad7 	bl	800271e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002170:	201e      	movs	r0, #30
 8002172:	f000 faf0 	bl	8002756 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40000800 	.word	0x40000800
 8002184:	40021000 	.word	0x40021000

08002188 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 800218e:	4a12      	ldr	r2, [pc, #72]	; (80021d8 <MX_USART1_UART_Init+0x50>)
 8002190:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002192:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 8002194:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002198:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800219a:	4b0e      	ldr	r3, [pc, #56]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 800219c:	2200      	movs	r2, #0
 800219e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021a6:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021ac:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 80021ae:	220c      	movs	r2, #12
 80021b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021be:	4805      	ldr	r0, [pc, #20]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 80021c0:	f002 f8da 	bl	8004378 <HAL_UART_Init>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80021ca:	f7ff fe9b 	bl	8001f04 <Error_Handler>
  }

}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	200012d8 	.word	0x200012d8
 80021d8:	40013800 	.word	0x40013800

080021dc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80021e0:	4b11      	ldr	r3, [pc, #68]	; (8002228 <MX_USART2_UART_Init+0x4c>)
 80021e2:	4a12      	ldr	r2, [pc, #72]	; (800222c <MX_USART2_UART_Init+0x50>)
 80021e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021e6:	4b10      	ldr	r3, [pc, #64]	; (8002228 <MX_USART2_UART_Init+0x4c>)
 80021e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021ee:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <MX_USART2_UART_Init+0x4c>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021f4:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <MX_USART2_UART_Init+0x4c>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021fa:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <MX_USART2_UART_Init+0x4c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002200:	4b09      	ldr	r3, [pc, #36]	; (8002228 <MX_USART2_UART_Init+0x4c>)
 8002202:	220c      	movs	r2, #12
 8002204:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002206:	4b08      	ldr	r3, [pc, #32]	; (8002228 <MX_USART2_UART_Init+0x4c>)
 8002208:	2200      	movs	r2, #0
 800220a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800220c:	4b06      	ldr	r3, [pc, #24]	; (8002228 <MX_USART2_UART_Init+0x4c>)
 800220e:	2200      	movs	r2, #0
 8002210:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002212:	4805      	ldr	r0, [pc, #20]	; (8002228 <MX_USART2_UART_Init+0x4c>)
 8002214:	f002 f8b0 	bl	8004378 <HAL_UART_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800221e:	f7ff fe71 	bl	8001f04 <Error_Handler>
  }

}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20001318 	.word	0x20001318
 800222c:	40004400 	.word	0x40004400

08002230 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <MX_USART3_UART_Init+0x4c>)
 8002236:	4a12      	ldr	r2, [pc, #72]	; (8002280 <MX_USART3_UART_Init+0x50>)
 8002238:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <MX_USART3_UART_Init+0x4c>)
 800223c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002240:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002242:	4b0e      	ldr	r3, [pc, #56]	; (800227c <MX_USART3_UART_Init+0x4c>)
 8002244:	2200      	movs	r2, #0
 8002246:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <MX_USART3_UART_Init+0x4c>)
 800224a:	2200      	movs	r2, #0
 800224c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800224e:	4b0b      	ldr	r3, [pc, #44]	; (800227c <MX_USART3_UART_Init+0x4c>)
 8002250:	2200      	movs	r2, #0
 8002252:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002254:	4b09      	ldr	r3, [pc, #36]	; (800227c <MX_USART3_UART_Init+0x4c>)
 8002256:	220c      	movs	r2, #12
 8002258:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800225a:	4b08      	ldr	r3, [pc, #32]	; (800227c <MX_USART3_UART_Init+0x4c>)
 800225c:	2200      	movs	r2, #0
 800225e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <MX_USART3_UART_Init+0x4c>)
 8002262:	2200      	movs	r2, #0
 8002264:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002266:	4805      	ldr	r0, [pc, #20]	; (800227c <MX_USART3_UART_Init+0x4c>)
 8002268:	f002 f886 	bl	8004378 <HAL_UART_Init>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002272:	f7ff fe47 	bl	8001f04 <Error_Handler>
  }

}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20001298 	.word	0x20001298
 8002280:	40004800 	.word	0x40004800

08002284 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08c      	sub	sp, #48	; 0x30
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	f107 0320 	add.w	r3, r7, #32
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a59      	ldr	r2, [pc, #356]	; (8002404 <HAL_UART_MspInit+0x180>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d13a      	bne.n	800231a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022a4:	4b58      	ldr	r3, [pc, #352]	; (8002408 <HAL_UART_MspInit+0x184>)
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	4a57      	ldr	r2, [pc, #348]	; (8002408 <HAL_UART_MspInit+0x184>)
 80022aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ae:	6193      	str	r3, [r2, #24]
 80022b0:	4b55      	ldr	r3, [pc, #340]	; (8002408 <HAL_UART_MspInit+0x184>)
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b8:	61fb      	str	r3, [r7, #28]
 80022ba:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022bc:	4b52      	ldr	r3, [pc, #328]	; (8002408 <HAL_UART_MspInit+0x184>)
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	4a51      	ldr	r2, [pc, #324]	; (8002408 <HAL_UART_MspInit+0x184>)
 80022c2:	f043 0304 	orr.w	r3, r3, #4
 80022c6:	6193      	str	r3, [r2, #24]
 80022c8:	4b4f      	ldr	r3, [pc, #316]	; (8002408 <HAL_UART_MspInit+0x184>)
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	61bb      	str	r3, [r7, #24]
 80022d2:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022de:	2303      	movs	r3, #3
 80022e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e2:	f107 0320 	add.w	r3, r7, #32
 80022e6:	4619      	mov	r1, r3
 80022e8:	4848      	ldr	r0, [pc, #288]	; (800240c <HAL_UART_MspInit+0x188>)
 80022ea:	f000 fa4f 	bl	800278c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022f4:	2300      	movs	r3, #0
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fc:	f107 0320 	add.w	r3, r7, #32
 8002300:	4619      	mov	r1, r3
 8002302:	4842      	ldr	r0, [pc, #264]	; (800240c <HAL_UART_MspInit+0x188>)
 8002304:	f000 fa42 	bl	800278c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002308:	2200      	movs	r2, #0
 800230a:	2100      	movs	r1, #0
 800230c:	2025      	movs	r0, #37	; 0x25
 800230e:	f000 fa06 	bl	800271e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002312:	2025      	movs	r0, #37	; 0x25
 8002314:	f000 fa1f 	bl	8002756 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002318:	e070      	b.n	80023fc <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART2)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a3c      	ldr	r2, [pc, #240]	; (8002410 <HAL_UART_MspInit+0x18c>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d12c      	bne.n	800237e <HAL_UART_MspInit+0xfa>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002324:	4b38      	ldr	r3, [pc, #224]	; (8002408 <HAL_UART_MspInit+0x184>)
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	4a37      	ldr	r2, [pc, #220]	; (8002408 <HAL_UART_MspInit+0x184>)
 800232a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800232e:	61d3      	str	r3, [r2, #28]
 8002330:	4b35      	ldr	r3, [pc, #212]	; (8002408 <HAL_UART_MspInit+0x184>)
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233c:	4b32      	ldr	r3, [pc, #200]	; (8002408 <HAL_UART_MspInit+0x184>)
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	4a31      	ldr	r2, [pc, #196]	; (8002408 <HAL_UART_MspInit+0x184>)
 8002342:	f043 0304 	orr.w	r3, r3, #4
 8002346:	6193      	str	r3, [r2, #24]
 8002348:	4b2f      	ldr	r3, [pc, #188]	; (8002408 <HAL_UART_MspInit+0x184>)
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002354:	230c      	movs	r3, #12
 8002356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002358:	2302      	movs	r3, #2
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235c:	2302      	movs	r3, #2
 800235e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002360:	f107 0320 	add.w	r3, r7, #32
 8002364:	4619      	mov	r1, r3
 8002366:	4829      	ldr	r0, [pc, #164]	; (800240c <HAL_UART_MspInit+0x188>)
 8002368:	f000 fa10 	bl	800278c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800236c:	2200      	movs	r2, #0
 800236e:	2100      	movs	r1, #0
 8002370:	2026      	movs	r0, #38	; 0x26
 8002372:	f000 f9d4 	bl	800271e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002376:	2026      	movs	r0, #38	; 0x26
 8002378:	f000 f9ed 	bl	8002756 <HAL_NVIC_EnableIRQ>
}
 800237c:	e03e      	b.n	80023fc <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART3)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a24      	ldr	r2, [pc, #144]	; (8002414 <HAL_UART_MspInit+0x190>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d139      	bne.n	80023fc <HAL_UART_MspInit+0x178>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002388:	4b1f      	ldr	r3, [pc, #124]	; (8002408 <HAL_UART_MspInit+0x184>)
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	4a1e      	ldr	r2, [pc, #120]	; (8002408 <HAL_UART_MspInit+0x184>)
 800238e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002392:	61d3      	str	r3, [r2, #28]
 8002394:	4b1c      	ldr	r3, [pc, #112]	; (8002408 <HAL_UART_MspInit+0x184>)
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a0:	4b19      	ldr	r3, [pc, #100]	; (8002408 <HAL_UART_MspInit+0x184>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	4a18      	ldr	r2, [pc, #96]	; (8002408 <HAL_UART_MspInit+0x184>)
 80023a6:	f043 0308 	orr.w	r3, r3, #8
 80023aa:	6193      	str	r3, [r2, #24]
 80023ac:	4b16      	ldr	r3, [pc, #88]	; (8002408 <HAL_UART_MspInit+0x184>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	f003 0308 	and.w	r3, r3, #8
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023be:	2302      	movs	r3, #2
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023c2:	2303      	movs	r3, #3
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c6:	f107 0320 	add.w	r3, r7, #32
 80023ca:	4619      	mov	r1, r3
 80023cc:	4812      	ldr	r0, [pc, #72]	; (8002418 <HAL_UART_MspInit+0x194>)
 80023ce:	f000 f9dd 	bl	800278c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80023d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023d8:	2300      	movs	r3, #0
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e0:	f107 0320 	add.w	r3, r7, #32
 80023e4:	4619      	mov	r1, r3
 80023e6:	480c      	ldr	r0, [pc, #48]	; (8002418 <HAL_UART_MspInit+0x194>)
 80023e8:	f000 f9d0 	bl	800278c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80023ec:	2200      	movs	r2, #0
 80023ee:	2100      	movs	r1, #0
 80023f0:	2027      	movs	r0, #39	; 0x27
 80023f2:	f000 f994 	bl	800271e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80023f6:	2027      	movs	r0, #39	; 0x27
 80023f8:	f000 f9ad 	bl	8002756 <HAL_NVIC_EnableIRQ>
}
 80023fc:	bf00      	nop
 80023fe:	3730      	adds	r7, #48	; 0x30
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40013800 	.word	0x40013800
 8002408:	40021000 	.word	0x40021000
 800240c:	40010800 	.word	0x40010800
 8002410:	40004400 	.word	0x40004400
 8002414:	40004800 	.word	0x40004800
 8002418:	40010c00 	.word	0x40010c00

0800241c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800241c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800241e:	e003      	b.n	8002428 <LoopCopyDataInit>

08002420 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002422:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002424:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002426:	3104      	adds	r1, #4

08002428 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002428:	480a      	ldr	r0, [pc, #40]	; (8002454 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800242a:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800242c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800242e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002430:	d3f6      	bcc.n	8002420 <CopyDataInit>
  ldr r2, =_sbss
 8002432:	4a0a      	ldr	r2, [pc, #40]	; (800245c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002434:	e002      	b.n	800243c <LoopFillZerobss>

08002436 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002436:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002438:	f842 3b04 	str.w	r3, [r2], #4

0800243c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800243c:	4b08      	ldr	r3, [pc, #32]	; (8002460 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800243e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002440:	d3f9      	bcc.n	8002436 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002442:	f7ff fe27 	bl	8002094 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002446:	f002 f955 	bl	80046f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800244a:	f7ff fc27 	bl	8001c9c <main>
  bx lr
 800244e:	4770      	bx	lr
  ldr r3, =_sidata
 8002450:	08006e00 	.word	0x08006e00
  ldr r0, =_sdata
 8002454:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002458:	20000234 	.word	0x20000234
  ldr r2, =_sbss
 800245c:	20000234 	.word	0x20000234
  ldr r3, = _ebss
 8002460:	20001360 	.word	0x20001360

08002464 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002464:	e7fe      	b.n	8002464 <ADC1_2_IRQHandler>
	...

08002468 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800246c:	4b08      	ldr	r3, [pc, #32]	; (8002490 <HAL_Init+0x28>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a07      	ldr	r2, [pc, #28]	; (8002490 <HAL_Init+0x28>)
 8002472:	f043 0310 	orr.w	r3, r3, #16
 8002476:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002478:	2003      	movs	r0, #3
 800247a:	f000 f945 	bl	8002708 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800247e:	2000      	movs	r0, #0
 8002480:	f000 f808 	bl	8002494 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002484:	f7ff fd44 	bl	8001f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40022000 	.word	0x40022000

08002494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800249c:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <HAL_InitTick+0x54>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	4b12      	ldr	r3, [pc, #72]	; (80024ec <HAL_InitTick+0x58>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	4619      	mov	r1, r3
 80024a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 f95d 	bl	8002772 <HAL_SYSTICK_Config>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e00e      	b.n	80024e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b0f      	cmp	r3, #15
 80024c6:	d80a      	bhi.n	80024de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c8:	2200      	movs	r2, #0
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	f04f 30ff 	mov.w	r0, #4294967295
 80024d0:	f000 f925 	bl	800271e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024d4:	4a06      	ldr	r2, [pc, #24]	; (80024f0 <HAL_InitTick+0x5c>)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	e000      	b.n	80024e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20000058 	.word	0x20000058
 80024ec:	20000060 	.word	0x20000060
 80024f0:	2000005c 	.word	0x2000005c

080024f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <HAL_IncTick+0x1c>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	461a      	mov	r2, r3
 80024fe:	4b05      	ldr	r3, [pc, #20]	; (8002514 <HAL_IncTick+0x20>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4413      	add	r3, r2
 8002504:	4a03      	ldr	r2, [pc, #12]	; (8002514 <HAL_IncTick+0x20>)
 8002506:	6013      	str	r3, [r2, #0]
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr
 8002510:	20000060 	.word	0x20000060
 8002514:	20001358 	.word	0x20001358

08002518 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return uwTick;
 800251c:	4b02      	ldr	r3, [pc, #8]	; (8002528 <HAL_GetTick+0x10>)
 800251e:	681b      	ldr	r3, [r3, #0]
}
 8002520:	4618      	mov	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr
 8002528:	20001358 	.word	0x20001358

0800252c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002534:	f7ff fff0 	bl	8002518 <HAL_GetTick>
 8002538:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002544:	d005      	beq.n	8002552 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <HAL_Delay+0x40>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4413      	add	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002552:	bf00      	nop
 8002554:	f7ff ffe0 	bl	8002518 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	429a      	cmp	r2, r3
 8002562:	d8f7      	bhi.n	8002554 <HAL_Delay+0x28>
  {
  }
}
 8002564:	bf00      	nop
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20000060 	.word	0x20000060

08002570 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002580:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800258c:	4013      	ands	r3, r2
 800258e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002598:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800259c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025a2:	4a04      	ldr	r2, [pc, #16]	; (80025b4 <__NVIC_SetPriorityGrouping+0x44>)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	60d3      	str	r3, [r2, #12]
}
 80025a8:	bf00      	nop
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025bc:	4b04      	ldr	r3, [pc, #16]	; (80025d0 <__NVIC_GetPriorityGrouping+0x18>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	0a1b      	lsrs	r3, r3, #8
 80025c2:	f003 0307 	and.w	r3, r3, #7
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	db0b      	blt.n	80025fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	f003 021f 	and.w	r2, r3, #31
 80025ec:	4906      	ldr	r1, [pc, #24]	; (8002608 <__NVIC_EnableIRQ+0x34>)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	095b      	lsrs	r3, r3, #5
 80025f4:	2001      	movs	r0, #1
 80025f6:	fa00 f202 	lsl.w	r2, r0, r2
 80025fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr
 8002608:	e000e100 	.word	0xe000e100

0800260c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	6039      	str	r1, [r7, #0]
 8002616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261c:	2b00      	cmp	r3, #0
 800261e:	db0a      	blt.n	8002636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	b2da      	uxtb	r2, r3
 8002624:	490c      	ldr	r1, [pc, #48]	; (8002658 <__NVIC_SetPriority+0x4c>)
 8002626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262a:	0112      	lsls	r2, r2, #4
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	440b      	add	r3, r1
 8002630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002634:	e00a      	b.n	800264c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	b2da      	uxtb	r2, r3
 800263a:	4908      	ldr	r1, [pc, #32]	; (800265c <__NVIC_SetPriority+0x50>)
 800263c:	79fb      	ldrb	r3, [r7, #7]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	3b04      	subs	r3, #4
 8002644:	0112      	lsls	r2, r2, #4
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	440b      	add	r3, r1
 800264a:	761a      	strb	r2, [r3, #24]
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	e000e100 	.word	0xe000e100
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002660:	b480      	push	{r7}
 8002662:	b089      	sub	sp, #36	; 0x24
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f1c3 0307 	rsb	r3, r3, #7
 800267a:	2b04      	cmp	r3, #4
 800267c:	bf28      	it	cs
 800267e:	2304      	movcs	r3, #4
 8002680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3304      	adds	r3, #4
 8002686:	2b06      	cmp	r3, #6
 8002688:	d902      	bls.n	8002690 <NVIC_EncodePriority+0x30>
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3b03      	subs	r3, #3
 800268e:	e000      	b.n	8002692 <NVIC_EncodePriority+0x32>
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002694:	f04f 32ff 	mov.w	r2, #4294967295
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43da      	mvns	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	401a      	ands	r2, r3
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026a8:	f04f 31ff 	mov.w	r1, #4294967295
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	fa01 f303 	lsl.w	r3, r1, r3
 80026b2:	43d9      	mvns	r1, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b8:	4313      	orrs	r3, r2
         );
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3724      	adds	r7, #36	; 0x24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr

080026c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026d4:	d301      	bcc.n	80026da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026d6:	2301      	movs	r3, #1
 80026d8:	e00f      	b.n	80026fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026da:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <SysTick_Config+0x40>)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3b01      	subs	r3, #1
 80026e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026e2:	210f      	movs	r1, #15
 80026e4:	f04f 30ff 	mov.w	r0, #4294967295
 80026e8:	f7ff ff90 	bl	800260c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026ec:	4b05      	ldr	r3, [pc, #20]	; (8002704 <SysTick_Config+0x40>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026f2:	4b04      	ldr	r3, [pc, #16]	; (8002704 <SysTick_Config+0x40>)
 80026f4:	2207      	movs	r2, #7
 80026f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	e000e010 	.word	0xe000e010

08002708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff ff2d 	bl	8002570 <__NVIC_SetPriorityGrouping>
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800271e:	b580      	push	{r7, lr}
 8002720:	b086      	sub	sp, #24
 8002722:	af00      	add	r7, sp, #0
 8002724:	4603      	mov	r3, r0
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	607a      	str	r2, [r7, #4]
 800272a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002730:	f7ff ff42 	bl	80025b8 <__NVIC_GetPriorityGrouping>
 8002734:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	68b9      	ldr	r1, [r7, #8]
 800273a:	6978      	ldr	r0, [r7, #20]
 800273c:	f7ff ff90 	bl	8002660 <NVIC_EncodePriority>
 8002740:	4602      	mov	r2, r0
 8002742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002746:	4611      	mov	r1, r2
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff ff5f 	bl	800260c <__NVIC_SetPriority>
}
 800274e:	bf00      	nop
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	4603      	mov	r3, r0
 800275e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff ff35 	bl	80025d4 <__NVIC_EnableIRQ>
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7ff ffa2 	bl	80026c4 <SysTick_Config>
 8002780:	4603      	mov	r3, r0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800278c:	b480      	push	{r7}
 800278e:	b08b      	sub	sp, #44	; 0x2c
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002796:	2300      	movs	r3, #0
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800279a:	2300      	movs	r3, #0
 800279c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800279e:	e127      	b.n	80029f0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027a0:	2201      	movs	r2, #1
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	69fa      	ldr	r2, [r7, #28]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	f040 8116 	bne.w	80029ea <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b12      	cmp	r3, #18
 80027c4:	d034      	beq.n	8002830 <HAL_GPIO_Init+0xa4>
 80027c6:	2b12      	cmp	r3, #18
 80027c8:	d80d      	bhi.n	80027e6 <HAL_GPIO_Init+0x5a>
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d02b      	beq.n	8002826 <HAL_GPIO_Init+0x9a>
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d804      	bhi.n	80027dc <HAL_GPIO_Init+0x50>
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d031      	beq.n	800283a <HAL_GPIO_Init+0xae>
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d01c      	beq.n	8002814 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027da:	e048      	b.n	800286e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d043      	beq.n	8002868 <HAL_GPIO_Init+0xdc>
 80027e0:	2b11      	cmp	r3, #17
 80027e2:	d01b      	beq.n	800281c <HAL_GPIO_Init+0x90>
          break;
 80027e4:	e043      	b.n	800286e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80027e6:	4a89      	ldr	r2, [pc, #548]	; (8002a0c <HAL_GPIO_Init+0x280>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d026      	beq.n	800283a <HAL_GPIO_Init+0xae>
 80027ec:	4a87      	ldr	r2, [pc, #540]	; (8002a0c <HAL_GPIO_Init+0x280>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d806      	bhi.n	8002800 <HAL_GPIO_Init+0x74>
 80027f2:	4a87      	ldr	r2, [pc, #540]	; (8002a10 <HAL_GPIO_Init+0x284>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d020      	beq.n	800283a <HAL_GPIO_Init+0xae>
 80027f8:	4a86      	ldr	r2, [pc, #536]	; (8002a14 <HAL_GPIO_Init+0x288>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d01d      	beq.n	800283a <HAL_GPIO_Init+0xae>
          break;
 80027fe:	e036      	b.n	800286e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002800:	4a85      	ldr	r2, [pc, #532]	; (8002a18 <HAL_GPIO_Init+0x28c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d019      	beq.n	800283a <HAL_GPIO_Init+0xae>
 8002806:	4a85      	ldr	r2, [pc, #532]	; (8002a1c <HAL_GPIO_Init+0x290>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d016      	beq.n	800283a <HAL_GPIO_Init+0xae>
 800280c:	4a84      	ldr	r2, [pc, #528]	; (8002a20 <HAL_GPIO_Init+0x294>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d013      	beq.n	800283a <HAL_GPIO_Init+0xae>
          break;
 8002812:	e02c      	b.n	800286e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	623b      	str	r3, [r7, #32]
          break;
 800281a:	e028      	b.n	800286e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	3304      	adds	r3, #4
 8002822:	623b      	str	r3, [r7, #32]
          break;
 8002824:	e023      	b.n	800286e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	3308      	adds	r3, #8
 800282c:	623b      	str	r3, [r7, #32]
          break;
 800282e:	e01e      	b.n	800286e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	330c      	adds	r3, #12
 8002836:	623b      	str	r3, [r7, #32]
          break;
 8002838:	e019      	b.n	800286e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d102      	bne.n	8002848 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002842:	2304      	movs	r3, #4
 8002844:	623b      	str	r3, [r7, #32]
          break;
 8002846:	e012      	b.n	800286e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d105      	bne.n	800285c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002850:	2308      	movs	r3, #8
 8002852:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69fa      	ldr	r2, [r7, #28]
 8002858:	611a      	str	r2, [r3, #16]
          break;
 800285a:	e008      	b.n	800286e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800285c:	2308      	movs	r3, #8
 800285e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69fa      	ldr	r2, [r7, #28]
 8002864:	615a      	str	r2, [r3, #20]
          break;
 8002866:	e002      	b.n	800286e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002868:	2300      	movs	r3, #0
 800286a:	623b      	str	r3, [r7, #32]
          break;
 800286c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	2bff      	cmp	r3, #255	; 0xff
 8002872:	d801      	bhi.n	8002878 <HAL_GPIO_Init+0xec>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	e001      	b.n	800287c <HAL_GPIO_Init+0xf0>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3304      	adds	r3, #4
 800287c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	2bff      	cmp	r3, #255	; 0xff
 8002882:	d802      	bhi.n	800288a <HAL_GPIO_Init+0xfe>
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	e002      	b.n	8002890 <HAL_GPIO_Init+0x104>
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	3b08      	subs	r3, #8
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	210f      	movs	r1, #15
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	fa01 f303 	lsl.w	r3, r1, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	401a      	ands	r2, r3
 80028a2:	6a39      	ldr	r1, [r7, #32]
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	fa01 f303 	lsl.w	r3, r1, r3
 80028aa:	431a      	orrs	r2, r3
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 8096 	beq.w	80029ea <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028be:	4b59      	ldr	r3, [pc, #356]	; (8002a24 <HAL_GPIO_Init+0x298>)
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	4a58      	ldr	r2, [pc, #352]	; (8002a24 <HAL_GPIO_Init+0x298>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	6193      	str	r3, [r2, #24]
 80028ca:	4b56      	ldr	r3, [pc, #344]	; (8002a24 <HAL_GPIO_Init+0x298>)
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	60bb      	str	r3, [r7, #8]
 80028d4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028d6:	4a54      	ldr	r2, [pc, #336]	; (8002a28 <HAL_GPIO_Init+0x29c>)
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	089b      	lsrs	r3, r3, #2
 80028dc:	3302      	adds	r3, #2
 80028de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	220f      	movs	r2, #15
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43db      	mvns	r3, r3
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	4013      	ands	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a4b      	ldr	r2, [pc, #300]	; (8002a2c <HAL_GPIO_Init+0x2a0>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d013      	beq.n	800292a <HAL_GPIO_Init+0x19e>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a4a      	ldr	r2, [pc, #296]	; (8002a30 <HAL_GPIO_Init+0x2a4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d00d      	beq.n	8002926 <HAL_GPIO_Init+0x19a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a49      	ldr	r2, [pc, #292]	; (8002a34 <HAL_GPIO_Init+0x2a8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d007      	beq.n	8002922 <HAL_GPIO_Init+0x196>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a48      	ldr	r2, [pc, #288]	; (8002a38 <HAL_GPIO_Init+0x2ac>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d101      	bne.n	800291e <HAL_GPIO_Init+0x192>
 800291a:	2303      	movs	r3, #3
 800291c:	e006      	b.n	800292c <HAL_GPIO_Init+0x1a0>
 800291e:	2304      	movs	r3, #4
 8002920:	e004      	b.n	800292c <HAL_GPIO_Init+0x1a0>
 8002922:	2302      	movs	r3, #2
 8002924:	e002      	b.n	800292c <HAL_GPIO_Init+0x1a0>
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <HAL_GPIO_Init+0x1a0>
 800292a:	2300      	movs	r3, #0
 800292c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800292e:	f002 0203 	and.w	r2, r2, #3
 8002932:	0092      	lsls	r2, r2, #2
 8002934:	4093      	lsls	r3, r2
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4313      	orrs	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800293c:	493a      	ldr	r1, [pc, #232]	; (8002a28 <HAL_GPIO_Init+0x29c>)
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	089b      	lsrs	r3, r3, #2
 8002942:	3302      	adds	r3, #2
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d006      	beq.n	8002964 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002956:	4b39      	ldr	r3, [pc, #228]	; (8002a3c <HAL_GPIO_Init+0x2b0>)
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	4938      	ldr	r1, [pc, #224]	; (8002a3c <HAL_GPIO_Init+0x2b0>)
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	600b      	str	r3, [r1, #0]
 8002962:	e006      	b.n	8002972 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002964:	4b35      	ldr	r3, [pc, #212]	; (8002a3c <HAL_GPIO_Init+0x2b0>)
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	43db      	mvns	r3, r3
 800296c:	4933      	ldr	r1, [pc, #204]	; (8002a3c <HAL_GPIO_Init+0x2b0>)
 800296e:	4013      	ands	r3, r2
 8002970:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d006      	beq.n	800298c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800297e:	4b2f      	ldr	r3, [pc, #188]	; (8002a3c <HAL_GPIO_Init+0x2b0>)
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	492e      	ldr	r1, [pc, #184]	; (8002a3c <HAL_GPIO_Init+0x2b0>)
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	4313      	orrs	r3, r2
 8002988:	604b      	str	r3, [r1, #4]
 800298a:	e006      	b.n	800299a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800298c:	4b2b      	ldr	r3, [pc, #172]	; (8002a3c <HAL_GPIO_Init+0x2b0>)
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	43db      	mvns	r3, r3
 8002994:	4929      	ldr	r1, [pc, #164]	; (8002a3c <HAL_GPIO_Init+0x2b0>)
 8002996:	4013      	ands	r3, r2
 8002998:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d006      	beq.n	80029b4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029a6:	4b25      	ldr	r3, [pc, #148]	; (8002a3c <HAL_GPIO_Init+0x2b0>)
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	4924      	ldr	r1, [pc, #144]	; (8002a3c <HAL_GPIO_Init+0x2b0>)
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	608b      	str	r3, [r1, #8]
 80029b2:	e006      	b.n	80029c2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029b4:	4b21      	ldr	r3, [pc, #132]	; (8002a3c <HAL_GPIO_Init+0x2b0>)
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	43db      	mvns	r3, r3
 80029bc:	491f      	ldr	r1, [pc, #124]	; (8002a3c <HAL_GPIO_Init+0x2b0>)
 80029be:	4013      	ands	r3, r2
 80029c0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d006      	beq.n	80029dc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029ce:	4b1b      	ldr	r3, [pc, #108]	; (8002a3c <HAL_GPIO_Init+0x2b0>)
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	491a      	ldr	r1, [pc, #104]	; (8002a3c <HAL_GPIO_Init+0x2b0>)
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60cb      	str	r3, [r1, #12]
 80029da:	e006      	b.n	80029ea <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029dc:	4b17      	ldr	r3, [pc, #92]	; (8002a3c <HAL_GPIO_Init+0x2b0>)
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	4915      	ldr	r1, [pc, #84]	; (8002a3c <HAL_GPIO_Init+0x2b0>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	3301      	adds	r3, #1
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	fa22 f303 	lsr.w	r3, r2, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f47f aed0 	bne.w	80027a0 <HAL_GPIO_Init+0x14>
  }
}
 8002a00:	bf00      	nop
 8002a02:	372c      	adds	r7, #44	; 0x2c
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	10210000 	.word	0x10210000
 8002a10:	10110000 	.word	0x10110000
 8002a14:	10120000 	.word	0x10120000
 8002a18:	10310000 	.word	0x10310000
 8002a1c:	10320000 	.word	0x10320000
 8002a20:	10220000 	.word	0x10220000
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40010000 	.word	0x40010000
 8002a2c:	40010800 	.word	0x40010800
 8002a30:	40010c00 	.word	0x40010c00
 8002a34:	40011000 	.word	0x40011000
 8002a38:	40011400 	.word	0x40011400
 8002a3c:	40010400 	.word	0x40010400

08002a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	807b      	strh	r3, [r7, #2]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a50:	787b      	ldrb	r3, [r7, #1]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a56:	887a      	ldrh	r2, [r7, #2]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a5c:	e003      	b.n	8002a66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a5e:	887b      	ldrh	r3, [r7, #2]
 8002a60:	041a      	lsls	r2, r3, #16
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	611a      	str	r2, [r3, #16]
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a82:	887a      	ldrh	r2, [r7, #2]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4013      	ands	r3, r2
 8002a88:	041a      	lsls	r2, r3, #16
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	43d9      	mvns	r1, r3
 8002a8e:	887b      	ldrh	r3, [r7, #2]
 8002a90:	400b      	ands	r3, r1
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	611a      	str	r2, [r3, #16]
}
 8002a98:	bf00      	nop
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr
	...

08002aa4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002aae:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ab0:	695a      	ldr	r2, [r3, #20]
 8002ab2:	88fb      	ldrh	r3, [r7, #6]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d006      	beq.n	8002ac8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002aba:	4a05      	ldr	r2, [pc, #20]	; (8002ad0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002abc:	88fb      	ldrh	r3, [r7, #6]
 8002abe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ac0:	88fb      	ldrh	r3, [r7, #6]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 f806 	bl	8002ad4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ac8:	bf00      	nop
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40010400 	.word	0x40010400

08002ad4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e11f      	b.n	8002d3a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d106      	bne.n	8002b14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7fe ff36 	bl	8001980 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2224      	movs	r2, #36	; 0x24
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0201 	bic.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b4c:	f000 ffe0 	bl	8003b10 <HAL_RCC_GetPCLK1Freq>
 8002b50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	4a7b      	ldr	r2, [pc, #492]	; (8002d44 <HAL_I2C_Init+0x25c>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d807      	bhi.n	8002b6c <HAL_I2C_Init+0x84>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4a7a      	ldr	r2, [pc, #488]	; (8002d48 <HAL_I2C_Init+0x260>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	bf94      	ite	ls
 8002b64:	2301      	movls	r3, #1
 8002b66:	2300      	movhi	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	e006      	b.n	8002b7a <HAL_I2C_Init+0x92>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4a77      	ldr	r2, [pc, #476]	; (8002d4c <HAL_I2C_Init+0x264>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	bf94      	ite	ls
 8002b74:	2301      	movls	r3, #1
 8002b76:	2300      	movhi	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e0db      	b.n	8002d3a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4a72      	ldr	r2, [pc, #456]	; (8002d50 <HAL_I2C_Init+0x268>)
 8002b86:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8a:	0c9b      	lsrs	r3, r3, #18
 8002b8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	4a64      	ldr	r2, [pc, #400]	; (8002d44 <HAL_I2C_Init+0x25c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d802      	bhi.n	8002bbc <HAL_I2C_Init+0xd4>
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	e009      	b.n	8002bd0 <HAL_I2C_Init+0xe8>
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bc2:	fb02 f303 	mul.w	r3, r2, r3
 8002bc6:	4a63      	ldr	r2, [pc, #396]	; (8002d54 <HAL_I2C_Init+0x26c>)
 8002bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bcc:	099b      	lsrs	r3, r3, #6
 8002bce:	3301      	adds	r3, #1
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6812      	ldr	r2, [r2, #0]
 8002bd4:	430b      	orrs	r3, r1
 8002bd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002be2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	4956      	ldr	r1, [pc, #344]	; (8002d44 <HAL_I2C_Init+0x25c>)
 8002bec:	428b      	cmp	r3, r1
 8002bee:	d80d      	bhi.n	8002c0c <HAL_I2C_Init+0x124>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	1e59      	subs	r1, r3, #1
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bfe:	3301      	adds	r3, #1
 8002c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	bf38      	it	cc
 8002c08:	2304      	movcc	r3, #4
 8002c0a:	e04f      	b.n	8002cac <HAL_I2C_Init+0x1c4>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d111      	bne.n	8002c38 <HAL_I2C_Init+0x150>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	1e58      	subs	r0, r3, #1
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6859      	ldr	r1, [r3, #4]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	440b      	add	r3, r1
 8002c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c26:	3301      	adds	r3, #1
 8002c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	bf0c      	ite	eq
 8002c30:	2301      	moveq	r3, #1
 8002c32:	2300      	movne	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	e012      	b.n	8002c5e <HAL_I2C_Init+0x176>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	1e58      	subs	r0, r3, #1
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6859      	ldr	r1, [r3, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	0099      	lsls	r1, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c4e:	3301      	adds	r3, #1
 8002c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	bf0c      	ite	eq
 8002c58:	2301      	moveq	r3, #1
 8002c5a:	2300      	movne	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_I2C_Init+0x17e>
 8002c62:	2301      	movs	r3, #1
 8002c64:	e022      	b.n	8002cac <HAL_I2C_Init+0x1c4>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10e      	bne.n	8002c8c <HAL_I2C_Init+0x1a4>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	1e58      	subs	r0, r3, #1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6859      	ldr	r1, [r3, #4]
 8002c76:	460b      	mov	r3, r1
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	440b      	add	r3, r1
 8002c7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c80:	3301      	adds	r3, #1
 8002c82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c8a:	e00f      	b.n	8002cac <HAL_I2C_Init+0x1c4>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	1e58      	subs	r0, r3, #1
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6859      	ldr	r1, [r3, #4]
 8002c94:	460b      	mov	r3, r1
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	0099      	lsls	r1, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	6809      	ldr	r1, [r1, #0]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69da      	ldr	r2, [r3, #28]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002cda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6911      	ldr	r1, [r2, #16]
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	68d2      	ldr	r2, [r2, #12]
 8002ce6:	4311      	orrs	r1, r2
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	430b      	orrs	r3, r1
 8002cee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695a      	ldr	r2, [r3, #20]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 0201 	orr.w	r2, r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2220      	movs	r2, #32
 8002d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	000186a0 	.word	0x000186a0
 8002d48:	001e847f 	.word	0x001e847f
 8002d4c:	003d08ff 	.word	0x003d08ff
 8002d50:	431bde83 	.word	0x431bde83
 8002d54:	10624dd3 	.word	0x10624dd3

08002d58 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af02      	add	r7, sp, #8
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	607a      	str	r2, [r7, #4]
 8002d62:	461a      	mov	r2, r3
 8002d64:	460b      	mov	r3, r1
 8002d66:	817b      	strh	r3, [r7, #10]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d6c:	f7ff fbd4 	bl	8002518 <HAL_GetTick>
 8002d70:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b20      	cmp	r3, #32
 8002d7c:	f040 80e0 	bne.w	8002f40 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	2319      	movs	r3, #25
 8002d86:	2201      	movs	r2, #1
 8002d88:	4970      	ldr	r1, [pc, #448]	; (8002f4c <HAL_I2C_Master_Transmit+0x1f4>)
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 f964 	bl	8003058 <I2C_WaitOnFlagUntilTimeout>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d96:	2302      	movs	r3, #2
 8002d98:	e0d3      	b.n	8002f42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_I2C_Master_Transmit+0x50>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e0cc      	b.n	8002f42 <HAL_I2C_Master_Transmit+0x1ea>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d007      	beq.n	8002dce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f042 0201 	orr.w	r2, r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ddc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2221      	movs	r2, #33	; 0x21
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2210      	movs	r2, #16
 8002dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	893a      	ldrh	r2, [r7, #8]
 8002dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4a50      	ldr	r2, [pc, #320]	; (8002f50 <HAL_I2C_Master_Transmit+0x1f8>)
 8002e0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e10:	8979      	ldrh	r1, [r7, #10]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	6a3a      	ldr	r2, [r7, #32]
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 f89c 	bl	8002f54 <I2C_MasterRequestWrite>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e08d      	b.n	8002f42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e26:	2300      	movs	r3, #0
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e3c:	e066      	b.n	8002f0c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	6a39      	ldr	r1, [r7, #32]
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 f9de 	bl	8003204 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00d      	beq.n	8002e6a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d107      	bne.n	8002e66 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e06b      	b.n	8002f42 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	781a      	ldrb	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	3b01      	subs	r3, #1
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e92:	3b01      	subs	r3, #1
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	d11b      	bne.n	8002ee0 <HAL_I2C_Master_Transmit+0x188>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d017      	beq.n	8002ee0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	781a      	ldrb	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	1c5a      	adds	r2, r3, #1
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	6a39      	ldr	r1, [r7, #32]
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 f9ce 	bl	8003286 <I2C_WaitOnBTFFlagUntilTimeout>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00d      	beq.n	8002f0c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d107      	bne.n	8002f08 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f06:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e01a      	b.n	8002f42 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d194      	bne.n	8002e3e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	e000      	b.n	8002f42 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f40:	2302      	movs	r3, #2
  }
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	00100002 	.word	0x00100002
 8002f50:	ffff0000 	.word	0xffff0000

08002f54 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af02      	add	r7, sp, #8
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	607a      	str	r2, [r7, #4]
 8002f5e:	603b      	str	r3, [r7, #0]
 8002f60:	460b      	mov	r3, r1
 8002f62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d006      	beq.n	8002f7e <I2C_MasterRequestWrite+0x2a>
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d003      	beq.n	8002f7e <I2C_MasterRequestWrite+0x2a>
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f7c:	d108      	bne.n	8002f90 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	e00b      	b.n	8002fa8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f94:	2b12      	cmp	r3, #18
 8002f96:	d107      	bne.n	8002fa8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fa6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f84f 	bl	8003058 <I2C_WaitOnFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00d      	beq.n	8002fdc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fce:	d103      	bne.n	8002fd8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e035      	b.n	8003048 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fe4:	d108      	bne.n	8002ff8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fe6:	897b      	ldrh	r3, [r7, #10]
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	461a      	mov	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ff4:	611a      	str	r2, [r3, #16]
 8002ff6:	e01b      	b.n	8003030 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ff8:	897b      	ldrh	r3, [r7, #10]
 8002ffa:	11db      	asrs	r3, r3, #7
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	f003 0306 	and.w	r3, r3, #6
 8003002:	b2db      	uxtb	r3, r3
 8003004:	f063 030f 	orn	r3, r3, #15
 8003008:	b2da      	uxtb	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	490e      	ldr	r1, [pc, #56]	; (8003050 <I2C_MasterRequestWrite+0xfc>)
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f875 	bl	8003106 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e010      	b.n	8003048 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003026:	897b      	ldrh	r3, [r7, #10]
 8003028:	b2da      	uxtb	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	4907      	ldr	r1, [pc, #28]	; (8003054 <I2C_MasterRequestWrite+0x100>)
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 f865 	bl	8003106 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3718      	adds	r7, #24
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	00010008 	.word	0x00010008
 8003054:	00010002 	.word	0x00010002

08003058 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	603b      	str	r3, [r7, #0]
 8003064:	4613      	mov	r3, r2
 8003066:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003068:	e025      	b.n	80030b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003070:	d021      	beq.n	80030b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003072:	f7ff fa51 	bl	8002518 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	429a      	cmp	r2, r3
 8003080:	d302      	bcc.n	8003088 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d116      	bne.n	80030b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2220      	movs	r2, #32
 8003092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f043 0220 	orr.w	r2, r3, #32
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e023      	b.n	80030fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	0c1b      	lsrs	r3, r3, #16
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d10d      	bne.n	80030dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	43da      	mvns	r2, r3
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	4013      	ands	r3, r2
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	bf0c      	ite	eq
 80030d2:	2301      	moveq	r3, #1
 80030d4:	2300      	movne	r3, #0
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	461a      	mov	r2, r3
 80030da:	e00c      	b.n	80030f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	43da      	mvns	r2, r3
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	4013      	ands	r3, r2
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	bf0c      	ite	eq
 80030ee:	2301      	moveq	r3, #1
 80030f0:	2300      	movne	r3, #0
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	461a      	mov	r2, r3
 80030f6:	79fb      	ldrb	r3, [r7, #7]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d0b6      	beq.n	800306a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b084      	sub	sp, #16
 800310a:	af00      	add	r7, sp, #0
 800310c:	60f8      	str	r0, [r7, #12]
 800310e:	60b9      	str	r1, [r7, #8]
 8003110:	607a      	str	r2, [r7, #4]
 8003112:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003114:	e051      	b.n	80031ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003124:	d123      	bne.n	800316e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003134:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800313e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	f043 0204 	orr.w	r2, r3, #4
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e046      	b.n	80031fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003174:	d021      	beq.n	80031ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003176:	f7ff f9cf 	bl	8002518 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	429a      	cmp	r2, r3
 8003184:	d302      	bcc.n	800318c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d116      	bne.n	80031ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2220      	movs	r2, #32
 8003196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f043 0220 	orr.w	r2, r3, #32
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e020      	b.n	80031fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	0c1b      	lsrs	r3, r3, #16
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d10c      	bne.n	80031de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	43da      	mvns	r2, r3
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	4013      	ands	r3, r2
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	bf14      	ite	ne
 80031d6:	2301      	movne	r3, #1
 80031d8:	2300      	moveq	r3, #0
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	e00b      	b.n	80031f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	43da      	mvns	r2, r3
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	4013      	ands	r3, r2
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	bf14      	ite	ne
 80031f0:	2301      	movne	r3, #1
 80031f2:	2300      	moveq	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d18d      	bne.n	8003116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003210:	e02d      	b.n	800326e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 f878 	bl	8003308 <I2C_IsAcknowledgeFailed>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e02d      	b.n	800327e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003228:	d021      	beq.n	800326e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800322a:	f7ff f975 	bl	8002518 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	429a      	cmp	r2, r3
 8003238:	d302      	bcc.n	8003240 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d116      	bne.n	800326e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	f043 0220 	orr.w	r2, r3, #32
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e007      	b.n	800327e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003278:	2b80      	cmp	r3, #128	; 0x80
 800327a:	d1ca      	bne.n	8003212 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b084      	sub	sp, #16
 800328a:	af00      	add	r7, sp, #0
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003292:	e02d      	b.n	80032f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 f837 	bl	8003308 <I2C_IsAcknowledgeFailed>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e02d      	b.n	8003300 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032aa:	d021      	beq.n	80032f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ac:	f7ff f934 	bl	8002518 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d302      	bcc.n	80032c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d116      	bne.n	80032f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	f043 0220 	orr.w	r2, r3, #32
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e007      	b.n	8003300 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	f003 0304 	and.w	r3, r3, #4
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	d1ca      	bne.n	8003294 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800331a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800331e:	d11b      	bne.n	8003358 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003328:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	f043 0204 	orr.w	r2, r3, #4
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e000      	b.n	800335a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr

08003364 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e26c      	b.n	8003850 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 8087 	beq.w	8003492 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003384:	4b92      	ldr	r3, [pc, #584]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 030c 	and.w	r3, r3, #12
 800338c:	2b04      	cmp	r3, #4
 800338e:	d00c      	beq.n	80033aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003390:	4b8f      	ldr	r3, [pc, #572]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f003 030c 	and.w	r3, r3, #12
 8003398:	2b08      	cmp	r3, #8
 800339a:	d112      	bne.n	80033c2 <HAL_RCC_OscConfig+0x5e>
 800339c:	4b8c      	ldr	r3, [pc, #560]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a8:	d10b      	bne.n	80033c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033aa:	4b89      	ldr	r3, [pc, #548]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d06c      	beq.n	8003490 <HAL_RCC_OscConfig+0x12c>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d168      	bne.n	8003490 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e246      	b.n	8003850 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ca:	d106      	bne.n	80033da <HAL_RCC_OscConfig+0x76>
 80033cc:	4b80      	ldr	r3, [pc, #512]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a7f      	ldr	r2, [pc, #508]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80033d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	e02e      	b.n	8003438 <HAL_RCC_OscConfig+0xd4>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10c      	bne.n	80033fc <HAL_RCC_OscConfig+0x98>
 80033e2:	4b7b      	ldr	r3, [pc, #492]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a7a      	ldr	r2, [pc, #488]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80033e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	4b78      	ldr	r3, [pc, #480]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a77      	ldr	r2, [pc, #476]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80033f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	e01d      	b.n	8003438 <HAL_RCC_OscConfig+0xd4>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003404:	d10c      	bne.n	8003420 <HAL_RCC_OscConfig+0xbc>
 8003406:	4b72      	ldr	r3, [pc, #456]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a71      	ldr	r2, [pc, #452]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 800340c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	4b6f      	ldr	r3, [pc, #444]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a6e      	ldr	r2, [pc, #440]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 8003418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	e00b      	b.n	8003438 <HAL_RCC_OscConfig+0xd4>
 8003420:	4b6b      	ldr	r3, [pc, #428]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a6a      	ldr	r2, [pc, #424]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 8003426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	4b68      	ldr	r3, [pc, #416]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a67      	ldr	r2, [pc, #412]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 8003432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003436:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d013      	beq.n	8003468 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003440:	f7ff f86a 	bl	8002518 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003448:	f7ff f866 	bl	8002518 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b64      	cmp	r3, #100	; 0x64
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e1fa      	b.n	8003850 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345a:	4b5d      	ldr	r3, [pc, #372]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f0      	beq.n	8003448 <HAL_RCC_OscConfig+0xe4>
 8003466:	e014      	b.n	8003492 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003468:	f7ff f856 	bl	8002518 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003470:	f7ff f852 	bl	8002518 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b64      	cmp	r3, #100	; 0x64
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e1e6      	b.n	8003850 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003482:	4b53      	ldr	r3, [pc, #332]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f0      	bne.n	8003470 <HAL_RCC_OscConfig+0x10c>
 800348e:	e000      	b.n	8003492 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d063      	beq.n	8003566 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800349e:	4b4c      	ldr	r3, [pc, #304]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f003 030c 	and.w	r3, r3, #12
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00b      	beq.n	80034c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034aa:	4b49      	ldr	r3, [pc, #292]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f003 030c 	and.w	r3, r3, #12
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d11c      	bne.n	80034f0 <HAL_RCC_OscConfig+0x18c>
 80034b6:	4b46      	ldr	r3, [pc, #280]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d116      	bne.n	80034f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034c2:	4b43      	ldr	r3, [pc, #268]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d005      	beq.n	80034da <HAL_RCC_OscConfig+0x176>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d001      	beq.n	80034da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e1ba      	b.n	8003850 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034da:	4b3d      	ldr	r3, [pc, #244]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	4939      	ldr	r1, [pc, #228]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ee:	e03a      	b.n	8003566 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d020      	beq.n	800353a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034f8:	4b36      	ldr	r3, [pc, #216]	; (80035d4 <HAL_RCC_OscConfig+0x270>)
 80034fa:	2201      	movs	r2, #1
 80034fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fe:	f7ff f80b 	bl	8002518 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003506:	f7ff f807 	bl	8002518 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e19b      	b.n	8003850 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003518:	4b2d      	ldr	r3, [pc, #180]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0f0      	beq.n	8003506 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003524:	4b2a      	ldr	r3, [pc, #168]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	4927      	ldr	r1, [pc, #156]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 8003534:	4313      	orrs	r3, r2
 8003536:	600b      	str	r3, [r1, #0]
 8003538:	e015      	b.n	8003566 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800353a:	4b26      	ldr	r3, [pc, #152]	; (80035d4 <HAL_RCC_OscConfig+0x270>)
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003540:	f7fe ffea 	bl	8002518 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003548:	f7fe ffe6 	bl	8002518 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e17a      	b.n	8003850 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800355a:	4b1d      	ldr	r3, [pc, #116]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f0      	bne.n	8003548 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0308 	and.w	r3, r3, #8
 800356e:	2b00      	cmp	r3, #0
 8003570:	d03a      	beq.n	80035e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d019      	beq.n	80035ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800357a:	4b17      	ldr	r3, [pc, #92]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 800357c:	2201      	movs	r2, #1
 800357e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003580:	f7fe ffca 	bl	8002518 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003588:	f7fe ffc6 	bl	8002518 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e15a      	b.n	8003850 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800359a:	4b0d      	ldr	r3, [pc, #52]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0f0      	beq.n	8003588 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035a6:	2001      	movs	r0, #1
 80035a8:	f000 fada 	bl	8003b60 <RCC_Delay>
 80035ac:	e01c      	b.n	80035e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ae:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b4:	f7fe ffb0 	bl	8002518 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ba:	e00f      	b.n	80035dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035bc:	f7fe ffac 	bl	8002518 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d908      	bls.n	80035dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e140      	b.n	8003850 <HAL_RCC_OscConfig+0x4ec>
 80035ce:	bf00      	nop
 80035d0:	40021000 	.word	0x40021000
 80035d4:	42420000 	.word	0x42420000
 80035d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035dc:	4b9e      	ldr	r3, [pc, #632]	; (8003858 <HAL_RCC_OscConfig+0x4f4>)
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1e9      	bne.n	80035bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 80a6 	beq.w	8003742 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035f6:	2300      	movs	r3, #0
 80035f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035fa:	4b97      	ldr	r3, [pc, #604]	; (8003858 <HAL_RCC_OscConfig+0x4f4>)
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10d      	bne.n	8003622 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003606:	4b94      	ldr	r3, [pc, #592]	; (8003858 <HAL_RCC_OscConfig+0x4f4>)
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	4a93      	ldr	r2, [pc, #588]	; (8003858 <HAL_RCC_OscConfig+0x4f4>)
 800360c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003610:	61d3      	str	r3, [r2, #28]
 8003612:	4b91      	ldr	r3, [pc, #580]	; (8003858 <HAL_RCC_OscConfig+0x4f4>)
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361a:	60bb      	str	r3, [r7, #8]
 800361c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800361e:	2301      	movs	r3, #1
 8003620:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003622:	4b8e      	ldr	r3, [pc, #568]	; (800385c <HAL_RCC_OscConfig+0x4f8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362a:	2b00      	cmp	r3, #0
 800362c:	d118      	bne.n	8003660 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800362e:	4b8b      	ldr	r3, [pc, #556]	; (800385c <HAL_RCC_OscConfig+0x4f8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a8a      	ldr	r2, [pc, #552]	; (800385c <HAL_RCC_OscConfig+0x4f8>)
 8003634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800363a:	f7fe ff6d 	bl	8002518 <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003642:	f7fe ff69 	bl	8002518 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b64      	cmp	r3, #100	; 0x64
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e0fd      	b.n	8003850 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003654:	4b81      	ldr	r3, [pc, #516]	; (800385c <HAL_RCC_OscConfig+0x4f8>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0f0      	beq.n	8003642 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d106      	bne.n	8003676 <HAL_RCC_OscConfig+0x312>
 8003668:	4b7b      	ldr	r3, [pc, #492]	; (8003858 <HAL_RCC_OscConfig+0x4f4>)
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	4a7a      	ldr	r2, [pc, #488]	; (8003858 <HAL_RCC_OscConfig+0x4f4>)
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	6213      	str	r3, [r2, #32]
 8003674:	e02d      	b.n	80036d2 <HAL_RCC_OscConfig+0x36e>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10c      	bne.n	8003698 <HAL_RCC_OscConfig+0x334>
 800367e:	4b76      	ldr	r3, [pc, #472]	; (8003858 <HAL_RCC_OscConfig+0x4f4>)
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	4a75      	ldr	r2, [pc, #468]	; (8003858 <HAL_RCC_OscConfig+0x4f4>)
 8003684:	f023 0301 	bic.w	r3, r3, #1
 8003688:	6213      	str	r3, [r2, #32]
 800368a:	4b73      	ldr	r3, [pc, #460]	; (8003858 <HAL_RCC_OscConfig+0x4f4>)
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	4a72      	ldr	r2, [pc, #456]	; (8003858 <HAL_RCC_OscConfig+0x4f4>)
 8003690:	f023 0304 	bic.w	r3, r3, #4
 8003694:	6213      	str	r3, [r2, #32]
 8003696:	e01c      	b.n	80036d2 <HAL_RCC_OscConfig+0x36e>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	2b05      	cmp	r3, #5
 800369e:	d10c      	bne.n	80036ba <HAL_RCC_OscConfig+0x356>
 80036a0:	4b6d      	ldr	r3, [pc, #436]	; (8003858 <HAL_RCC_OscConfig+0x4f4>)
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	4a6c      	ldr	r2, [pc, #432]	; (8003858 <HAL_RCC_OscConfig+0x4f4>)
 80036a6:	f043 0304 	orr.w	r3, r3, #4
 80036aa:	6213      	str	r3, [r2, #32]
 80036ac:	4b6a      	ldr	r3, [pc, #424]	; (8003858 <HAL_RCC_OscConfig+0x4f4>)
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	4a69      	ldr	r2, [pc, #420]	; (8003858 <HAL_RCC_OscConfig+0x4f4>)
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	6213      	str	r3, [r2, #32]
 80036b8:	e00b      	b.n	80036d2 <HAL_RCC_OscConfig+0x36e>
 80036ba:	4b67      	ldr	r3, [pc, #412]	; (8003858 <HAL_RCC_OscConfig+0x4f4>)
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	4a66      	ldr	r2, [pc, #408]	; (8003858 <HAL_RCC_OscConfig+0x4f4>)
 80036c0:	f023 0301 	bic.w	r3, r3, #1
 80036c4:	6213      	str	r3, [r2, #32]
 80036c6:	4b64      	ldr	r3, [pc, #400]	; (8003858 <HAL_RCC_OscConfig+0x4f4>)
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	4a63      	ldr	r2, [pc, #396]	; (8003858 <HAL_RCC_OscConfig+0x4f4>)
 80036cc:	f023 0304 	bic.w	r3, r3, #4
 80036d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d015      	beq.n	8003706 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036da:	f7fe ff1d 	bl	8002518 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e0:	e00a      	b.n	80036f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e2:	f7fe ff19 	bl	8002518 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e0ab      	b.n	8003850 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f8:	4b57      	ldr	r3, [pc, #348]	; (8003858 <HAL_RCC_OscConfig+0x4f4>)
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0ee      	beq.n	80036e2 <HAL_RCC_OscConfig+0x37e>
 8003704:	e014      	b.n	8003730 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003706:	f7fe ff07 	bl	8002518 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800370c:	e00a      	b.n	8003724 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800370e:	f7fe ff03 	bl	8002518 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	f241 3288 	movw	r2, #5000	; 0x1388
 800371c:	4293      	cmp	r3, r2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e095      	b.n	8003850 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003724:	4b4c      	ldr	r3, [pc, #304]	; (8003858 <HAL_RCC_OscConfig+0x4f4>)
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1ee      	bne.n	800370e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003730:	7dfb      	ldrb	r3, [r7, #23]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d105      	bne.n	8003742 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003736:	4b48      	ldr	r3, [pc, #288]	; (8003858 <HAL_RCC_OscConfig+0x4f4>)
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	4a47      	ldr	r2, [pc, #284]	; (8003858 <HAL_RCC_OscConfig+0x4f4>)
 800373c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003740:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 8081 	beq.w	800384e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800374c:	4b42      	ldr	r3, [pc, #264]	; (8003858 <HAL_RCC_OscConfig+0x4f4>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f003 030c 	and.w	r3, r3, #12
 8003754:	2b08      	cmp	r3, #8
 8003756:	d061      	beq.n	800381c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d146      	bne.n	80037ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003760:	4b3f      	ldr	r3, [pc, #252]	; (8003860 <HAL_RCC_OscConfig+0x4fc>)
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003766:	f7fe fed7 	bl	8002518 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800376e:	f7fe fed3 	bl	8002518 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e067      	b.n	8003850 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003780:	4b35      	ldr	r3, [pc, #212]	; (8003858 <HAL_RCC_OscConfig+0x4f4>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1f0      	bne.n	800376e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003794:	d108      	bne.n	80037a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003796:	4b30      	ldr	r3, [pc, #192]	; (8003858 <HAL_RCC_OscConfig+0x4f4>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	492d      	ldr	r1, [pc, #180]	; (8003858 <HAL_RCC_OscConfig+0x4f4>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037a8:	4b2b      	ldr	r3, [pc, #172]	; (8003858 <HAL_RCC_OscConfig+0x4f4>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a19      	ldr	r1, [r3, #32]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	430b      	orrs	r3, r1
 80037ba:	4927      	ldr	r1, [pc, #156]	; (8003858 <HAL_RCC_OscConfig+0x4f4>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037c0:	4b27      	ldr	r3, [pc, #156]	; (8003860 <HAL_RCC_OscConfig+0x4fc>)
 80037c2:	2201      	movs	r2, #1
 80037c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c6:	f7fe fea7 	bl	8002518 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ce:	f7fe fea3 	bl	8002518 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e037      	b.n	8003850 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037e0:	4b1d      	ldr	r3, [pc, #116]	; (8003858 <HAL_RCC_OscConfig+0x4f4>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0f0      	beq.n	80037ce <HAL_RCC_OscConfig+0x46a>
 80037ec:	e02f      	b.n	800384e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ee:	4b1c      	ldr	r3, [pc, #112]	; (8003860 <HAL_RCC_OscConfig+0x4fc>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f4:	f7fe fe90 	bl	8002518 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037fc:	f7fe fe8c 	bl	8002518 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e020      	b.n	8003850 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800380e:	4b12      	ldr	r3, [pc, #72]	; (8003858 <HAL_RCC_OscConfig+0x4f4>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1f0      	bne.n	80037fc <HAL_RCC_OscConfig+0x498>
 800381a:	e018      	b.n	800384e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d101      	bne.n	8003828 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e013      	b.n	8003850 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003828:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <HAL_RCC_OscConfig+0x4f4>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	429a      	cmp	r2, r3
 800383a:	d106      	bne.n	800384a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003846:	429a      	cmp	r2, r3
 8003848:	d001      	beq.n	800384e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e000      	b.n	8003850 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3718      	adds	r7, #24
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40021000 	.word	0x40021000
 800385c:	40007000 	.word	0x40007000
 8003860:	42420060 	.word	0x42420060

08003864 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e0d0      	b.n	8003a1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003878:	4b6a      	ldr	r3, [pc, #424]	; (8003a24 <HAL_RCC_ClockConfig+0x1c0>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d910      	bls.n	80038a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003886:	4b67      	ldr	r3, [pc, #412]	; (8003a24 <HAL_RCC_ClockConfig+0x1c0>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f023 0207 	bic.w	r2, r3, #7
 800388e:	4965      	ldr	r1, [pc, #404]	; (8003a24 <HAL_RCC_ClockConfig+0x1c0>)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	4313      	orrs	r3, r2
 8003894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003896:	4b63      	ldr	r3, [pc, #396]	; (8003a24 <HAL_RCC_ClockConfig+0x1c0>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0307 	and.w	r3, r3, #7
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d001      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e0b8      	b.n	8003a1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d020      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038c0:	4b59      	ldr	r3, [pc, #356]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	4a58      	ldr	r2, [pc, #352]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 80038c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0308 	and.w	r3, r3, #8
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d005      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038d8:	4b53      	ldr	r3, [pc, #332]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	4a52      	ldr	r2, [pc, #328]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 80038de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e4:	4b50      	ldr	r3, [pc, #320]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	494d      	ldr	r1, [pc, #308]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d040      	beq.n	8003984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d107      	bne.n	800391a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390a:	4b47      	ldr	r3, [pc, #284]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d115      	bne.n	8003942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e07f      	b.n	8003a1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b02      	cmp	r3, #2
 8003920:	d107      	bne.n	8003932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003922:	4b41      	ldr	r3, [pc, #260]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d109      	bne.n	8003942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e073      	b.n	8003a1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003932:	4b3d      	ldr	r3, [pc, #244]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e06b      	b.n	8003a1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003942:	4b39      	ldr	r3, [pc, #228]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f023 0203 	bic.w	r2, r3, #3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	4936      	ldr	r1, [pc, #216]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 8003950:	4313      	orrs	r3, r2
 8003952:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003954:	f7fe fde0 	bl	8002518 <HAL_GetTick>
 8003958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395a:	e00a      	b.n	8003972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800395c:	f7fe fddc 	bl	8002518 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	f241 3288 	movw	r2, #5000	; 0x1388
 800396a:	4293      	cmp	r3, r2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e053      	b.n	8003a1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003972:	4b2d      	ldr	r3, [pc, #180]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f003 020c 	and.w	r2, r3, #12
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	429a      	cmp	r2, r3
 8003982:	d1eb      	bne.n	800395c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003984:	4b27      	ldr	r3, [pc, #156]	; (8003a24 <HAL_RCC_ClockConfig+0x1c0>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	429a      	cmp	r2, r3
 8003990:	d210      	bcs.n	80039b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003992:	4b24      	ldr	r3, [pc, #144]	; (8003a24 <HAL_RCC_ClockConfig+0x1c0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f023 0207 	bic.w	r2, r3, #7
 800399a:	4922      	ldr	r1, [pc, #136]	; (8003a24 <HAL_RCC_ClockConfig+0x1c0>)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	4313      	orrs	r3, r2
 80039a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a2:	4b20      	ldr	r3, [pc, #128]	; (8003a24 <HAL_RCC_ClockConfig+0x1c0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d001      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e032      	b.n	8003a1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d008      	beq.n	80039d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039c0:	4b19      	ldr	r3, [pc, #100]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	4916      	ldr	r1, [pc, #88]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0308 	and.w	r3, r3, #8
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d009      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039de:	4b12      	ldr	r3, [pc, #72]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	490e      	ldr	r1, [pc, #56]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039f2:	f000 f821 	bl	8003a38 <HAL_RCC_GetSysClockFreq>
 80039f6:	4601      	mov	r1, r0
 80039f8:	4b0b      	ldr	r3, [pc, #44]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	091b      	lsrs	r3, r3, #4
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	4a0a      	ldr	r2, [pc, #40]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 8003a04:	5cd3      	ldrb	r3, [r2, r3]
 8003a06:	fa21 f303 	lsr.w	r3, r1, r3
 8003a0a:	4a09      	ldr	r2, [pc, #36]	; (8003a30 <HAL_RCC_ClockConfig+0x1cc>)
 8003a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a0e:	4b09      	ldr	r3, [pc, #36]	; (8003a34 <HAL_RCC_ClockConfig+0x1d0>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fe fd3e 	bl	8002494 <HAL_InitTick>

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40022000 	.word	0x40022000
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	08006b80 	.word	0x08006b80
 8003a30:	20000058 	.word	0x20000058
 8003a34:	2000005c 	.word	0x2000005c

08003a38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a38:	b490      	push	{r4, r7}
 8003a3a:	b08a      	sub	sp, #40	; 0x28
 8003a3c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a3e:	4b2a      	ldr	r3, [pc, #168]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a40:	1d3c      	adds	r4, r7, #4
 8003a42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a48:	4b28      	ldr	r3, [pc, #160]	; (8003aec <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61fb      	str	r3, [r7, #28]
 8003a52:	2300      	movs	r3, #0
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	2300      	movs	r3, #0
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a62:	4b23      	ldr	r3, [pc, #140]	; (8003af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d002      	beq.n	8003a78 <HAL_RCC_GetSysClockFreq+0x40>
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	d003      	beq.n	8003a7e <HAL_RCC_GetSysClockFreq+0x46>
 8003a76:	e02d      	b.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a78:	4b1e      	ldr	r3, [pc, #120]	; (8003af4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a7a:	623b      	str	r3, [r7, #32]
      break;
 8003a7c:	e02d      	b.n	8003ada <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	0c9b      	lsrs	r3, r3, #18
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a90:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d013      	beq.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a9c:	4b14      	ldr	r3, [pc, #80]	; (8003af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	0c5b      	lsrs	r3, r3, #17
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003aaa:	4413      	add	r3, r2
 8003aac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ab0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	4a0f      	ldr	r2, [pc, #60]	; (8003af4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ab6:	fb02 f203 	mul.w	r2, r2, r3
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac2:	e004      	b.n	8003ace <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	4a0c      	ldr	r2, [pc, #48]	; (8003af8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ac8:	fb02 f303 	mul.w	r3, r2, r3
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	623b      	str	r3, [r7, #32]
      break;
 8003ad2:	e002      	b.n	8003ada <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ad4:	4b07      	ldr	r3, [pc, #28]	; (8003af4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ad6:	623b      	str	r3, [r7, #32]
      break;
 8003ad8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ada:	6a3b      	ldr	r3, [r7, #32]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3728      	adds	r7, #40	; 0x28
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bc90      	pop	{r4, r7}
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	08006b6c 	.word	0x08006b6c
 8003aec:	08006b7c 	.word	0x08006b7c
 8003af0:	40021000 	.word	0x40021000
 8003af4:	007a1200 	.word	0x007a1200
 8003af8:	003d0900 	.word	0x003d0900

08003afc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b00:	4b02      	ldr	r3, [pc, #8]	; (8003b0c <HAL_RCC_GetHCLKFreq+0x10>)
 8003b02:	681b      	ldr	r3, [r3, #0]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr
 8003b0c:	20000058 	.word	0x20000058

08003b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b14:	f7ff fff2 	bl	8003afc <HAL_RCC_GetHCLKFreq>
 8003b18:	4601      	mov	r1, r0
 8003b1a:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	0a1b      	lsrs	r3, r3, #8
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	4a03      	ldr	r2, [pc, #12]	; (8003b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b26:	5cd3      	ldrb	r3, [r2, r3]
 8003b28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40021000 	.word	0x40021000
 8003b34:	08006b90 	.word	0x08006b90

08003b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b3c:	f7ff ffde 	bl	8003afc <HAL_RCC_GetHCLKFreq>
 8003b40:	4601      	mov	r1, r0
 8003b42:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	0adb      	lsrs	r3, r3, #11
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	4a03      	ldr	r2, [pc, #12]	; (8003b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b4e:	5cd3      	ldrb	r3, [r2, r3]
 8003b50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	08006b90 	.word	0x08006b90

08003b60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b68:	4b0a      	ldr	r3, [pc, #40]	; (8003b94 <RCC_Delay+0x34>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a0a      	ldr	r2, [pc, #40]	; (8003b98 <RCC_Delay+0x38>)
 8003b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b72:	0a5b      	lsrs	r3, r3, #9
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	fb02 f303 	mul.w	r3, r2, r3
 8003b7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b7c:	bf00      	nop
  }
  while (Delay --);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	1e5a      	subs	r2, r3, #1
 8003b82:	60fa      	str	r2, [r7, #12]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1f9      	bne.n	8003b7c <RCC_Delay+0x1c>
}
 8003b88:	bf00      	nop
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	20000058 	.word	0x20000058
 8003b98:	10624dd3 	.word	0x10624dd3

08003b9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e041      	b.n	8003c32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d106      	bne.n	8003bc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7fe faba 	bl	800213c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4610      	mov	r0, r2
 8003bdc:	f000 fa64 	bl	80040a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d001      	beq.n	8003c54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e03a      	b.n	8003cca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 0201 	orr.w	r2, r2, #1
 8003c6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a18      	ldr	r2, [pc, #96]	; (8003cd4 <HAL_TIM_Base_Start_IT+0x98>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d00e      	beq.n	8003c94 <HAL_TIM_Base_Start_IT+0x58>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c7e:	d009      	beq.n	8003c94 <HAL_TIM_Base_Start_IT+0x58>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a14      	ldr	r2, [pc, #80]	; (8003cd8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d004      	beq.n	8003c94 <HAL_TIM_Base_Start_IT+0x58>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a13      	ldr	r2, [pc, #76]	; (8003cdc <HAL_TIM_Base_Start_IT+0xa0>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d111      	bne.n	8003cb8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2b06      	cmp	r3, #6
 8003ca4:	d010      	beq.n	8003cc8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f042 0201 	orr.w	r2, r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb6:	e007      	b.n	8003cc8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr
 8003cd4:	40012c00 	.word	0x40012c00
 8003cd8:	40000400 	.word	0x40000400
 8003cdc:	40000800 	.word	0x40000800

08003ce0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d122      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d11b      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f06f 0202 	mvn.w	r2, #2
 8003d0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f9a4 	bl	8004070 <HAL_TIM_IC_CaptureCallback>
 8003d28:	e005      	b.n	8003d36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f997 	bl	800405e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f9a6 	bl	8004082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f003 0304 	and.w	r3, r3, #4
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	d122      	bne.n	8003d90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b04      	cmp	r3, #4
 8003d56:	d11b      	bne.n	8003d90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f06f 0204 	mvn.w	r2, #4
 8003d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2202      	movs	r2, #2
 8003d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f97a 	bl	8004070 <HAL_TIM_IC_CaptureCallback>
 8003d7c:	e005      	b.n	8003d8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f96d 	bl	800405e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f97c 	bl	8004082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b08      	cmp	r3, #8
 8003d9c:	d122      	bne.n	8003de4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f003 0308 	and.w	r3, r3, #8
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	d11b      	bne.n	8003de4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f06f 0208 	mvn.w	r2, #8
 8003db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2204      	movs	r2, #4
 8003dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	f003 0303 	and.w	r3, r3, #3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f950 	bl	8004070 <HAL_TIM_IC_CaptureCallback>
 8003dd0:	e005      	b.n	8003dde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f943 	bl	800405e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f952 	bl	8004082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	2b10      	cmp	r3, #16
 8003df0:	d122      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f003 0310 	and.w	r3, r3, #16
 8003dfc:	2b10      	cmp	r3, #16
 8003dfe:	d11b      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f06f 0210 	mvn.w	r2, #16
 8003e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2208      	movs	r2, #8
 8003e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f926 	bl	8004070 <HAL_TIM_IC_CaptureCallback>
 8003e24:	e005      	b.n	8003e32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f919 	bl	800405e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f928 	bl	8004082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d10e      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d107      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f06f 0201 	mvn.w	r2, #1
 8003e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7fd ffd2 	bl	8001e08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6e:	2b80      	cmp	r3, #128	; 0x80
 8003e70:	d10e      	bne.n	8003e90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e7c:	2b80      	cmp	r3, #128	; 0x80
 8003e7e:	d107      	bne.n	8003e90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 fa6b 	bl	8004366 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9a:	2b40      	cmp	r3, #64	; 0x40
 8003e9c:	d10e      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea8:	2b40      	cmp	r3, #64	; 0x40
 8003eaa:	d107      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f8ec 	bl	8004094 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f003 0320 	and.w	r3, r3, #32
 8003ec6:	2b20      	cmp	r3, #32
 8003ec8:	d10e      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f003 0320 	and.w	r3, r3, #32
 8003ed4:	2b20      	cmp	r3, #32
 8003ed6:	d107      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f06f 0220 	mvn.w	r2, #32
 8003ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fa36 	bl	8004354 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ee8:	bf00      	nop
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <HAL_TIM_ConfigClockSource+0x18>
 8003f04:	2302      	movs	r3, #2
 8003f06:	e0a6      	b.n	8004056 <HAL_TIM_ConfigClockSource+0x166>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2202      	movs	r2, #2
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b40      	cmp	r3, #64	; 0x40
 8003f3e:	d067      	beq.n	8004010 <HAL_TIM_ConfigClockSource+0x120>
 8003f40:	2b40      	cmp	r3, #64	; 0x40
 8003f42:	d80b      	bhi.n	8003f5c <HAL_TIM_ConfigClockSource+0x6c>
 8003f44:	2b10      	cmp	r3, #16
 8003f46:	d073      	beq.n	8004030 <HAL_TIM_ConfigClockSource+0x140>
 8003f48:	2b10      	cmp	r3, #16
 8003f4a:	d802      	bhi.n	8003f52 <HAL_TIM_ConfigClockSource+0x62>
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d06f      	beq.n	8004030 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003f50:	e078      	b.n	8004044 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003f52:	2b20      	cmp	r3, #32
 8003f54:	d06c      	beq.n	8004030 <HAL_TIM_ConfigClockSource+0x140>
 8003f56:	2b30      	cmp	r3, #48	; 0x30
 8003f58:	d06a      	beq.n	8004030 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003f5a:	e073      	b.n	8004044 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003f5c:	2b70      	cmp	r3, #112	; 0x70
 8003f5e:	d00d      	beq.n	8003f7c <HAL_TIM_ConfigClockSource+0x8c>
 8003f60:	2b70      	cmp	r3, #112	; 0x70
 8003f62:	d804      	bhi.n	8003f6e <HAL_TIM_ConfigClockSource+0x7e>
 8003f64:	2b50      	cmp	r3, #80	; 0x50
 8003f66:	d033      	beq.n	8003fd0 <HAL_TIM_ConfigClockSource+0xe0>
 8003f68:	2b60      	cmp	r3, #96	; 0x60
 8003f6a:	d041      	beq.n	8003ff0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003f6c:	e06a      	b.n	8004044 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f72:	d066      	beq.n	8004042 <HAL_TIM_ConfigClockSource+0x152>
 8003f74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f78:	d017      	beq.n	8003faa <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003f7a:	e063      	b.n	8004044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6818      	ldr	r0, [r3, #0]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	6899      	ldr	r1, [r3, #8]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f000 f965 	bl	800425a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f9e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	609a      	str	r2, [r3, #8]
      break;
 8003fa8:	e04c      	b.n	8004044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6818      	ldr	r0, [r3, #0]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	6899      	ldr	r1, [r3, #8]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f000 f94e 	bl	800425a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fcc:	609a      	str	r2, [r3, #8]
      break;
 8003fce:	e039      	b.n	8004044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6818      	ldr	r0, [r3, #0]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	6859      	ldr	r1, [r3, #4]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	f000 f8c5 	bl	800416c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2150      	movs	r1, #80	; 0x50
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 f91c 	bl	8004226 <TIM_ITRx_SetConfig>
      break;
 8003fee:	e029      	b.n	8004044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6818      	ldr	r0, [r3, #0]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	6859      	ldr	r1, [r3, #4]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	f000 f8e3 	bl	80041c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2160      	movs	r1, #96	; 0x60
 8004008:	4618      	mov	r0, r3
 800400a:	f000 f90c 	bl	8004226 <TIM_ITRx_SetConfig>
      break;
 800400e:	e019      	b.n	8004044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6818      	ldr	r0, [r3, #0]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	6859      	ldr	r1, [r3, #4]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	461a      	mov	r2, r3
 800401e:	f000 f8a5 	bl	800416c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2140      	movs	r1, #64	; 0x40
 8004028:	4618      	mov	r0, r3
 800402a:	f000 f8fc 	bl	8004226 <TIM_ITRx_SetConfig>
      break;
 800402e:	e009      	b.n	8004044 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4619      	mov	r1, r3
 800403a:	4610      	mov	r0, r2
 800403c:	f000 f8f3 	bl	8004226 <TIM_ITRx_SetConfig>
        break;
 8004040:	e000      	b.n	8004044 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004042:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800405e:	b480      	push	{r7}
 8004060:	b083      	sub	sp, #12
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	bc80      	pop	{r7}
 800406e:	4770      	bx	lr

08004070 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	bc80      	pop	{r7}
 8004080:	4770      	bx	lr

08004082 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004082:	b480      	push	{r7}
 8004084:	b083      	sub	sp, #12
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	bc80      	pop	{r7}
 8004092:	4770      	bx	lr

08004094 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bc80      	pop	{r7}
 80040a4:	4770      	bx	lr
	...

080040a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a29      	ldr	r2, [pc, #164]	; (8004160 <TIM_Base_SetConfig+0xb8>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d00b      	beq.n	80040d8 <TIM_Base_SetConfig+0x30>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c6:	d007      	beq.n	80040d8 <TIM_Base_SetConfig+0x30>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a26      	ldr	r2, [pc, #152]	; (8004164 <TIM_Base_SetConfig+0xbc>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d003      	beq.n	80040d8 <TIM_Base_SetConfig+0x30>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a25      	ldr	r2, [pc, #148]	; (8004168 <TIM_Base_SetConfig+0xc0>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d108      	bne.n	80040ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a1c      	ldr	r2, [pc, #112]	; (8004160 <TIM_Base_SetConfig+0xb8>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d00b      	beq.n	800410a <TIM_Base_SetConfig+0x62>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f8:	d007      	beq.n	800410a <TIM_Base_SetConfig+0x62>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a19      	ldr	r2, [pc, #100]	; (8004164 <TIM_Base_SetConfig+0xbc>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d003      	beq.n	800410a <TIM_Base_SetConfig+0x62>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a18      	ldr	r2, [pc, #96]	; (8004168 <TIM_Base_SetConfig+0xc0>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d108      	bne.n	800411c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4313      	orrs	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	4313      	orrs	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a07      	ldr	r2, [pc, #28]	; (8004160 <TIM_Base_SetConfig+0xb8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d103      	bne.n	8004150 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	691a      	ldr	r2, [r3, #16]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	615a      	str	r2, [r3, #20]
}
 8004156:	bf00      	nop
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr
 8004160:	40012c00 	.word	0x40012c00
 8004164:	40000400 	.word	0x40000400
 8004168:	40000800 	.word	0x40000800

0800416c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	f023 0201 	bic.w	r2, r3, #1
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4313      	orrs	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f023 030a 	bic.w	r3, r3, #10
 80041a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	621a      	str	r2, [r3, #32]
}
 80041be:	bf00      	nop
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr

080041c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	f023 0210 	bic.w	r2, r3, #16
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	031b      	lsls	r3, r3, #12
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004204:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	621a      	str	r2, [r3, #32]
}
 800421c:	bf00      	nop
 800421e:	371c      	adds	r7, #28
 8004220:	46bd      	mov	sp, r7
 8004222:	bc80      	pop	{r7}
 8004224:	4770      	bx	lr

08004226 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004226:	b480      	push	{r7}
 8004228:	b085      	sub	sp, #20
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4313      	orrs	r3, r2
 8004244:	f043 0307 	orr.w	r3, r3, #7
 8004248:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	609a      	str	r2, [r3, #8]
}
 8004250:	bf00      	nop
 8004252:	3714      	adds	r7, #20
 8004254:	46bd      	mov	sp, r7
 8004256:	bc80      	pop	{r7}
 8004258:	4770      	bx	lr

0800425a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800425a:	b480      	push	{r7}
 800425c:	b087      	sub	sp, #28
 800425e:	af00      	add	r7, sp, #0
 8004260:	60f8      	str	r0, [r7, #12]
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	607a      	str	r2, [r7, #4]
 8004266:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004274:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	021a      	lsls	r2, r3, #8
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	431a      	orrs	r2, r3
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	4313      	orrs	r3, r2
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	4313      	orrs	r3, r2
 8004286:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	609a      	str	r2, [r3, #8]
}
 800428e:	bf00      	nop
 8004290:	371c      	adds	r7, #28
 8004292:	46bd      	mov	sp, r7
 8004294:	bc80      	pop	{r7}
 8004296:	4770      	bx	lr

08004298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042ac:	2302      	movs	r3, #2
 80042ae:	e046      	b.n	800433e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2202      	movs	r2, #2
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a16      	ldr	r2, [pc, #88]	; (8004348 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d00e      	beq.n	8004312 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042fc:	d009      	beq.n	8004312 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a12      	ldr	r2, [pc, #72]	; (800434c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d004      	beq.n	8004312 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a10      	ldr	r2, [pc, #64]	; (8004350 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d10c      	bne.n	800432c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004318:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	4313      	orrs	r3, r2
 8004322:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	bc80      	pop	{r7}
 8004346:	4770      	bx	lr
 8004348:	40012c00 	.word	0x40012c00
 800434c:	40000400 	.word	0x40000400
 8004350:	40000800 	.word	0x40000800

08004354 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	bc80      	pop	{r7}
 8004364:	4770      	bx	lr

08004366 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr

08004378 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e03f      	b.n	800440a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d106      	bne.n	80043a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7fd ff70 	bl	8002284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2224      	movs	r2, #36	; 0x24
 80043a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f905 	bl	80045cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	691a      	ldr	r2, [r3, #16]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	695a      	ldr	r2, [r3, #20]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b08a      	sub	sp, #40	; 0x28
 8004416:	af02      	add	r7, sp, #8
 8004418:	60f8      	str	r0, [r7, #12]
 800441a:	60b9      	str	r1, [r7, #8]
 800441c:	603b      	str	r3, [r7, #0]
 800441e:	4613      	mov	r3, r2
 8004420:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004422:	2300      	movs	r3, #0
 8004424:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b20      	cmp	r3, #32
 8004430:	d17c      	bne.n	800452c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d002      	beq.n	800443e <HAL_UART_Transmit+0x2c>
 8004438:	88fb      	ldrh	r3, [r7, #6]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e075      	b.n	800452e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004448:	2b01      	cmp	r3, #1
 800444a:	d101      	bne.n	8004450 <HAL_UART_Transmit+0x3e>
 800444c:	2302      	movs	r3, #2
 800444e:	e06e      	b.n	800452e <HAL_UART_Transmit+0x11c>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2221      	movs	r2, #33	; 0x21
 8004462:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004466:	f7fe f857 	bl	8002518 <HAL_GetTick>
 800446a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	88fa      	ldrh	r2, [r7, #6]
 8004470:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	88fa      	ldrh	r2, [r7, #6]
 8004476:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004480:	d108      	bne.n	8004494 <HAL_UART_Transmit+0x82>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d104      	bne.n	8004494 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800448a:	2300      	movs	r3, #0
 800448c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	61bb      	str	r3, [r7, #24]
 8004492:	e003      	b.n	800449c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004498:	2300      	movs	r3, #0
 800449a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80044a4:	e02a      	b.n	80044fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2200      	movs	r2, #0
 80044ae:	2180      	movs	r1, #128	; 0x80
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 f840 	bl	8004536 <UART_WaitOnFlagUntilTimeout>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e036      	b.n	800452e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10b      	bne.n	80044de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	461a      	mov	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	3302      	adds	r3, #2
 80044da:	61bb      	str	r3, [r7, #24]
 80044dc:	e007      	b.n	80044ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	781a      	ldrb	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	3301      	adds	r3, #1
 80044ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004500:	b29b      	uxth	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1cf      	bne.n	80044a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	2200      	movs	r2, #0
 800450e:	2140      	movs	r1, #64	; 0x40
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f000 f810 	bl	8004536 <UART_WaitOnFlagUntilTimeout>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e006      	b.n	800452e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2220      	movs	r2, #32
 8004524:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004528:	2300      	movs	r3, #0
 800452a:	e000      	b.n	800452e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800452c:	2302      	movs	r3, #2
  }
}
 800452e:	4618      	mov	r0, r3
 8004530:	3720      	adds	r7, #32
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b084      	sub	sp, #16
 800453a:	af00      	add	r7, sp, #0
 800453c:	60f8      	str	r0, [r7, #12]
 800453e:	60b9      	str	r1, [r7, #8]
 8004540:	603b      	str	r3, [r7, #0]
 8004542:	4613      	mov	r3, r2
 8004544:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004546:	e02c      	b.n	80045a2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454e:	d028      	beq.n	80045a2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d007      	beq.n	8004566 <UART_WaitOnFlagUntilTimeout+0x30>
 8004556:	f7fd ffdf 	bl	8002518 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	429a      	cmp	r2, r3
 8004564:	d21d      	bcs.n	80045a2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68da      	ldr	r2, [r3, #12]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004574:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	695a      	ldr	r2, [r3, #20]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0201 	bic.w	r2, r2, #1
 8004584:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2220      	movs	r2, #32
 800458a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2220      	movs	r2, #32
 8004592:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e00f      	b.n	80045c2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	4013      	ands	r3, r2
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	bf0c      	ite	eq
 80045b2:	2301      	moveq	r3, #1
 80045b4:	2300      	movne	r3, #0
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	461a      	mov	r2, r3
 80045ba:	79fb      	ldrb	r3, [r7, #7]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d0c3      	beq.n	8004548 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
	...

080045cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	431a      	orrs	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004606:	f023 030c 	bic.w	r3, r3, #12
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	6812      	ldr	r2, [r2, #0]
 800460e:	68b9      	ldr	r1, [r7, #8]
 8004610:	430b      	orrs	r3, r1
 8004612:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	699a      	ldr	r2, [r3, #24]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a2c      	ldr	r2, [pc, #176]	; (80046e0 <UART_SetConfig+0x114>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d103      	bne.n	800463c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004634:	f7ff fa80 	bl	8003b38 <HAL_RCC_GetPCLK2Freq>
 8004638:	60f8      	str	r0, [r7, #12]
 800463a:	e002      	b.n	8004642 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800463c:	f7ff fa68 	bl	8003b10 <HAL_RCC_GetPCLK1Freq>
 8004640:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	4613      	mov	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	009a      	lsls	r2, r3, #2
 800464c:	441a      	add	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	fbb2 f3f3 	udiv	r3, r2, r3
 8004658:	4a22      	ldr	r2, [pc, #136]	; (80046e4 <UART_SetConfig+0x118>)
 800465a:	fba2 2303 	umull	r2, r3, r2, r3
 800465e:	095b      	lsrs	r3, r3, #5
 8004660:	0119      	lsls	r1, r3, #4
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	4613      	mov	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	009a      	lsls	r2, r3, #2
 800466c:	441a      	add	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	fbb2 f2f3 	udiv	r2, r2, r3
 8004678:	4b1a      	ldr	r3, [pc, #104]	; (80046e4 <UART_SetConfig+0x118>)
 800467a:	fba3 0302 	umull	r0, r3, r3, r2
 800467e:	095b      	lsrs	r3, r3, #5
 8004680:	2064      	movs	r0, #100	; 0x64
 8004682:	fb00 f303 	mul.w	r3, r0, r3
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	011b      	lsls	r3, r3, #4
 800468a:	3332      	adds	r3, #50	; 0x32
 800468c:	4a15      	ldr	r2, [pc, #84]	; (80046e4 <UART_SetConfig+0x118>)
 800468e:	fba2 2303 	umull	r2, r3, r2, r3
 8004692:	095b      	lsrs	r3, r3, #5
 8004694:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004698:	4419      	add	r1, r3
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	009a      	lsls	r2, r3, #2
 80046a4:	441a      	add	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80046b0:	4b0c      	ldr	r3, [pc, #48]	; (80046e4 <UART_SetConfig+0x118>)
 80046b2:	fba3 0302 	umull	r0, r3, r3, r2
 80046b6:	095b      	lsrs	r3, r3, #5
 80046b8:	2064      	movs	r0, #100	; 0x64
 80046ba:	fb00 f303 	mul.w	r3, r0, r3
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	011b      	lsls	r3, r3, #4
 80046c2:	3332      	adds	r3, #50	; 0x32
 80046c4:	4a07      	ldr	r2, [pc, #28]	; (80046e4 <UART_SetConfig+0x118>)
 80046c6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ca:	095b      	lsrs	r3, r3, #5
 80046cc:	f003 020f 	and.w	r2, r3, #15
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	440a      	add	r2, r1
 80046d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046d8:	bf00      	nop
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40013800 	.word	0x40013800
 80046e4:	51eb851f 	.word	0x51eb851f

080046e8 <__errno>:
 80046e8:	4b01      	ldr	r3, [pc, #4]	; (80046f0 <__errno+0x8>)
 80046ea:	6818      	ldr	r0, [r3, #0]
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	20000064 	.word	0x20000064

080046f4 <__libc_init_array>:
 80046f4:	b570      	push	{r4, r5, r6, lr}
 80046f6:	2500      	movs	r5, #0
 80046f8:	4e0c      	ldr	r6, [pc, #48]	; (800472c <__libc_init_array+0x38>)
 80046fa:	4c0d      	ldr	r4, [pc, #52]	; (8004730 <__libc_init_array+0x3c>)
 80046fc:	1ba4      	subs	r4, r4, r6
 80046fe:	10a4      	asrs	r4, r4, #2
 8004700:	42a5      	cmp	r5, r4
 8004702:	d109      	bne.n	8004718 <__libc_init_array+0x24>
 8004704:	f002 f8ac 	bl	8006860 <_init>
 8004708:	2500      	movs	r5, #0
 800470a:	4e0a      	ldr	r6, [pc, #40]	; (8004734 <__libc_init_array+0x40>)
 800470c:	4c0a      	ldr	r4, [pc, #40]	; (8004738 <__libc_init_array+0x44>)
 800470e:	1ba4      	subs	r4, r4, r6
 8004710:	10a4      	asrs	r4, r4, #2
 8004712:	42a5      	cmp	r5, r4
 8004714:	d105      	bne.n	8004722 <__libc_init_array+0x2e>
 8004716:	bd70      	pop	{r4, r5, r6, pc}
 8004718:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800471c:	4798      	blx	r3
 800471e:	3501      	adds	r5, #1
 8004720:	e7ee      	b.n	8004700 <__libc_init_array+0xc>
 8004722:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004726:	4798      	blx	r3
 8004728:	3501      	adds	r5, #1
 800472a:	e7f2      	b.n	8004712 <__libc_init_array+0x1e>
 800472c:	08006df8 	.word	0x08006df8
 8004730:	08006df8 	.word	0x08006df8
 8004734:	08006df8 	.word	0x08006df8
 8004738:	08006dfc 	.word	0x08006dfc

0800473c <malloc>:
 800473c:	4b02      	ldr	r3, [pc, #8]	; (8004748 <malloc+0xc>)
 800473e:	4601      	mov	r1, r0
 8004740:	6818      	ldr	r0, [r3, #0]
 8004742:	f000 b857 	b.w	80047f4 <_malloc_r>
 8004746:	bf00      	nop
 8004748:	20000064 	.word	0x20000064

0800474c <memset>:
 800474c:	4603      	mov	r3, r0
 800474e:	4402      	add	r2, r0
 8004750:	4293      	cmp	r3, r2
 8004752:	d100      	bne.n	8004756 <memset+0xa>
 8004754:	4770      	bx	lr
 8004756:	f803 1b01 	strb.w	r1, [r3], #1
 800475a:	e7f9      	b.n	8004750 <memset+0x4>

0800475c <_free_r>:
 800475c:	b538      	push	{r3, r4, r5, lr}
 800475e:	4605      	mov	r5, r0
 8004760:	2900      	cmp	r1, #0
 8004762:	d043      	beq.n	80047ec <_free_r+0x90>
 8004764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004768:	1f0c      	subs	r4, r1, #4
 800476a:	2b00      	cmp	r3, #0
 800476c:	bfb8      	it	lt
 800476e:	18e4      	addlt	r4, r4, r3
 8004770:	f001 fbd1 	bl	8005f16 <__malloc_lock>
 8004774:	4a1e      	ldr	r2, [pc, #120]	; (80047f0 <_free_r+0x94>)
 8004776:	6813      	ldr	r3, [r2, #0]
 8004778:	4610      	mov	r0, r2
 800477a:	b933      	cbnz	r3, 800478a <_free_r+0x2e>
 800477c:	6063      	str	r3, [r4, #4]
 800477e:	6014      	str	r4, [r2, #0]
 8004780:	4628      	mov	r0, r5
 8004782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004786:	f001 bbc7 	b.w	8005f18 <__malloc_unlock>
 800478a:	42a3      	cmp	r3, r4
 800478c:	d90b      	bls.n	80047a6 <_free_r+0x4a>
 800478e:	6821      	ldr	r1, [r4, #0]
 8004790:	1862      	adds	r2, r4, r1
 8004792:	4293      	cmp	r3, r2
 8004794:	bf01      	itttt	eq
 8004796:	681a      	ldreq	r2, [r3, #0]
 8004798:	685b      	ldreq	r3, [r3, #4]
 800479a:	1852      	addeq	r2, r2, r1
 800479c:	6022      	streq	r2, [r4, #0]
 800479e:	6063      	str	r3, [r4, #4]
 80047a0:	6004      	str	r4, [r0, #0]
 80047a2:	e7ed      	b.n	8004780 <_free_r+0x24>
 80047a4:	4613      	mov	r3, r2
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	b10a      	cbz	r2, 80047ae <_free_r+0x52>
 80047aa:	42a2      	cmp	r2, r4
 80047ac:	d9fa      	bls.n	80047a4 <_free_r+0x48>
 80047ae:	6819      	ldr	r1, [r3, #0]
 80047b0:	1858      	adds	r0, r3, r1
 80047b2:	42a0      	cmp	r0, r4
 80047b4:	d10b      	bne.n	80047ce <_free_r+0x72>
 80047b6:	6820      	ldr	r0, [r4, #0]
 80047b8:	4401      	add	r1, r0
 80047ba:	1858      	adds	r0, r3, r1
 80047bc:	4282      	cmp	r2, r0
 80047be:	6019      	str	r1, [r3, #0]
 80047c0:	d1de      	bne.n	8004780 <_free_r+0x24>
 80047c2:	6810      	ldr	r0, [r2, #0]
 80047c4:	6852      	ldr	r2, [r2, #4]
 80047c6:	4401      	add	r1, r0
 80047c8:	6019      	str	r1, [r3, #0]
 80047ca:	605a      	str	r2, [r3, #4]
 80047cc:	e7d8      	b.n	8004780 <_free_r+0x24>
 80047ce:	d902      	bls.n	80047d6 <_free_r+0x7a>
 80047d0:	230c      	movs	r3, #12
 80047d2:	602b      	str	r3, [r5, #0]
 80047d4:	e7d4      	b.n	8004780 <_free_r+0x24>
 80047d6:	6820      	ldr	r0, [r4, #0]
 80047d8:	1821      	adds	r1, r4, r0
 80047da:	428a      	cmp	r2, r1
 80047dc:	bf01      	itttt	eq
 80047de:	6811      	ldreq	r1, [r2, #0]
 80047e0:	6852      	ldreq	r2, [r2, #4]
 80047e2:	1809      	addeq	r1, r1, r0
 80047e4:	6021      	streq	r1, [r4, #0]
 80047e6:	6062      	str	r2, [r4, #4]
 80047e8:	605c      	str	r4, [r3, #4]
 80047ea:	e7c9      	b.n	8004780 <_free_r+0x24>
 80047ec:	bd38      	pop	{r3, r4, r5, pc}
 80047ee:	bf00      	nop
 80047f0:	20000e90 	.word	0x20000e90

080047f4 <_malloc_r>:
 80047f4:	b570      	push	{r4, r5, r6, lr}
 80047f6:	1ccd      	adds	r5, r1, #3
 80047f8:	f025 0503 	bic.w	r5, r5, #3
 80047fc:	3508      	adds	r5, #8
 80047fe:	2d0c      	cmp	r5, #12
 8004800:	bf38      	it	cc
 8004802:	250c      	movcc	r5, #12
 8004804:	2d00      	cmp	r5, #0
 8004806:	4606      	mov	r6, r0
 8004808:	db01      	blt.n	800480e <_malloc_r+0x1a>
 800480a:	42a9      	cmp	r1, r5
 800480c:	d903      	bls.n	8004816 <_malloc_r+0x22>
 800480e:	230c      	movs	r3, #12
 8004810:	6033      	str	r3, [r6, #0]
 8004812:	2000      	movs	r0, #0
 8004814:	bd70      	pop	{r4, r5, r6, pc}
 8004816:	f001 fb7e 	bl	8005f16 <__malloc_lock>
 800481a:	4a21      	ldr	r2, [pc, #132]	; (80048a0 <_malloc_r+0xac>)
 800481c:	6814      	ldr	r4, [r2, #0]
 800481e:	4621      	mov	r1, r4
 8004820:	b991      	cbnz	r1, 8004848 <_malloc_r+0x54>
 8004822:	4c20      	ldr	r4, [pc, #128]	; (80048a4 <_malloc_r+0xb0>)
 8004824:	6823      	ldr	r3, [r4, #0]
 8004826:	b91b      	cbnz	r3, 8004830 <_malloc_r+0x3c>
 8004828:	4630      	mov	r0, r6
 800482a:	f000 fc8d 	bl	8005148 <_sbrk_r>
 800482e:	6020      	str	r0, [r4, #0]
 8004830:	4629      	mov	r1, r5
 8004832:	4630      	mov	r0, r6
 8004834:	f000 fc88 	bl	8005148 <_sbrk_r>
 8004838:	1c43      	adds	r3, r0, #1
 800483a:	d124      	bne.n	8004886 <_malloc_r+0x92>
 800483c:	230c      	movs	r3, #12
 800483e:	4630      	mov	r0, r6
 8004840:	6033      	str	r3, [r6, #0]
 8004842:	f001 fb69 	bl	8005f18 <__malloc_unlock>
 8004846:	e7e4      	b.n	8004812 <_malloc_r+0x1e>
 8004848:	680b      	ldr	r3, [r1, #0]
 800484a:	1b5b      	subs	r3, r3, r5
 800484c:	d418      	bmi.n	8004880 <_malloc_r+0x8c>
 800484e:	2b0b      	cmp	r3, #11
 8004850:	d90f      	bls.n	8004872 <_malloc_r+0x7e>
 8004852:	600b      	str	r3, [r1, #0]
 8004854:	18cc      	adds	r4, r1, r3
 8004856:	50cd      	str	r5, [r1, r3]
 8004858:	4630      	mov	r0, r6
 800485a:	f001 fb5d 	bl	8005f18 <__malloc_unlock>
 800485e:	f104 000b 	add.w	r0, r4, #11
 8004862:	1d23      	adds	r3, r4, #4
 8004864:	f020 0007 	bic.w	r0, r0, #7
 8004868:	1ac3      	subs	r3, r0, r3
 800486a:	d0d3      	beq.n	8004814 <_malloc_r+0x20>
 800486c:	425a      	negs	r2, r3
 800486e:	50e2      	str	r2, [r4, r3]
 8004870:	e7d0      	b.n	8004814 <_malloc_r+0x20>
 8004872:	684b      	ldr	r3, [r1, #4]
 8004874:	428c      	cmp	r4, r1
 8004876:	bf16      	itet	ne
 8004878:	6063      	strne	r3, [r4, #4]
 800487a:	6013      	streq	r3, [r2, #0]
 800487c:	460c      	movne	r4, r1
 800487e:	e7eb      	b.n	8004858 <_malloc_r+0x64>
 8004880:	460c      	mov	r4, r1
 8004882:	6849      	ldr	r1, [r1, #4]
 8004884:	e7cc      	b.n	8004820 <_malloc_r+0x2c>
 8004886:	1cc4      	adds	r4, r0, #3
 8004888:	f024 0403 	bic.w	r4, r4, #3
 800488c:	42a0      	cmp	r0, r4
 800488e:	d005      	beq.n	800489c <_malloc_r+0xa8>
 8004890:	1a21      	subs	r1, r4, r0
 8004892:	4630      	mov	r0, r6
 8004894:	f000 fc58 	bl	8005148 <_sbrk_r>
 8004898:	3001      	adds	r0, #1
 800489a:	d0cf      	beq.n	800483c <_malloc_r+0x48>
 800489c:	6025      	str	r5, [r4, #0]
 800489e:	e7db      	b.n	8004858 <_malloc_r+0x64>
 80048a0:	20000e90 	.word	0x20000e90
 80048a4:	20000e94 	.word	0x20000e94

080048a8 <__cvt>:
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048ae:	461e      	mov	r6, r3
 80048b0:	bfbb      	ittet	lt
 80048b2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80048b6:	461e      	movlt	r6, r3
 80048b8:	2300      	movge	r3, #0
 80048ba:	232d      	movlt	r3, #45	; 0x2d
 80048bc:	b088      	sub	sp, #32
 80048be:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80048c0:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80048c4:	f027 0720 	bic.w	r7, r7, #32
 80048c8:	2f46      	cmp	r7, #70	; 0x46
 80048ca:	4614      	mov	r4, r2
 80048cc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80048ce:	700b      	strb	r3, [r1, #0]
 80048d0:	d004      	beq.n	80048dc <__cvt+0x34>
 80048d2:	2f45      	cmp	r7, #69	; 0x45
 80048d4:	d100      	bne.n	80048d8 <__cvt+0x30>
 80048d6:	3501      	adds	r5, #1
 80048d8:	2302      	movs	r3, #2
 80048da:	e000      	b.n	80048de <__cvt+0x36>
 80048dc:	2303      	movs	r3, #3
 80048de:	aa07      	add	r2, sp, #28
 80048e0:	9204      	str	r2, [sp, #16]
 80048e2:	aa06      	add	r2, sp, #24
 80048e4:	e9cd a202 	strd	sl, r2, [sp, #8]
 80048e8:	e9cd 3500 	strd	r3, r5, [sp]
 80048ec:	4622      	mov	r2, r4
 80048ee:	4633      	mov	r3, r6
 80048f0:	f000 fd36 	bl	8005360 <_dtoa_r>
 80048f4:	2f47      	cmp	r7, #71	; 0x47
 80048f6:	4680      	mov	r8, r0
 80048f8:	d102      	bne.n	8004900 <__cvt+0x58>
 80048fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80048fc:	07db      	lsls	r3, r3, #31
 80048fe:	d526      	bpl.n	800494e <__cvt+0xa6>
 8004900:	2f46      	cmp	r7, #70	; 0x46
 8004902:	eb08 0905 	add.w	r9, r8, r5
 8004906:	d111      	bne.n	800492c <__cvt+0x84>
 8004908:	f898 3000 	ldrb.w	r3, [r8]
 800490c:	2b30      	cmp	r3, #48	; 0x30
 800490e:	d10a      	bne.n	8004926 <__cvt+0x7e>
 8004910:	2200      	movs	r2, #0
 8004912:	2300      	movs	r3, #0
 8004914:	4620      	mov	r0, r4
 8004916:	4631      	mov	r1, r6
 8004918:	f7fc f846 	bl	80009a8 <__aeabi_dcmpeq>
 800491c:	b918      	cbnz	r0, 8004926 <__cvt+0x7e>
 800491e:	f1c5 0501 	rsb	r5, r5, #1
 8004922:	f8ca 5000 	str.w	r5, [sl]
 8004926:	f8da 3000 	ldr.w	r3, [sl]
 800492a:	4499      	add	r9, r3
 800492c:	2200      	movs	r2, #0
 800492e:	2300      	movs	r3, #0
 8004930:	4620      	mov	r0, r4
 8004932:	4631      	mov	r1, r6
 8004934:	f7fc f838 	bl	80009a8 <__aeabi_dcmpeq>
 8004938:	b938      	cbnz	r0, 800494a <__cvt+0xa2>
 800493a:	2230      	movs	r2, #48	; 0x30
 800493c:	9b07      	ldr	r3, [sp, #28]
 800493e:	454b      	cmp	r3, r9
 8004940:	d205      	bcs.n	800494e <__cvt+0xa6>
 8004942:	1c59      	adds	r1, r3, #1
 8004944:	9107      	str	r1, [sp, #28]
 8004946:	701a      	strb	r2, [r3, #0]
 8004948:	e7f8      	b.n	800493c <__cvt+0x94>
 800494a:	f8cd 901c 	str.w	r9, [sp, #28]
 800494e:	4640      	mov	r0, r8
 8004950:	9b07      	ldr	r3, [sp, #28]
 8004952:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004954:	eba3 0308 	sub.w	r3, r3, r8
 8004958:	6013      	str	r3, [r2, #0]
 800495a:	b008      	add	sp, #32
 800495c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004960 <__exponent>:
 8004960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004962:	2900      	cmp	r1, #0
 8004964:	bfb4      	ite	lt
 8004966:	232d      	movlt	r3, #45	; 0x2d
 8004968:	232b      	movge	r3, #43	; 0x2b
 800496a:	4604      	mov	r4, r0
 800496c:	bfb8      	it	lt
 800496e:	4249      	neglt	r1, r1
 8004970:	2909      	cmp	r1, #9
 8004972:	f804 2b02 	strb.w	r2, [r4], #2
 8004976:	7043      	strb	r3, [r0, #1]
 8004978:	dd21      	ble.n	80049be <__exponent+0x5e>
 800497a:	f10d 0307 	add.w	r3, sp, #7
 800497e:	461f      	mov	r7, r3
 8004980:	260a      	movs	r6, #10
 8004982:	fb91 f5f6 	sdiv	r5, r1, r6
 8004986:	fb06 1115 	mls	r1, r6, r5, r1
 800498a:	2d09      	cmp	r5, #9
 800498c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004990:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004994:	f103 32ff 	add.w	r2, r3, #4294967295
 8004998:	4629      	mov	r1, r5
 800499a:	dc09      	bgt.n	80049b0 <__exponent+0x50>
 800499c:	3130      	adds	r1, #48	; 0x30
 800499e:	3b02      	subs	r3, #2
 80049a0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80049a4:	42bb      	cmp	r3, r7
 80049a6:	4622      	mov	r2, r4
 80049a8:	d304      	bcc.n	80049b4 <__exponent+0x54>
 80049aa:	1a10      	subs	r0, r2, r0
 80049ac:	b003      	add	sp, #12
 80049ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049b0:	4613      	mov	r3, r2
 80049b2:	e7e6      	b.n	8004982 <__exponent+0x22>
 80049b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049b8:	f804 2b01 	strb.w	r2, [r4], #1
 80049bc:	e7f2      	b.n	80049a4 <__exponent+0x44>
 80049be:	2330      	movs	r3, #48	; 0x30
 80049c0:	4419      	add	r1, r3
 80049c2:	7083      	strb	r3, [r0, #2]
 80049c4:	1d02      	adds	r2, r0, #4
 80049c6:	70c1      	strb	r1, [r0, #3]
 80049c8:	e7ef      	b.n	80049aa <__exponent+0x4a>
	...

080049cc <_printf_float>:
 80049cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049d0:	b091      	sub	sp, #68	; 0x44
 80049d2:	460c      	mov	r4, r1
 80049d4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80049d6:	4693      	mov	fp, r2
 80049d8:	461e      	mov	r6, r3
 80049da:	4605      	mov	r5, r0
 80049dc:	f001 fa74 	bl	8005ec8 <_localeconv_r>
 80049e0:	6803      	ldr	r3, [r0, #0]
 80049e2:	4618      	mov	r0, r3
 80049e4:	9309      	str	r3, [sp, #36]	; 0x24
 80049e6:	f7fb fbb3 	bl	8000150 <strlen>
 80049ea:	2300      	movs	r3, #0
 80049ec:	930e      	str	r3, [sp, #56]	; 0x38
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	900a      	str	r0, [sp, #40]	; 0x28
 80049f2:	3307      	adds	r3, #7
 80049f4:	f023 0307 	bic.w	r3, r3, #7
 80049f8:	f103 0208 	add.w	r2, r3, #8
 80049fc:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004a00:	f8d4 a000 	ldr.w	sl, [r4]
 8004a04:	603a      	str	r2, [r7, #0]
 8004a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a0e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004a12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a16:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a18:	f04f 32ff 	mov.w	r2, #4294967295
 8004a1c:	4ba6      	ldr	r3, [pc, #664]	; (8004cb8 <_printf_float+0x2ec>)
 8004a1e:	4638      	mov	r0, r7
 8004a20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a22:	f7fb fff3 	bl	8000a0c <__aeabi_dcmpun>
 8004a26:	bb68      	cbnz	r0, 8004a84 <_printf_float+0xb8>
 8004a28:	f04f 32ff 	mov.w	r2, #4294967295
 8004a2c:	4ba2      	ldr	r3, [pc, #648]	; (8004cb8 <_printf_float+0x2ec>)
 8004a2e:	4638      	mov	r0, r7
 8004a30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a32:	f7fb ffcd 	bl	80009d0 <__aeabi_dcmple>
 8004a36:	bb28      	cbnz	r0, 8004a84 <_printf_float+0xb8>
 8004a38:	2200      	movs	r2, #0
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	4638      	mov	r0, r7
 8004a3e:	4649      	mov	r1, r9
 8004a40:	f7fb ffbc 	bl	80009bc <__aeabi_dcmplt>
 8004a44:	b110      	cbz	r0, 8004a4c <_printf_float+0x80>
 8004a46:	232d      	movs	r3, #45	; 0x2d
 8004a48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a4c:	4f9b      	ldr	r7, [pc, #620]	; (8004cbc <_printf_float+0x2f0>)
 8004a4e:	4b9c      	ldr	r3, [pc, #624]	; (8004cc0 <_printf_float+0x2f4>)
 8004a50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004a54:	bf98      	it	ls
 8004a56:	461f      	movls	r7, r3
 8004a58:	2303      	movs	r3, #3
 8004a5a:	f04f 0900 	mov.w	r9, #0
 8004a5e:	6123      	str	r3, [r4, #16]
 8004a60:	f02a 0304 	bic.w	r3, sl, #4
 8004a64:	6023      	str	r3, [r4, #0]
 8004a66:	9600      	str	r6, [sp, #0]
 8004a68:	465b      	mov	r3, fp
 8004a6a:	aa0f      	add	r2, sp, #60	; 0x3c
 8004a6c:	4621      	mov	r1, r4
 8004a6e:	4628      	mov	r0, r5
 8004a70:	f000 f9e2 	bl	8004e38 <_printf_common>
 8004a74:	3001      	adds	r0, #1
 8004a76:	f040 8090 	bne.w	8004b9a <_printf_float+0x1ce>
 8004a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a7e:	b011      	add	sp, #68	; 0x44
 8004a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a84:	463a      	mov	r2, r7
 8004a86:	464b      	mov	r3, r9
 8004a88:	4638      	mov	r0, r7
 8004a8a:	4649      	mov	r1, r9
 8004a8c:	f7fb ffbe 	bl	8000a0c <__aeabi_dcmpun>
 8004a90:	b110      	cbz	r0, 8004a98 <_printf_float+0xcc>
 8004a92:	4f8c      	ldr	r7, [pc, #560]	; (8004cc4 <_printf_float+0x2f8>)
 8004a94:	4b8c      	ldr	r3, [pc, #560]	; (8004cc8 <_printf_float+0x2fc>)
 8004a96:	e7db      	b.n	8004a50 <_printf_float+0x84>
 8004a98:	6863      	ldr	r3, [r4, #4]
 8004a9a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004a9e:	1c59      	adds	r1, r3, #1
 8004aa0:	a80d      	add	r0, sp, #52	; 0x34
 8004aa2:	a90e      	add	r1, sp, #56	; 0x38
 8004aa4:	d140      	bne.n	8004b28 <_printf_float+0x15c>
 8004aa6:	2306      	movs	r3, #6
 8004aa8:	6063      	str	r3, [r4, #4]
 8004aaa:	f04f 0c00 	mov.w	ip, #0
 8004aae:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004ab2:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004ab6:	6863      	ldr	r3, [r4, #4]
 8004ab8:	6022      	str	r2, [r4, #0]
 8004aba:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	463a      	mov	r2, r7
 8004ac2:	464b      	mov	r3, r9
 8004ac4:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004ac8:	4628      	mov	r0, r5
 8004aca:	f7ff feed 	bl	80048a8 <__cvt>
 8004ace:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004ad2:	2b47      	cmp	r3, #71	; 0x47
 8004ad4:	4607      	mov	r7, r0
 8004ad6:	d109      	bne.n	8004aec <_printf_float+0x120>
 8004ad8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ada:	1cd8      	adds	r0, r3, #3
 8004adc:	db02      	blt.n	8004ae4 <_printf_float+0x118>
 8004ade:	6862      	ldr	r2, [r4, #4]
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	dd47      	ble.n	8004b74 <_printf_float+0x1a8>
 8004ae4:	f1a8 0802 	sub.w	r8, r8, #2
 8004ae8:	fa5f f888 	uxtb.w	r8, r8
 8004aec:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004af0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004af2:	d824      	bhi.n	8004b3e <_printf_float+0x172>
 8004af4:	3901      	subs	r1, #1
 8004af6:	4642      	mov	r2, r8
 8004af8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004afc:	910d      	str	r1, [sp, #52]	; 0x34
 8004afe:	f7ff ff2f 	bl	8004960 <__exponent>
 8004b02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b04:	4681      	mov	r9, r0
 8004b06:	1813      	adds	r3, r2, r0
 8004b08:	2a01      	cmp	r2, #1
 8004b0a:	6123      	str	r3, [r4, #16]
 8004b0c:	dc02      	bgt.n	8004b14 <_printf_float+0x148>
 8004b0e:	6822      	ldr	r2, [r4, #0]
 8004b10:	07d1      	lsls	r1, r2, #31
 8004b12:	d501      	bpl.n	8004b18 <_printf_float+0x14c>
 8004b14:	3301      	adds	r3, #1
 8004b16:	6123      	str	r3, [r4, #16]
 8004b18:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0a2      	beq.n	8004a66 <_printf_float+0x9a>
 8004b20:	232d      	movs	r3, #45	; 0x2d
 8004b22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b26:	e79e      	b.n	8004a66 <_printf_float+0x9a>
 8004b28:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004b2c:	f000 816e 	beq.w	8004e0c <_printf_float+0x440>
 8004b30:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004b34:	d1b9      	bne.n	8004aaa <_printf_float+0xde>
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1b7      	bne.n	8004aaa <_printf_float+0xde>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e7b4      	b.n	8004aa8 <_printf_float+0xdc>
 8004b3e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004b42:	d119      	bne.n	8004b78 <_printf_float+0x1ac>
 8004b44:	2900      	cmp	r1, #0
 8004b46:	6863      	ldr	r3, [r4, #4]
 8004b48:	dd0c      	ble.n	8004b64 <_printf_float+0x198>
 8004b4a:	6121      	str	r1, [r4, #16]
 8004b4c:	b913      	cbnz	r3, 8004b54 <_printf_float+0x188>
 8004b4e:	6822      	ldr	r2, [r4, #0]
 8004b50:	07d2      	lsls	r2, r2, #31
 8004b52:	d502      	bpl.n	8004b5a <_printf_float+0x18e>
 8004b54:	3301      	adds	r3, #1
 8004b56:	440b      	add	r3, r1
 8004b58:	6123      	str	r3, [r4, #16]
 8004b5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b5c:	f04f 0900 	mov.w	r9, #0
 8004b60:	65a3      	str	r3, [r4, #88]	; 0x58
 8004b62:	e7d9      	b.n	8004b18 <_printf_float+0x14c>
 8004b64:	b913      	cbnz	r3, 8004b6c <_printf_float+0x1a0>
 8004b66:	6822      	ldr	r2, [r4, #0]
 8004b68:	07d0      	lsls	r0, r2, #31
 8004b6a:	d501      	bpl.n	8004b70 <_printf_float+0x1a4>
 8004b6c:	3302      	adds	r3, #2
 8004b6e:	e7f3      	b.n	8004b58 <_printf_float+0x18c>
 8004b70:	2301      	movs	r3, #1
 8004b72:	e7f1      	b.n	8004b58 <_printf_float+0x18c>
 8004b74:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004b78:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	db05      	blt.n	8004b8c <_printf_float+0x1c0>
 8004b80:	6822      	ldr	r2, [r4, #0]
 8004b82:	6123      	str	r3, [r4, #16]
 8004b84:	07d1      	lsls	r1, r2, #31
 8004b86:	d5e8      	bpl.n	8004b5a <_printf_float+0x18e>
 8004b88:	3301      	adds	r3, #1
 8004b8a:	e7e5      	b.n	8004b58 <_printf_float+0x18c>
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	bfcc      	ite	gt
 8004b90:	2301      	movgt	r3, #1
 8004b92:	f1c3 0302 	rsble	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	e7de      	b.n	8004b58 <_printf_float+0x18c>
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	055a      	lsls	r2, r3, #21
 8004b9e:	d407      	bmi.n	8004bb0 <_printf_float+0x1e4>
 8004ba0:	6923      	ldr	r3, [r4, #16]
 8004ba2:	463a      	mov	r2, r7
 8004ba4:	4659      	mov	r1, fp
 8004ba6:	4628      	mov	r0, r5
 8004ba8:	47b0      	blx	r6
 8004baa:	3001      	adds	r0, #1
 8004bac:	d129      	bne.n	8004c02 <_printf_float+0x236>
 8004bae:	e764      	b.n	8004a7a <_printf_float+0xae>
 8004bb0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004bb4:	f240 80d7 	bls.w	8004d66 <_printf_float+0x39a>
 8004bb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f7fb fef2 	bl	80009a8 <__aeabi_dcmpeq>
 8004bc4:	b388      	cbz	r0, 8004c2a <_printf_float+0x25e>
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	4a40      	ldr	r2, [pc, #256]	; (8004ccc <_printf_float+0x300>)
 8004bca:	4659      	mov	r1, fp
 8004bcc:	4628      	mov	r0, r5
 8004bce:	47b0      	blx	r6
 8004bd0:	3001      	adds	r0, #1
 8004bd2:	f43f af52 	beq.w	8004a7a <_printf_float+0xae>
 8004bd6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	db02      	blt.n	8004be4 <_printf_float+0x218>
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	07d8      	lsls	r0, r3, #31
 8004be2:	d50e      	bpl.n	8004c02 <_printf_float+0x236>
 8004be4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004be8:	4659      	mov	r1, fp
 8004bea:	4628      	mov	r0, r5
 8004bec:	47b0      	blx	r6
 8004bee:	3001      	adds	r0, #1
 8004bf0:	f43f af43 	beq.w	8004a7a <_printf_float+0xae>
 8004bf4:	2700      	movs	r7, #0
 8004bf6:	f104 081a 	add.w	r8, r4, #26
 8004bfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	42bb      	cmp	r3, r7
 8004c00:	dc09      	bgt.n	8004c16 <_printf_float+0x24a>
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	079f      	lsls	r7, r3, #30
 8004c06:	f100 80fd 	bmi.w	8004e04 <_printf_float+0x438>
 8004c0a:	68e0      	ldr	r0, [r4, #12]
 8004c0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c0e:	4298      	cmp	r0, r3
 8004c10:	bfb8      	it	lt
 8004c12:	4618      	movlt	r0, r3
 8004c14:	e733      	b.n	8004a7e <_printf_float+0xb2>
 8004c16:	2301      	movs	r3, #1
 8004c18:	4642      	mov	r2, r8
 8004c1a:	4659      	mov	r1, fp
 8004c1c:	4628      	mov	r0, r5
 8004c1e:	47b0      	blx	r6
 8004c20:	3001      	adds	r0, #1
 8004c22:	f43f af2a 	beq.w	8004a7a <_printf_float+0xae>
 8004c26:	3701      	adds	r7, #1
 8004c28:	e7e7      	b.n	8004bfa <_printf_float+0x22e>
 8004c2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	dc2b      	bgt.n	8004c88 <_printf_float+0x2bc>
 8004c30:	2301      	movs	r3, #1
 8004c32:	4a26      	ldr	r2, [pc, #152]	; (8004ccc <_printf_float+0x300>)
 8004c34:	4659      	mov	r1, fp
 8004c36:	4628      	mov	r0, r5
 8004c38:	47b0      	blx	r6
 8004c3a:	3001      	adds	r0, #1
 8004c3c:	f43f af1d 	beq.w	8004a7a <_printf_float+0xae>
 8004c40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c42:	b923      	cbnz	r3, 8004c4e <_printf_float+0x282>
 8004c44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c46:	b913      	cbnz	r3, 8004c4e <_printf_float+0x282>
 8004c48:	6823      	ldr	r3, [r4, #0]
 8004c4a:	07d9      	lsls	r1, r3, #31
 8004c4c:	d5d9      	bpl.n	8004c02 <_printf_float+0x236>
 8004c4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c52:	4659      	mov	r1, fp
 8004c54:	4628      	mov	r0, r5
 8004c56:	47b0      	blx	r6
 8004c58:	3001      	adds	r0, #1
 8004c5a:	f43f af0e 	beq.w	8004a7a <_printf_float+0xae>
 8004c5e:	f04f 0800 	mov.w	r8, #0
 8004c62:	f104 091a 	add.w	r9, r4, #26
 8004c66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c68:	425b      	negs	r3, r3
 8004c6a:	4543      	cmp	r3, r8
 8004c6c:	dc01      	bgt.n	8004c72 <_printf_float+0x2a6>
 8004c6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c70:	e797      	b.n	8004ba2 <_printf_float+0x1d6>
 8004c72:	2301      	movs	r3, #1
 8004c74:	464a      	mov	r2, r9
 8004c76:	4659      	mov	r1, fp
 8004c78:	4628      	mov	r0, r5
 8004c7a:	47b0      	blx	r6
 8004c7c:	3001      	adds	r0, #1
 8004c7e:	f43f aefc 	beq.w	8004a7a <_printf_float+0xae>
 8004c82:	f108 0801 	add.w	r8, r8, #1
 8004c86:	e7ee      	b.n	8004c66 <_printf_float+0x29a>
 8004c88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	bfa8      	it	ge
 8004c90:	461a      	movge	r2, r3
 8004c92:	2a00      	cmp	r2, #0
 8004c94:	4690      	mov	r8, r2
 8004c96:	dd07      	ble.n	8004ca8 <_printf_float+0x2dc>
 8004c98:	4613      	mov	r3, r2
 8004c9a:	4659      	mov	r1, fp
 8004c9c:	463a      	mov	r2, r7
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	47b0      	blx	r6
 8004ca2:	3001      	adds	r0, #1
 8004ca4:	f43f aee9 	beq.w	8004a7a <_printf_float+0xae>
 8004ca8:	f104 031a 	add.w	r3, r4, #26
 8004cac:	f04f 0a00 	mov.w	sl, #0
 8004cb0:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004cb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cb6:	e015      	b.n	8004ce4 <_printf_float+0x318>
 8004cb8:	7fefffff 	.word	0x7fefffff
 8004cbc:	08006b9c 	.word	0x08006b9c
 8004cc0:	08006b98 	.word	0x08006b98
 8004cc4:	08006ba4 	.word	0x08006ba4
 8004cc8:	08006ba0 	.word	0x08006ba0
 8004ccc:	08006ba8 	.word	0x08006ba8
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004cd4:	4659      	mov	r1, fp
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	47b0      	blx	r6
 8004cda:	3001      	adds	r0, #1
 8004cdc:	f43f aecd 	beq.w	8004a7a <_printf_float+0xae>
 8004ce0:	f10a 0a01 	add.w	sl, sl, #1
 8004ce4:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004ce8:	eba9 0308 	sub.w	r3, r9, r8
 8004cec:	4553      	cmp	r3, sl
 8004cee:	dcef      	bgt.n	8004cd0 <_printf_float+0x304>
 8004cf0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	444f      	add	r7, r9
 8004cf8:	db14      	blt.n	8004d24 <_printf_float+0x358>
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	07da      	lsls	r2, r3, #31
 8004cfe:	d411      	bmi.n	8004d24 <_printf_float+0x358>
 8004d00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d02:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004d04:	eba3 0209 	sub.w	r2, r3, r9
 8004d08:	eba3 0901 	sub.w	r9, r3, r1
 8004d0c:	4591      	cmp	r9, r2
 8004d0e:	bfa8      	it	ge
 8004d10:	4691      	movge	r9, r2
 8004d12:	f1b9 0f00 	cmp.w	r9, #0
 8004d16:	dc0d      	bgt.n	8004d34 <_printf_float+0x368>
 8004d18:	2700      	movs	r7, #0
 8004d1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d1e:	f104 081a 	add.w	r8, r4, #26
 8004d22:	e018      	b.n	8004d56 <_printf_float+0x38a>
 8004d24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d28:	4659      	mov	r1, fp
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	47b0      	blx	r6
 8004d2e:	3001      	adds	r0, #1
 8004d30:	d1e6      	bne.n	8004d00 <_printf_float+0x334>
 8004d32:	e6a2      	b.n	8004a7a <_printf_float+0xae>
 8004d34:	464b      	mov	r3, r9
 8004d36:	463a      	mov	r2, r7
 8004d38:	4659      	mov	r1, fp
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	47b0      	blx	r6
 8004d3e:	3001      	adds	r0, #1
 8004d40:	d1ea      	bne.n	8004d18 <_printf_float+0x34c>
 8004d42:	e69a      	b.n	8004a7a <_printf_float+0xae>
 8004d44:	2301      	movs	r3, #1
 8004d46:	4642      	mov	r2, r8
 8004d48:	4659      	mov	r1, fp
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	47b0      	blx	r6
 8004d4e:	3001      	adds	r0, #1
 8004d50:	f43f ae93 	beq.w	8004a7a <_printf_float+0xae>
 8004d54:	3701      	adds	r7, #1
 8004d56:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d5a:	1a9b      	subs	r3, r3, r2
 8004d5c:	eba3 0309 	sub.w	r3, r3, r9
 8004d60:	42bb      	cmp	r3, r7
 8004d62:	dcef      	bgt.n	8004d44 <_printf_float+0x378>
 8004d64:	e74d      	b.n	8004c02 <_printf_float+0x236>
 8004d66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d68:	2a01      	cmp	r2, #1
 8004d6a:	dc01      	bgt.n	8004d70 <_printf_float+0x3a4>
 8004d6c:	07db      	lsls	r3, r3, #31
 8004d6e:	d538      	bpl.n	8004de2 <_printf_float+0x416>
 8004d70:	2301      	movs	r3, #1
 8004d72:	463a      	mov	r2, r7
 8004d74:	4659      	mov	r1, fp
 8004d76:	4628      	mov	r0, r5
 8004d78:	47b0      	blx	r6
 8004d7a:	3001      	adds	r0, #1
 8004d7c:	f43f ae7d 	beq.w	8004a7a <_printf_float+0xae>
 8004d80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d84:	4659      	mov	r1, fp
 8004d86:	4628      	mov	r0, r5
 8004d88:	47b0      	blx	r6
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	f107 0701 	add.w	r7, r7, #1
 8004d90:	f43f ae73 	beq.w	8004a7a <_printf_float+0xae>
 8004d94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f103 38ff 	add.w	r8, r3, #4294967295
 8004da0:	2300      	movs	r3, #0
 8004da2:	f7fb fe01 	bl	80009a8 <__aeabi_dcmpeq>
 8004da6:	b9c0      	cbnz	r0, 8004dda <_printf_float+0x40e>
 8004da8:	4643      	mov	r3, r8
 8004daa:	463a      	mov	r2, r7
 8004dac:	4659      	mov	r1, fp
 8004dae:	4628      	mov	r0, r5
 8004db0:	47b0      	blx	r6
 8004db2:	3001      	adds	r0, #1
 8004db4:	d10d      	bne.n	8004dd2 <_printf_float+0x406>
 8004db6:	e660      	b.n	8004a7a <_printf_float+0xae>
 8004db8:	2301      	movs	r3, #1
 8004dba:	4642      	mov	r2, r8
 8004dbc:	4659      	mov	r1, fp
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	47b0      	blx	r6
 8004dc2:	3001      	adds	r0, #1
 8004dc4:	f43f ae59 	beq.w	8004a7a <_printf_float+0xae>
 8004dc8:	3701      	adds	r7, #1
 8004dca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	42bb      	cmp	r3, r7
 8004dd0:	dcf2      	bgt.n	8004db8 <_printf_float+0x3ec>
 8004dd2:	464b      	mov	r3, r9
 8004dd4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004dd8:	e6e4      	b.n	8004ba4 <_printf_float+0x1d8>
 8004dda:	2700      	movs	r7, #0
 8004ddc:	f104 081a 	add.w	r8, r4, #26
 8004de0:	e7f3      	b.n	8004dca <_printf_float+0x3fe>
 8004de2:	2301      	movs	r3, #1
 8004de4:	e7e1      	b.n	8004daa <_printf_float+0x3de>
 8004de6:	2301      	movs	r3, #1
 8004de8:	4642      	mov	r2, r8
 8004dea:	4659      	mov	r1, fp
 8004dec:	4628      	mov	r0, r5
 8004dee:	47b0      	blx	r6
 8004df0:	3001      	adds	r0, #1
 8004df2:	f43f ae42 	beq.w	8004a7a <_printf_float+0xae>
 8004df6:	3701      	adds	r7, #1
 8004df8:	68e3      	ldr	r3, [r4, #12]
 8004dfa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004dfc:	1a9b      	subs	r3, r3, r2
 8004dfe:	42bb      	cmp	r3, r7
 8004e00:	dcf1      	bgt.n	8004de6 <_printf_float+0x41a>
 8004e02:	e702      	b.n	8004c0a <_printf_float+0x23e>
 8004e04:	2700      	movs	r7, #0
 8004e06:	f104 0819 	add.w	r8, r4, #25
 8004e0a:	e7f5      	b.n	8004df8 <_printf_float+0x42c>
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f43f ae94 	beq.w	8004b3a <_printf_float+0x16e>
 8004e12:	f04f 0c00 	mov.w	ip, #0
 8004e16:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004e1a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004e1e:	6022      	str	r2, [r4, #0]
 8004e20:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004e24:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	463a      	mov	r2, r7
 8004e2c:	464b      	mov	r3, r9
 8004e2e:	4628      	mov	r0, r5
 8004e30:	f7ff fd3a 	bl	80048a8 <__cvt>
 8004e34:	4607      	mov	r7, r0
 8004e36:	e64f      	b.n	8004ad8 <_printf_float+0x10c>

08004e38 <_printf_common>:
 8004e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e3c:	4691      	mov	r9, r2
 8004e3e:	461f      	mov	r7, r3
 8004e40:	688a      	ldr	r2, [r1, #8]
 8004e42:	690b      	ldr	r3, [r1, #16]
 8004e44:	4606      	mov	r6, r0
 8004e46:	4293      	cmp	r3, r2
 8004e48:	bfb8      	it	lt
 8004e4a:	4613      	movlt	r3, r2
 8004e4c:	f8c9 3000 	str.w	r3, [r9]
 8004e50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e54:	460c      	mov	r4, r1
 8004e56:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e5a:	b112      	cbz	r2, 8004e62 <_printf_common+0x2a>
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	f8c9 3000 	str.w	r3, [r9]
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	0699      	lsls	r1, r3, #26
 8004e66:	bf42      	ittt	mi
 8004e68:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004e6c:	3302      	addmi	r3, #2
 8004e6e:	f8c9 3000 	strmi.w	r3, [r9]
 8004e72:	6825      	ldr	r5, [r4, #0]
 8004e74:	f015 0506 	ands.w	r5, r5, #6
 8004e78:	d107      	bne.n	8004e8a <_printf_common+0x52>
 8004e7a:	f104 0a19 	add.w	sl, r4, #25
 8004e7e:	68e3      	ldr	r3, [r4, #12]
 8004e80:	f8d9 2000 	ldr.w	r2, [r9]
 8004e84:	1a9b      	subs	r3, r3, r2
 8004e86:	42ab      	cmp	r3, r5
 8004e88:	dc29      	bgt.n	8004ede <_printf_common+0xa6>
 8004e8a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004e8e:	6822      	ldr	r2, [r4, #0]
 8004e90:	3300      	adds	r3, #0
 8004e92:	bf18      	it	ne
 8004e94:	2301      	movne	r3, #1
 8004e96:	0692      	lsls	r2, r2, #26
 8004e98:	d42e      	bmi.n	8004ef8 <_printf_common+0xc0>
 8004e9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e9e:	4639      	mov	r1, r7
 8004ea0:	4630      	mov	r0, r6
 8004ea2:	47c0      	blx	r8
 8004ea4:	3001      	adds	r0, #1
 8004ea6:	d021      	beq.n	8004eec <_printf_common+0xb4>
 8004ea8:	6823      	ldr	r3, [r4, #0]
 8004eaa:	68e5      	ldr	r5, [r4, #12]
 8004eac:	f003 0306 	and.w	r3, r3, #6
 8004eb0:	2b04      	cmp	r3, #4
 8004eb2:	bf18      	it	ne
 8004eb4:	2500      	movne	r5, #0
 8004eb6:	f8d9 2000 	ldr.w	r2, [r9]
 8004eba:	f04f 0900 	mov.w	r9, #0
 8004ebe:	bf08      	it	eq
 8004ec0:	1aad      	subeq	r5, r5, r2
 8004ec2:	68a3      	ldr	r3, [r4, #8]
 8004ec4:	6922      	ldr	r2, [r4, #16]
 8004ec6:	bf08      	it	eq
 8004ec8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	bfc4      	itt	gt
 8004ed0:	1a9b      	subgt	r3, r3, r2
 8004ed2:	18ed      	addgt	r5, r5, r3
 8004ed4:	341a      	adds	r4, #26
 8004ed6:	454d      	cmp	r5, r9
 8004ed8:	d11a      	bne.n	8004f10 <_printf_common+0xd8>
 8004eda:	2000      	movs	r0, #0
 8004edc:	e008      	b.n	8004ef0 <_printf_common+0xb8>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	4652      	mov	r2, sl
 8004ee2:	4639      	mov	r1, r7
 8004ee4:	4630      	mov	r0, r6
 8004ee6:	47c0      	blx	r8
 8004ee8:	3001      	adds	r0, #1
 8004eea:	d103      	bne.n	8004ef4 <_printf_common+0xbc>
 8004eec:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ef4:	3501      	adds	r5, #1
 8004ef6:	e7c2      	b.n	8004e7e <_printf_common+0x46>
 8004ef8:	2030      	movs	r0, #48	; 0x30
 8004efa:	18e1      	adds	r1, r4, r3
 8004efc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f06:	4422      	add	r2, r4
 8004f08:	3302      	adds	r3, #2
 8004f0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f0e:	e7c4      	b.n	8004e9a <_printf_common+0x62>
 8004f10:	2301      	movs	r3, #1
 8004f12:	4622      	mov	r2, r4
 8004f14:	4639      	mov	r1, r7
 8004f16:	4630      	mov	r0, r6
 8004f18:	47c0      	blx	r8
 8004f1a:	3001      	adds	r0, #1
 8004f1c:	d0e6      	beq.n	8004eec <_printf_common+0xb4>
 8004f1e:	f109 0901 	add.w	r9, r9, #1
 8004f22:	e7d8      	b.n	8004ed6 <_printf_common+0x9e>

08004f24 <_printf_i>:
 8004f24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f28:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004f2c:	460c      	mov	r4, r1
 8004f2e:	7e09      	ldrb	r1, [r1, #24]
 8004f30:	b085      	sub	sp, #20
 8004f32:	296e      	cmp	r1, #110	; 0x6e
 8004f34:	4617      	mov	r7, r2
 8004f36:	4606      	mov	r6, r0
 8004f38:	4698      	mov	r8, r3
 8004f3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f3c:	f000 80b3 	beq.w	80050a6 <_printf_i+0x182>
 8004f40:	d822      	bhi.n	8004f88 <_printf_i+0x64>
 8004f42:	2963      	cmp	r1, #99	; 0x63
 8004f44:	d036      	beq.n	8004fb4 <_printf_i+0x90>
 8004f46:	d80a      	bhi.n	8004f5e <_printf_i+0x3a>
 8004f48:	2900      	cmp	r1, #0
 8004f4a:	f000 80b9 	beq.w	80050c0 <_printf_i+0x19c>
 8004f4e:	2958      	cmp	r1, #88	; 0x58
 8004f50:	f000 8083 	beq.w	800505a <_printf_i+0x136>
 8004f54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f58:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004f5c:	e032      	b.n	8004fc4 <_printf_i+0xa0>
 8004f5e:	2964      	cmp	r1, #100	; 0x64
 8004f60:	d001      	beq.n	8004f66 <_printf_i+0x42>
 8004f62:	2969      	cmp	r1, #105	; 0x69
 8004f64:	d1f6      	bne.n	8004f54 <_printf_i+0x30>
 8004f66:	6820      	ldr	r0, [r4, #0]
 8004f68:	6813      	ldr	r3, [r2, #0]
 8004f6a:	0605      	lsls	r5, r0, #24
 8004f6c:	f103 0104 	add.w	r1, r3, #4
 8004f70:	d52a      	bpl.n	8004fc8 <_printf_i+0xa4>
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6011      	str	r1, [r2, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	da03      	bge.n	8004f82 <_printf_i+0x5e>
 8004f7a:	222d      	movs	r2, #45	; 0x2d
 8004f7c:	425b      	negs	r3, r3
 8004f7e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004f82:	486f      	ldr	r0, [pc, #444]	; (8005140 <_printf_i+0x21c>)
 8004f84:	220a      	movs	r2, #10
 8004f86:	e039      	b.n	8004ffc <_printf_i+0xd8>
 8004f88:	2973      	cmp	r1, #115	; 0x73
 8004f8a:	f000 809d 	beq.w	80050c8 <_printf_i+0x1a4>
 8004f8e:	d808      	bhi.n	8004fa2 <_printf_i+0x7e>
 8004f90:	296f      	cmp	r1, #111	; 0x6f
 8004f92:	d020      	beq.n	8004fd6 <_printf_i+0xb2>
 8004f94:	2970      	cmp	r1, #112	; 0x70
 8004f96:	d1dd      	bne.n	8004f54 <_printf_i+0x30>
 8004f98:	6823      	ldr	r3, [r4, #0]
 8004f9a:	f043 0320 	orr.w	r3, r3, #32
 8004f9e:	6023      	str	r3, [r4, #0]
 8004fa0:	e003      	b.n	8004faa <_printf_i+0x86>
 8004fa2:	2975      	cmp	r1, #117	; 0x75
 8004fa4:	d017      	beq.n	8004fd6 <_printf_i+0xb2>
 8004fa6:	2978      	cmp	r1, #120	; 0x78
 8004fa8:	d1d4      	bne.n	8004f54 <_printf_i+0x30>
 8004faa:	2378      	movs	r3, #120	; 0x78
 8004fac:	4865      	ldr	r0, [pc, #404]	; (8005144 <_printf_i+0x220>)
 8004fae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fb2:	e055      	b.n	8005060 <_printf_i+0x13c>
 8004fb4:	6813      	ldr	r3, [r2, #0]
 8004fb6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fba:	1d19      	adds	r1, r3, #4
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	6011      	str	r1, [r2, #0]
 8004fc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e08c      	b.n	80050e2 <_printf_i+0x1be>
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004fce:	6011      	str	r1, [r2, #0]
 8004fd0:	bf18      	it	ne
 8004fd2:	b21b      	sxthne	r3, r3
 8004fd4:	e7cf      	b.n	8004f76 <_printf_i+0x52>
 8004fd6:	6813      	ldr	r3, [r2, #0]
 8004fd8:	6825      	ldr	r5, [r4, #0]
 8004fda:	1d18      	adds	r0, r3, #4
 8004fdc:	6010      	str	r0, [r2, #0]
 8004fde:	0628      	lsls	r0, r5, #24
 8004fe0:	d501      	bpl.n	8004fe6 <_printf_i+0xc2>
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	e002      	b.n	8004fec <_printf_i+0xc8>
 8004fe6:	0668      	lsls	r0, r5, #25
 8004fe8:	d5fb      	bpl.n	8004fe2 <_printf_i+0xbe>
 8004fea:	881b      	ldrh	r3, [r3, #0]
 8004fec:	296f      	cmp	r1, #111	; 0x6f
 8004fee:	bf14      	ite	ne
 8004ff0:	220a      	movne	r2, #10
 8004ff2:	2208      	moveq	r2, #8
 8004ff4:	4852      	ldr	r0, [pc, #328]	; (8005140 <_printf_i+0x21c>)
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ffc:	6865      	ldr	r5, [r4, #4]
 8004ffe:	2d00      	cmp	r5, #0
 8005000:	60a5      	str	r5, [r4, #8]
 8005002:	f2c0 8095 	blt.w	8005130 <_printf_i+0x20c>
 8005006:	6821      	ldr	r1, [r4, #0]
 8005008:	f021 0104 	bic.w	r1, r1, #4
 800500c:	6021      	str	r1, [r4, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d13d      	bne.n	800508e <_printf_i+0x16a>
 8005012:	2d00      	cmp	r5, #0
 8005014:	f040 808e 	bne.w	8005134 <_printf_i+0x210>
 8005018:	4665      	mov	r5, ip
 800501a:	2a08      	cmp	r2, #8
 800501c:	d10b      	bne.n	8005036 <_printf_i+0x112>
 800501e:	6823      	ldr	r3, [r4, #0]
 8005020:	07db      	lsls	r3, r3, #31
 8005022:	d508      	bpl.n	8005036 <_printf_i+0x112>
 8005024:	6923      	ldr	r3, [r4, #16]
 8005026:	6862      	ldr	r2, [r4, #4]
 8005028:	429a      	cmp	r2, r3
 800502a:	bfde      	ittt	le
 800502c:	2330      	movle	r3, #48	; 0x30
 800502e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005032:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005036:	ebac 0305 	sub.w	r3, ip, r5
 800503a:	6123      	str	r3, [r4, #16]
 800503c:	f8cd 8000 	str.w	r8, [sp]
 8005040:	463b      	mov	r3, r7
 8005042:	aa03      	add	r2, sp, #12
 8005044:	4621      	mov	r1, r4
 8005046:	4630      	mov	r0, r6
 8005048:	f7ff fef6 	bl	8004e38 <_printf_common>
 800504c:	3001      	adds	r0, #1
 800504e:	d14d      	bne.n	80050ec <_printf_i+0x1c8>
 8005050:	f04f 30ff 	mov.w	r0, #4294967295
 8005054:	b005      	add	sp, #20
 8005056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800505a:	4839      	ldr	r0, [pc, #228]	; (8005140 <_printf_i+0x21c>)
 800505c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005060:	6813      	ldr	r3, [r2, #0]
 8005062:	6821      	ldr	r1, [r4, #0]
 8005064:	1d1d      	adds	r5, r3, #4
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6015      	str	r5, [r2, #0]
 800506a:	060a      	lsls	r2, r1, #24
 800506c:	d50b      	bpl.n	8005086 <_printf_i+0x162>
 800506e:	07ca      	lsls	r2, r1, #31
 8005070:	bf44      	itt	mi
 8005072:	f041 0120 	orrmi.w	r1, r1, #32
 8005076:	6021      	strmi	r1, [r4, #0]
 8005078:	b91b      	cbnz	r3, 8005082 <_printf_i+0x15e>
 800507a:	6822      	ldr	r2, [r4, #0]
 800507c:	f022 0220 	bic.w	r2, r2, #32
 8005080:	6022      	str	r2, [r4, #0]
 8005082:	2210      	movs	r2, #16
 8005084:	e7b7      	b.n	8004ff6 <_printf_i+0xd2>
 8005086:	064d      	lsls	r5, r1, #25
 8005088:	bf48      	it	mi
 800508a:	b29b      	uxthmi	r3, r3
 800508c:	e7ef      	b.n	800506e <_printf_i+0x14a>
 800508e:	4665      	mov	r5, ip
 8005090:	fbb3 f1f2 	udiv	r1, r3, r2
 8005094:	fb02 3311 	mls	r3, r2, r1, r3
 8005098:	5cc3      	ldrb	r3, [r0, r3]
 800509a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800509e:	460b      	mov	r3, r1
 80050a0:	2900      	cmp	r1, #0
 80050a2:	d1f5      	bne.n	8005090 <_printf_i+0x16c>
 80050a4:	e7b9      	b.n	800501a <_printf_i+0xf6>
 80050a6:	6813      	ldr	r3, [r2, #0]
 80050a8:	6825      	ldr	r5, [r4, #0]
 80050aa:	1d18      	adds	r0, r3, #4
 80050ac:	6961      	ldr	r1, [r4, #20]
 80050ae:	6010      	str	r0, [r2, #0]
 80050b0:	0628      	lsls	r0, r5, #24
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	d501      	bpl.n	80050ba <_printf_i+0x196>
 80050b6:	6019      	str	r1, [r3, #0]
 80050b8:	e002      	b.n	80050c0 <_printf_i+0x19c>
 80050ba:	066a      	lsls	r2, r5, #25
 80050bc:	d5fb      	bpl.n	80050b6 <_printf_i+0x192>
 80050be:	8019      	strh	r1, [r3, #0]
 80050c0:	2300      	movs	r3, #0
 80050c2:	4665      	mov	r5, ip
 80050c4:	6123      	str	r3, [r4, #16]
 80050c6:	e7b9      	b.n	800503c <_printf_i+0x118>
 80050c8:	6813      	ldr	r3, [r2, #0]
 80050ca:	1d19      	adds	r1, r3, #4
 80050cc:	6011      	str	r1, [r2, #0]
 80050ce:	681d      	ldr	r5, [r3, #0]
 80050d0:	6862      	ldr	r2, [r4, #4]
 80050d2:	2100      	movs	r1, #0
 80050d4:	4628      	mov	r0, r5
 80050d6:	f000 ff05 	bl	8005ee4 <memchr>
 80050da:	b108      	cbz	r0, 80050e0 <_printf_i+0x1bc>
 80050dc:	1b40      	subs	r0, r0, r5
 80050de:	6060      	str	r0, [r4, #4]
 80050e0:	6863      	ldr	r3, [r4, #4]
 80050e2:	6123      	str	r3, [r4, #16]
 80050e4:	2300      	movs	r3, #0
 80050e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050ea:	e7a7      	b.n	800503c <_printf_i+0x118>
 80050ec:	6923      	ldr	r3, [r4, #16]
 80050ee:	462a      	mov	r2, r5
 80050f0:	4639      	mov	r1, r7
 80050f2:	4630      	mov	r0, r6
 80050f4:	47c0      	blx	r8
 80050f6:	3001      	adds	r0, #1
 80050f8:	d0aa      	beq.n	8005050 <_printf_i+0x12c>
 80050fa:	6823      	ldr	r3, [r4, #0]
 80050fc:	079b      	lsls	r3, r3, #30
 80050fe:	d413      	bmi.n	8005128 <_printf_i+0x204>
 8005100:	68e0      	ldr	r0, [r4, #12]
 8005102:	9b03      	ldr	r3, [sp, #12]
 8005104:	4298      	cmp	r0, r3
 8005106:	bfb8      	it	lt
 8005108:	4618      	movlt	r0, r3
 800510a:	e7a3      	b.n	8005054 <_printf_i+0x130>
 800510c:	2301      	movs	r3, #1
 800510e:	464a      	mov	r2, r9
 8005110:	4639      	mov	r1, r7
 8005112:	4630      	mov	r0, r6
 8005114:	47c0      	blx	r8
 8005116:	3001      	adds	r0, #1
 8005118:	d09a      	beq.n	8005050 <_printf_i+0x12c>
 800511a:	3501      	adds	r5, #1
 800511c:	68e3      	ldr	r3, [r4, #12]
 800511e:	9a03      	ldr	r2, [sp, #12]
 8005120:	1a9b      	subs	r3, r3, r2
 8005122:	42ab      	cmp	r3, r5
 8005124:	dcf2      	bgt.n	800510c <_printf_i+0x1e8>
 8005126:	e7eb      	b.n	8005100 <_printf_i+0x1dc>
 8005128:	2500      	movs	r5, #0
 800512a:	f104 0919 	add.w	r9, r4, #25
 800512e:	e7f5      	b.n	800511c <_printf_i+0x1f8>
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1ac      	bne.n	800508e <_printf_i+0x16a>
 8005134:	7803      	ldrb	r3, [r0, #0]
 8005136:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800513a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800513e:	e76c      	b.n	800501a <_printf_i+0xf6>
 8005140:	08006baa 	.word	0x08006baa
 8005144:	08006bbb 	.word	0x08006bbb

08005148 <_sbrk_r>:
 8005148:	b538      	push	{r3, r4, r5, lr}
 800514a:	2300      	movs	r3, #0
 800514c:	4c05      	ldr	r4, [pc, #20]	; (8005164 <_sbrk_r+0x1c>)
 800514e:	4605      	mov	r5, r0
 8005150:	4608      	mov	r0, r1
 8005152:	6023      	str	r3, [r4, #0]
 8005154:	f7fc ff68 	bl	8002028 <_sbrk>
 8005158:	1c43      	adds	r3, r0, #1
 800515a:	d102      	bne.n	8005162 <_sbrk_r+0x1a>
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	b103      	cbz	r3, 8005162 <_sbrk_r+0x1a>
 8005160:	602b      	str	r3, [r5, #0]
 8005162:	bd38      	pop	{r3, r4, r5, pc}
 8005164:	2000135c 	.word	0x2000135c

08005168 <sniprintf>:
 8005168:	b40c      	push	{r2, r3}
 800516a:	b530      	push	{r4, r5, lr}
 800516c:	4b17      	ldr	r3, [pc, #92]	; (80051cc <sniprintf+0x64>)
 800516e:	1e0c      	subs	r4, r1, #0
 8005170:	b09d      	sub	sp, #116	; 0x74
 8005172:	681d      	ldr	r5, [r3, #0]
 8005174:	da08      	bge.n	8005188 <sniprintf+0x20>
 8005176:	238b      	movs	r3, #139	; 0x8b
 8005178:	f04f 30ff 	mov.w	r0, #4294967295
 800517c:	602b      	str	r3, [r5, #0]
 800517e:	b01d      	add	sp, #116	; 0x74
 8005180:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005184:	b002      	add	sp, #8
 8005186:	4770      	bx	lr
 8005188:	f44f 7302 	mov.w	r3, #520	; 0x208
 800518c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005190:	bf0c      	ite	eq
 8005192:	4623      	moveq	r3, r4
 8005194:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005198:	9304      	str	r3, [sp, #16]
 800519a:	9307      	str	r3, [sp, #28]
 800519c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051a0:	9002      	str	r0, [sp, #8]
 80051a2:	9006      	str	r0, [sp, #24]
 80051a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80051a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80051aa:	ab21      	add	r3, sp, #132	; 0x84
 80051ac:	a902      	add	r1, sp, #8
 80051ae:	4628      	mov	r0, r5
 80051b0:	9301      	str	r3, [sp, #4]
 80051b2:	f001 f9f7 	bl	80065a4 <_svfiprintf_r>
 80051b6:	1c43      	adds	r3, r0, #1
 80051b8:	bfbc      	itt	lt
 80051ba:	238b      	movlt	r3, #139	; 0x8b
 80051bc:	602b      	strlt	r3, [r5, #0]
 80051be:	2c00      	cmp	r4, #0
 80051c0:	d0dd      	beq.n	800517e <sniprintf+0x16>
 80051c2:	2200      	movs	r2, #0
 80051c4:	9b02      	ldr	r3, [sp, #8]
 80051c6:	701a      	strb	r2, [r3, #0]
 80051c8:	e7d9      	b.n	800517e <sniprintf+0x16>
 80051ca:	bf00      	nop
 80051cc:	20000064 	.word	0x20000064

080051d0 <siprintf>:
 80051d0:	b40e      	push	{r1, r2, r3}
 80051d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80051d6:	b500      	push	{lr}
 80051d8:	b09c      	sub	sp, #112	; 0x70
 80051da:	ab1d      	add	r3, sp, #116	; 0x74
 80051dc:	9002      	str	r0, [sp, #8]
 80051de:	9006      	str	r0, [sp, #24]
 80051e0:	9107      	str	r1, [sp, #28]
 80051e2:	9104      	str	r1, [sp, #16]
 80051e4:	4808      	ldr	r0, [pc, #32]	; (8005208 <siprintf+0x38>)
 80051e6:	4909      	ldr	r1, [pc, #36]	; (800520c <siprintf+0x3c>)
 80051e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80051ec:	9105      	str	r1, [sp, #20]
 80051ee:	6800      	ldr	r0, [r0, #0]
 80051f0:	a902      	add	r1, sp, #8
 80051f2:	9301      	str	r3, [sp, #4]
 80051f4:	f001 f9d6 	bl	80065a4 <_svfiprintf_r>
 80051f8:	2200      	movs	r2, #0
 80051fa:	9b02      	ldr	r3, [sp, #8]
 80051fc:	701a      	strb	r2, [r3, #0]
 80051fe:	b01c      	add	sp, #112	; 0x70
 8005200:	f85d eb04 	ldr.w	lr, [sp], #4
 8005204:	b003      	add	sp, #12
 8005206:	4770      	bx	lr
 8005208:	20000064 	.word	0x20000064
 800520c:	ffff0208 	.word	0xffff0208

08005210 <strcat>:
 8005210:	4603      	mov	r3, r0
 8005212:	b510      	push	{r4, lr}
 8005214:	781a      	ldrb	r2, [r3, #0]
 8005216:	1c5c      	adds	r4, r3, #1
 8005218:	b93a      	cbnz	r2, 800522a <strcat+0x1a>
 800521a:	3b01      	subs	r3, #1
 800521c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005220:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005224:	2a00      	cmp	r2, #0
 8005226:	d1f9      	bne.n	800521c <strcat+0xc>
 8005228:	bd10      	pop	{r4, pc}
 800522a:	4623      	mov	r3, r4
 800522c:	e7f2      	b.n	8005214 <strcat+0x4>

0800522e <strcpy>:
 800522e:	4603      	mov	r3, r0
 8005230:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005234:	f803 2b01 	strb.w	r2, [r3], #1
 8005238:	2a00      	cmp	r2, #0
 800523a:	d1f9      	bne.n	8005230 <strcpy+0x2>
 800523c:	4770      	bx	lr

0800523e <quorem>:
 800523e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005242:	6903      	ldr	r3, [r0, #16]
 8005244:	690c      	ldr	r4, [r1, #16]
 8005246:	4680      	mov	r8, r0
 8005248:	42a3      	cmp	r3, r4
 800524a:	f2c0 8084 	blt.w	8005356 <quorem+0x118>
 800524e:	3c01      	subs	r4, #1
 8005250:	f101 0714 	add.w	r7, r1, #20
 8005254:	f100 0614 	add.w	r6, r0, #20
 8005258:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800525c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005260:	3501      	adds	r5, #1
 8005262:	fbb0 f5f5 	udiv	r5, r0, r5
 8005266:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800526a:	eb06 030c 	add.w	r3, r6, ip
 800526e:	eb07 090c 	add.w	r9, r7, ip
 8005272:	9301      	str	r3, [sp, #4]
 8005274:	b39d      	cbz	r5, 80052de <quorem+0xa0>
 8005276:	f04f 0a00 	mov.w	sl, #0
 800527a:	4638      	mov	r0, r7
 800527c:	46b6      	mov	lr, r6
 800527e:	46d3      	mov	fp, sl
 8005280:	f850 2b04 	ldr.w	r2, [r0], #4
 8005284:	b293      	uxth	r3, r2
 8005286:	fb05 a303 	mla	r3, r5, r3, sl
 800528a:	0c12      	lsrs	r2, r2, #16
 800528c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005290:	fb05 a202 	mla	r2, r5, r2, sl
 8005294:	b29b      	uxth	r3, r3
 8005296:	ebab 0303 	sub.w	r3, fp, r3
 800529a:	f8de b000 	ldr.w	fp, [lr]
 800529e:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80052a2:	fa1f fb8b 	uxth.w	fp, fp
 80052a6:	445b      	add	r3, fp
 80052a8:	fa1f fb82 	uxth.w	fp, r2
 80052ac:	f8de 2000 	ldr.w	r2, [lr]
 80052b0:	4581      	cmp	r9, r0
 80052b2:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80052b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052c0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80052c4:	f84e 3b04 	str.w	r3, [lr], #4
 80052c8:	d2da      	bcs.n	8005280 <quorem+0x42>
 80052ca:	f856 300c 	ldr.w	r3, [r6, ip]
 80052ce:	b933      	cbnz	r3, 80052de <quorem+0xa0>
 80052d0:	9b01      	ldr	r3, [sp, #4]
 80052d2:	3b04      	subs	r3, #4
 80052d4:	429e      	cmp	r6, r3
 80052d6:	461a      	mov	r2, r3
 80052d8:	d331      	bcc.n	800533e <quorem+0x100>
 80052da:	f8c8 4010 	str.w	r4, [r8, #16]
 80052de:	4640      	mov	r0, r8
 80052e0:	f001 f830 	bl	8006344 <__mcmp>
 80052e4:	2800      	cmp	r0, #0
 80052e6:	db26      	blt.n	8005336 <quorem+0xf8>
 80052e8:	4630      	mov	r0, r6
 80052ea:	f04f 0c00 	mov.w	ip, #0
 80052ee:	3501      	adds	r5, #1
 80052f0:	f857 1b04 	ldr.w	r1, [r7], #4
 80052f4:	f8d0 e000 	ldr.w	lr, [r0]
 80052f8:	b28b      	uxth	r3, r1
 80052fa:	ebac 0303 	sub.w	r3, ip, r3
 80052fe:	fa1f f28e 	uxth.w	r2, lr
 8005302:	4413      	add	r3, r2
 8005304:	0c0a      	lsrs	r2, r1, #16
 8005306:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800530a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800530e:	b29b      	uxth	r3, r3
 8005310:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005314:	45b9      	cmp	r9, r7
 8005316:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800531a:	f840 3b04 	str.w	r3, [r0], #4
 800531e:	d2e7      	bcs.n	80052f0 <quorem+0xb2>
 8005320:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005324:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005328:	b92a      	cbnz	r2, 8005336 <quorem+0xf8>
 800532a:	3b04      	subs	r3, #4
 800532c:	429e      	cmp	r6, r3
 800532e:	461a      	mov	r2, r3
 8005330:	d30b      	bcc.n	800534a <quorem+0x10c>
 8005332:	f8c8 4010 	str.w	r4, [r8, #16]
 8005336:	4628      	mov	r0, r5
 8005338:	b003      	add	sp, #12
 800533a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800533e:	6812      	ldr	r2, [r2, #0]
 8005340:	3b04      	subs	r3, #4
 8005342:	2a00      	cmp	r2, #0
 8005344:	d1c9      	bne.n	80052da <quorem+0x9c>
 8005346:	3c01      	subs	r4, #1
 8005348:	e7c4      	b.n	80052d4 <quorem+0x96>
 800534a:	6812      	ldr	r2, [r2, #0]
 800534c:	3b04      	subs	r3, #4
 800534e:	2a00      	cmp	r2, #0
 8005350:	d1ef      	bne.n	8005332 <quorem+0xf4>
 8005352:	3c01      	subs	r4, #1
 8005354:	e7ea      	b.n	800532c <quorem+0xee>
 8005356:	2000      	movs	r0, #0
 8005358:	e7ee      	b.n	8005338 <quorem+0xfa>
 800535a:	0000      	movs	r0, r0
 800535c:	0000      	movs	r0, r0
	...

08005360 <_dtoa_r>:
 8005360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005364:	4616      	mov	r6, r2
 8005366:	461f      	mov	r7, r3
 8005368:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800536a:	b095      	sub	sp, #84	; 0x54
 800536c:	4604      	mov	r4, r0
 800536e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005372:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005376:	b93d      	cbnz	r5, 8005388 <_dtoa_r+0x28>
 8005378:	2010      	movs	r0, #16
 800537a:	f7ff f9df 	bl	800473c <malloc>
 800537e:	6260      	str	r0, [r4, #36]	; 0x24
 8005380:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005384:	6005      	str	r5, [r0, #0]
 8005386:	60c5      	str	r5, [r0, #12]
 8005388:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800538a:	6819      	ldr	r1, [r3, #0]
 800538c:	b151      	cbz	r1, 80053a4 <_dtoa_r+0x44>
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	2301      	movs	r3, #1
 8005392:	4093      	lsls	r3, r2
 8005394:	604a      	str	r2, [r1, #4]
 8005396:	608b      	str	r3, [r1, #8]
 8005398:	4620      	mov	r0, r4
 800539a:	f000 fdf2 	bl	8005f82 <_Bfree>
 800539e:	2200      	movs	r2, #0
 80053a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	1e3b      	subs	r3, r7, #0
 80053a6:	bfaf      	iteee	ge
 80053a8:	2300      	movge	r3, #0
 80053aa:	2201      	movlt	r2, #1
 80053ac:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80053b0:	9303      	strlt	r3, [sp, #12]
 80053b2:	bfac      	ite	ge
 80053b4:	f8c8 3000 	strge.w	r3, [r8]
 80053b8:	f8c8 2000 	strlt.w	r2, [r8]
 80053bc:	4bae      	ldr	r3, [pc, #696]	; (8005678 <_dtoa_r+0x318>)
 80053be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80053c2:	ea33 0308 	bics.w	r3, r3, r8
 80053c6:	d11b      	bne.n	8005400 <_dtoa_r+0xa0>
 80053c8:	f242 730f 	movw	r3, #9999	; 0x270f
 80053cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80053ce:	6013      	str	r3, [r2, #0]
 80053d0:	9b02      	ldr	r3, [sp, #8]
 80053d2:	b923      	cbnz	r3, 80053de <_dtoa_r+0x7e>
 80053d4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80053d8:	2800      	cmp	r0, #0
 80053da:	f000 8545 	beq.w	8005e68 <_dtoa_r+0xb08>
 80053de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053e0:	b953      	cbnz	r3, 80053f8 <_dtoa_r+0x98>
 80053e2:	4ba6      	ldr	r3, [pc, #664]	; (800567c <_dtoa_r+0x31c>)
 80053e4:	e021      	b.n	800542a <_dtoa_r+0xca>
 80053e6:	4ba6      	ldr	r3, [pc, #664]	; (8005680 <_dtoa_r+0x320>)
 80053e8:	9306      	str	r3, [sp, #24]
 80053ea:	3308      	adds	r3, #8
 80053ec:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80053ee:	6013      	str	r3, [r2, #0]
 80053f0:	9806      	ldr	r0, [sp, #24]
 80053f2:	b015      	add	sp, #84	; 0x54
 80053f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f8:	4ba0      	ldr	r3, [pc, #640]	; (800567c <_dtoa_r+0x31c>)
 80053fa:	9306      	str	r3, [sp, #24]
 80053fc:	3303      	adds	r3, #3
 80053fe:	e7f5      	b.n	80053ec <_dtoa_r+0x8c>
 8005400:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005404:	2200      	movs	r2, #0
 8005406:	2300      	movs	r3, #0
 8005408:	4630      	mov	r0, r6
 800540a:	4639      	mov	r1, r7
 800540c:	f7fb facc 	bl	80009a8 <__aeabi_dcmpeq>
 8005410:	4682      	mov	sl, r0
 8005412:	b160      	cbz	r0, 800542e <_dtoa_r+0xce>
 8005414:	2301      	movs	r3, #1
 8005416:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005418:	6013      	str	r3, [r2, #0]
 800541a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 8520 	beq.w	8005e62 <_dtoa_r+0xb02>
 8005422:	4b98      	ldr	r3, [pc, #608]	; (8005684 <_dtoa_r+0x324>)
 8005424:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005426:	6013      	str	r3, [r2, #0]
 8005428:	3b01      	subs	r3, #1
 800542a:	9306      	str	r3, [sp, #24]
 800542c:	e7e0      	b.n	80053f0 <_dtoa_r+0x90>
 800542e:	ab12      	add	r3, sp, #72	; 0x48
 8005430:	9301      	str	r3, [sp, #4]
 8005432:	ab13      	add	r3, sp, #76	; 0x4c
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	4632      	mov	r2, r6
 8005438:	463b      	mov	r3, r7
 800543a:	4620      	mov	r0, r4
 800543c:	f000 fffa 	bl	8006434 <__d2b>
 8005440:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005444:	4683      	mov	fp, r0
 8005446:	2d00      	cmp	r5, #0
 8005448:	d07d      	beq.n	8005546 <_dtoa_r+0x1e6>
 800544a:	46b0      	mov	r8, r6
 800544c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005450:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8005454:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005458:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800545c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005460:	2200      	movs	r2, #0
 8005462:	4b89      	ldr	r3, [pc, #548]	; (8005688 <_dtoa_r+0x328>)
 8005464:	4640      	mov	r0, r8
 8005466:	4649      	mov	r1, r9
 8005468:	f7fa fe7e 	bl	8000168 <__aeabi_dsub>
 800546c:	a37c      	add	r3, pc, #496	; (adr r3, 8005660 <_dtoa_r+0x300>)
 800546e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005472:	f7fb f831 	bl	80004d8 <__aeabi_dmul>
 8005476:	a37c      	add	r3, pc, #496	; (adr r3, 8005668 <_dtoa_r+0x308>)
 8005478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547c:	f7fa fe76 	bl	800016c <__adddf3>
 8005480:	4606      	mov	r6, r0
 8005482:	4628      	mov	r0, r5
 8005484:	460f      	mov	r7, r1
 8005486:	f7fa ffbd 	bl	8000404 <__aeabi_i2d>
 800548a:	a379      	add	r3, pc, #484	; (adr r3, 8005670 <_dtoa_r+0x310>)
 800548c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005490:	f7fb f822 	bl	80004d8 <__aeabi_dmul>
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	4630      	mov	r0, r6
 800549a:	4639      	mov	r1, r7
 800549c:	f7fa fe66 	bl	800016c <__adddf3>
 80054a0:	4606      	mov	r6, r0
 80054a2:	460f      	mov	r7, r1
 80054a4:	f7fb fac8 	bl	8000a38 <__aeabi_d2iz>
 80054a8:	2200      	movs	r2, #0
 80054aa:	4682      	mov	sl, r0
 80054ac:	2300      	movs	r3, #0
 80054ae:	4630      	mov	r0, r6
 80054b0:	4639      	mov	r1, r7
 80054b2:	f7fb fa83 	bl	80009bc <__aeabi_dcmplt>
 80054b6:	b148      	cbz	r0, 80054cc <_dtoa_r+0x16c>
 80054b8:	4650      	mov	r0, sl
 80054ba:	f7fa ffa3 	bl	8000404 <__aeabi_i2d>
 80054be:	4632      	mov	r2, r6
 80054c0:	463b      	mov	r3, r7
 80054c2:	f7fb fa71 	bl	80009a8 <__aeabi_dcmpeq>
 80054c6:	b908      	cbnz	r0, 80054cc <_dtoa_r+0x16c>
 80054c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054cc:	f1ba 0f16 	cmp.w	sl, #22
 80054d0:	d85a      	bhi.n	8005588 <_dtoa_r+0x228>
 80054d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054d6:	496d      	ldr	r1, [pc, #436]	; (800568c <_dtoa_r+0x32c>)
 80054d8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80054dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054e0:	f7fb fa8a 	bl	80009f8 <__aeabi_dcmpgt>
 80054e4:	2800      	cmp	r0, #0
 80054e6:	d051      	beq.n	800558c <_dtoa_r+0x22c>
 80054e8:	2300      	movs	r3, #0
 80054ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054ee:	930d      	str	r3, [sp, #52]	; 0x34
 80054f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80054f2:	1b5d      	subs	r5, r3, r5
 80054f4:	1e6b      	subs	r3, r5, #1
 80054f6:	9307      	str	r3, [sp, #28]
 80054f8:	bf43      	ittte	mi
 80054fa:	2300      	movmi	r3, #0
 80054fc:	f1c5 0901 	rsbmi	r9, r5, #1
 8005500:	9307      	strmi	r3, [sp, #28]
 8005502:	f04f 0900 	movpl.w	r9, #0
 8005506:	f1ba 0f00 	cmp.w	sl, #0
 800550a:	db41      	blt.n	8005590 <_dtoa_r+0x230>
 800550c:	9b07      	ldr	r3, [sp, #28]
 800550e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005512:	4453      	add	r3, sl
 8005514:	9307      	str	r3, [sp, #28]
 8005516:	2300      	movs	r3, #0
 8005518:	9308      	str	r3, [sp, #32]
 800551a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800551c:	2b09      	cmp	r3, #9
 800551e:	f200 808f 	bhi.w	8005640 <_dtoa_r+0x2e0>
 8005522:	2b05      	cmp	r3, #5
 8005524:	bfc4      	itt	gt
 8005526:	3b04      	subgt	r3, #4
 8005528:	931e      	strgt	r3, [sp, #120]	; 0x78
 800552a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800552c:	bfc8      	it	gt
 800552e:	2500      	movgt	r5, #0
 8005530:	f1a3 0302 	sub.w	r3, r3, #2
 8005534:	bfd8      	it	le
 8005536:	2501      	movle	r5, #1
 8005538:	2b03      	cmp	r3, #3
 800553a:	f200 808d 	bhi.w	8005658 <_dtoa_r+0x2f8>
 800553e:	e8df f003 	tbb	[pc, r3]
 8005542:	7d7b      	.short	0x7d7b
 8005544:	6f2f      	.short	0x6f2f
 8005546:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800554a:	441d      	add	r5, r3
 800554c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005550:	2820      	cmp	r0, #32
 8005552:	dd13      	ble.n	800557c <_dtoa_r+0x21c>
 8005554:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005558:	9b02      	ldr	r3, [sp, #8]
 800555a:	fa08 f800 	lsl.w	r8, r8, r0
 800555e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005562:	fa23 f000 	lsr.w	r0, r3, r0
 8005566:	ea48 0000 	orr.w	r0, r8, r0
 800556a:	f7fa ff3b 	bl	80003e4 <__aeabi_ui2d>
 800556e:	2301      	movs	r3, #1
 8005570:	4680      	mov	r8, r0
 8005572:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8005576:	3d01      	subs	r5, #1
 8005578:	9310      	str	r3, [sp, #64]	; 0x40
 800557a:	e771      	b.n	8005460 <_dtoa_r+0x100>
 800557c:	9b02      	ldr	r3, [sp, #8]
 800557e:	f1c0 0020 	rsb	r0, r0, #32
 8005582:	fa03 f000 	lsl.w	r0, r3, r0
 8005586:	e7f0      	b.n	800556a <_dtoa_r+0x20a>
 8005588:	2301      	movs	r3, #1
 800558a:	e7b0      	b.n	80054ee <_dtoa_r+0x18e>
 800558c:	900d      	str	r0, [sp, #52]	; 0x34
 800558e:	e7af      	b.n	80054f0 <_dtoa_r+0x190>
 8005590:	f1ca 0300 	rsb	r3, sl, #0
 8005594:	9308      	str	r3, [sp, #32]
 8005596:	2300      	movs	r3, #0
 8005598:	eba9 090a 	sub.w	r9, r9, sl
 800559c:	930c      	str	r3, [sp, #48]	; 0x30
 800559e:	e7bc      	b.n	800551a <_dtoa_r+0x1ba>
 80055a0:	2301      	movs	r3, #1
 80055a2:	9309      	str	r3, [sp, #36]	; 0x24
 80055a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	dd74      	ble.n	8005694 <_dtoa_r+0x334>
 80055aa:	4698      	mov	r8, r3
 80055ac:	9304      	str	r3, [sp, #16]
 80055ae:	2200      	movs	r2, #0
 80055b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80055b2:	6072      	str	r2, [r6, #4]
 80055b4:	2204      	movs	r2, #4
 80055b6:	f102 0014 	add.w	r0, r2, #20
 80055ba:	4298      	cmp	r0, r3
 80055bc:	6871      	ldr	r1, [r6, #4]
 80055be:	d96e      	bls.n	800569e <_dtoa_r+0x33e>
 80055c0:	4620      	mov	r0, r4
 80055c2:	f000 fcaa 	bl	8005f1a <_Balloc>
 80055c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055c8:	6030      	str	r0, [r6, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f1b8 0f0e 	cmp.w	r8, #14
 80055d0:	9306      	str	r3, [sp, #24]
 80055d2:	f200 80ed 	bhi.w	80057b0 <_dtoa_r+0x450>
 80055d6:	2d00      	cmp	r5, #0
 80055d8:	f000 80ea 	beq.w	80057b0 <_dtoa_r+0x450>
 80055dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055e0:	f1ba 0f00 	cmp.w	sl, #0
 80055e4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80055e8:	dd77      	ble.n	80056da <_dtoa_r+0x37a>
 80055ea:	4a28      	ldr	r2, [pc, #160]	; (800568c <_dtoa_r+0x32c>)
 80055ec:	f00a 030f 	and.w	r3, sl, #15
 80055f0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80055f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80055f8:	06f0      	lsls	r0, r6, #27
 80055fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005602:	d568      	bpl.n	80056d6 <_dtoa_r+0x376>
 8005604:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005608:	4b21      	ldr	r3, [pc, #132]	; (8005690 <_dtoa_r+0x330>)
 800560a:	2503      	movs	r5, #3
 800560c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005610:	f7fb f88c 	bl	800072c <__aeabi_ddiv>
 8005614:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005618:	f006 060f 	and.w	r6, r6, #15
 800561c:	4f1c      	ldr	r7, [pc, #112]	; (8005690 <_dtoa_r+0x330>)
 800561e:	e04f      	b.n	80056c0 <_dtoa_r+0x360>
 8005620:	2301      	movs	r3, #1
 8005622:	9309      	str	r3, [sp, #36]	; 0x24
 8005624:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005626:	4453      	add	r3, sl
 8005628:	f103 0801 	add.w	r8, r3, #1
 800562c:	9304      	str	r3, [sp, #16]
 800562e:	4643      	mov	r3, r8
 8005630:	2b01      	cmp	r3, #1
 8005632:	bfb8      	it	lt
 8005634:	2301      	movlt	r3, #1
 8005636:	e7ba      	b.n	80055ae <_dtoa_r+0x24e>
 8005638:	2300      	movs	r3, #0
 800563a:	e7b2      	b.n	80055a2 <_dtoa_r+0x242>
 800563c:	2300      	movs	r3, #0
 800563e:	e7f0      	b.n	8005622 <_dtoa_r+0x2c2>
 8005640:	2501      	movs	r5, #1
 8005642:	2300      	movs	r3, #0
 8005644:	9509      	str	r5, [sp, #36]	; 0x24
 8005646:	931e      	str	r3, [sp, #120]	; 0x78
 8005648:	f04f 33ff 	mov.w	r3, #4294967295
 800564c:	2200      	movs	r2, #0
 800564e:	9304      	str	r3, [sp, #16]
 8005650:	4698      	mov	r8, r3
 8005652:	2312      	movs	r3, #18
 8005654:	921f      	str	r2, [sp, #124]	; 0x7c
 8005656:	e7aa      	b.n	80055ae <_dtoa_r+0x24e>
 8005658:	2301      	movs	r3, #1
 800565a:	9309      	str	r3, [sp, #36]	; 0x24
 800565c:	e7f4      	b.n	8005648 <_dtoa_r+0x2e8>
 800565e:	bf00      	nop
 8005660:	636f4361 	.word	0x636f4361
 8005664:	3fd287a7 	.word	0x3fd287a7
 8005668:	8b60c8b3 	.word	0x8b60c8b3
 800566c:	3fc68a28 	.word	0x3fc68a28
 8005670:	509f79fb 	.word	0x509f79fb
 8005674:	3fd34413 	.word	0x3fd34413
 8005678:	7ff00000 	.word	0x7ff00000
 800567c:	08006bd5 	.word	0x08006bd5
 8005680:	08006bcc 	.word	0x08006bcc
 8005684:	08006ba9 	.word	0x08006ba9
 8005688:	3ff80000 	.word	0x3ff80000
 800568c:	08006c08 	.word	0x08006c08
 8005690:	08006be0 	.word	0x08006be0
 8005694:	2301      	movs	r3, #1
 8005696:	9304      	str	r3, [sp, #16]
 8005698:	4698      	mov	r8, r3
 800569a:	461a      	mov	r2, r3
 800569c:	e7da      	b.n	8005654 <_dtoa_r+0x2f4>
 800569e:	3101      	adds	r1, #1
 80056a0:	6071      	str	r1, [r6, #4]
 80056a2:	0052      	lsls	r2, r2, #1
 80056a4:	e787      	b.n	80055b6 <_dtoa_r+0x256>
 80056a6:	07f1      	lsls	r1, r6, #31
 80056a8:	d508      	bpl.n	80056bc <_dtoa_r+0x35c>
 80056aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80056ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056b2:	f7fa ff11 	bl	80004d8 <__aeabi_dmul>
 80056b6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80056ba:	3501      	adds	r5, #1
 80056bc:	1076      	asrs	r6, r6, #1
 80056be:	3708      	adds	r7, #8
 80056c0:	2e00      	cmp	r6, #0
 80056c2:	d1f0      	bne.n	80056a6 <_dtoa_r+0x346>
 80056c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80056c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056cc:	f7fb f82e 	bl	800072c <__aeabi_ddiv>
 80056d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056d4:	e01b      	b.n	800570e <_dtoa_r+0x3ae>
 80056d6:	2502      	movs	r5, #2
 80056d8:	e7a0      	b.n	800561c <_dtoa_r+0x2bc>
 80056da:	f000 80a4 	beq.w	8005826 <_dtoa_r+0x4c6>
 80056de:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80056e2:	f1ca 0600 	rsb	r6, sl, #0
 80056e6:	4ba0      	ldr	r3, [pc, #640]	; (8005968 <_dtoa_r+0x608>)
 80056e8:	f006 020f 	and.w	r2, r6, #15
 80056ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f4:	f7fa fef0 	bl	80004d8 <__aeabi_dmul>
 80056f8:	2502      	movs	r5, #2
 80056fa:	2300      	movs	r3, #0
 80056fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005700:	4f9a      	ldr	r7, [pc, #616]	; (800596c <_dtoa_r+0x60c>)
 8005702:	1136      	asrs	r6, r6, #4
 8005704:	2e00      	cmp	r6, #0
 8005706:	f040 8083 	bne.w	8005810 <_dtoa_r+0x4b0>
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1e0      	bne.n	80056d0 <_dtoa_r+0x370>
 800570e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 808a 	beq.w	800582a <_dtoa_r+0x4ca>
 8005716:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800571a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800571e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005722:	2200      	movs	r2, #0
 8005724:	4b92      	ldr	r3, [pc, #584]	; (8005970 <_dtoa_r+0x610>)
 8005726:	f7fb f949 	bl	80009bc <__aeabi_dcmplt>
 800572a:	2800      	cmp	r0, #0
 800572c:	d07d      	beq.n	800582a <_dtoa_r+0x4ca>
 800572e:	f1b8 0f00 	cmp.w	r8, #0
 8005732:	d07a      	beq.n	800582a <_dtoa_r+0x4ca>
 8005734:	9b04      	ldr	r3, [sp, #16]
 8005736:	2b00      	cmp	r3, #0
 8005738:	dd36      	ble.n	80057a8 <_dtoa_r+0x448>
 800573a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800573e:	2200      	movs	r2, #0
 8005740:	4b8c      	ldr	r3, [pc, #560]	; (8005974 <_dtoa_r+0x614>)
 8005742:	f7fa fec9 	bl	80004d8 <__aeabi_dmul>
 8005746:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800574a:	9e04      	ldr	r6, [sp, #16]
 800574c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8005750:	3501      	adds	r5, #1
 8005752:	4628      	mov	r0, r5
 8005754:	f7fa fe56 	bl	8000404 <__aeabi_i2d>
 8005758:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800575c:	f7fa febc 	bl	80004d8 <__aeabi_dmul>
 8005760:	2200      	movs	r2, #0
 8005762:	4b85      	ldr	r3, [pc, #532]	; (8005978 <_dtoa_r+0x618>)
 8005764:	f7fa fd02 	bl	800016c <__adddf3>
 8005768:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800576c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005770:	950b      	str	r5, [sp, #44]	; 0x2c
 8005772:	2e00      	cmp	r6, #0
 8005774:	d15c      	bne.n	8005830 <_dtoa_r+0x4d0>
 8005776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800577a:	2200      	movs	r2, #0
 800577c:	4b7f      	ldr	r3, [pc, #508]	; (800597c <_dtoa_r+0x61c>)
 800577e:	f7fa fcf3 	bl	8000168 <__aeabi_dsub>
 8005782:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005784:	462b      	mov	r3, r5
 8005786:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800578a:	f7fb f935 	bl	80009f8 <__aeabi_dcmpgt>
 800578e:	2800      	cmp	r0, #0
 8005790:	f040 8281 	bne.w	8005c96 <_dtoa_r+0x936>
 8005794:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005798:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800579a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800579e:	f7fb f90d 	bl	80009bc <__aeabi_dcmplt>
 80057a2:	2800      	cmp	r0, #0
 80057a4:	f040 8275 	bne.w	8005c92 <_dtoa_r+0x932>
 80057a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80057ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80057b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f2c0 814b 	blt.w	8005a4e <_dtoa_r+0x6ee>
 80057b8:	f1ba 0f0e 	cmp.w	sl, #14
 80057bc:	f300 8147 	bgt.w	8005a4e <_dtoa_r+0x6ee>
 80057c0:	4b69      	ldr	r3, [pc, #420]	; (8005968 <_dtoa_r+0x608>)
 80057c2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80057c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80057ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f280 80d7 	bge.w	8005984 <_dtoa_r+0x624>
 80057d6:	f1b8 0f00 	cmp.w	r8, #0
 80057da:	f300 80d3 	bgt.w	8005984 <_dtoa_r+0x624>
 80057de:	f040 8257 	bne.w	8005c90 <_dtoa_r+0x930>
 80057e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057e6:	2200      	movs	r2, #0
 80057e8:	4b64      	ldr	r3, [pc, #400]	; (800597c <_dtoa_r+0x61c>)
 80057ea:	f7fa fe75 	bl	80004d8 <__aeabi_dmul>
 80057ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057f2:	f7fb f8f7 	bl	80009e4 <__aeabi_dcmpge>
 80057f6:	4646      	mov	r6, r8
 80057f8:	4647      	mov	r7, r8
 80057fa:	2800      	cmp	r0, #0
 80057fc:	f040 822d 	bne.w	8005c5a <_dtoa_r+0x8fa>
 8005800:	9b06      	ldr	r3, [sp, #24]
 8005802:	9a06      	ldr	r2, [sp, #24]
 8005804:	1c5d      	adds	r5, r3, #1
 8005806:	2331      	movs	r3, #49	; 0x31
 8005808:	f10a 0a01 	add.w	sl, sl, #1
 800580c:	7013      	strb	r3, [r2, #0]
 800580e:	e228      	b.n	8005c62 <_dtoa_r+0x902>
 8005810:	07f2      	lsls	r2, r6, #31
 8005812:	d505      	bpl.n	8005820 <_dtoa_r+0x4c0>
 8005814:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005818:	f7fa fe5e 	bl	80004d8 <__aeabi_dmul>
 800581c:	2301      	movs	r3, #1
 800581e:	3501      	adds	r5, #1
 8005820:	1076      	asrs	r6, r6, #1
 8005822:	3708      	adds	r7, #8
 8005824:	e76e      	b.n	8005704 <_dtoa_r+0x3a4>
 8005826:	2502      	movs	r5, #2
 8005828:	e771      	b.n	800570e <_dtoa_r+0x3ae>
 800582a:	4657      	mov	r7, sl
 800582c:	4646      	mov	r6, r8
 800582e:	e790      	b.n	8005752 <_dtoa_r+0x3f2>
 8005830:	4b4d      	ldr	r3, [pc, #308]	; (8005968 <_dtoa_r+0x608>)
 8005832:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005836:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800583a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800583c:	2b00      	cmp	r3, #0
 800583e:	d048      	beq.n	80058d2 <_dtoa_r+0x572>
 8005840:	4602      	mov	r2, r0
 8005842:	460b      	mov	r3, r1
 8005844:	2000      	movs	r0, #0
 8005846:	494e      	ldr	r1, [pc, #312]	; (8005980 <_dtoa_r+0x620>)
 8005848:	f7fa ff70 	bl	800072c <__aeabi_ddiv>
 800584c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005850:	f7fa fc8a 	bl	8000168 <__aeabi_dsub>
 8005854:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005858:	9d06      	ldr	r5, [sp, #24]
 800585a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800585e:	f7fb f8eb 	bl	8000a38 <__aeabi_d2iz>
 8005862:	9011      	str	r0, [sp, #68]	; 0x44
 8005864:	f7fa fdce 	bl	8000404 <__aeabi_i2d>
 8005868:	4602      	mov	r2, r0
 800586a:	460b      	mov	r3, r1
 800586c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005870:	f7fa fc7a 	bl	8000168 <__aeabi_dsub>
 8005874:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005876:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800587a:	3330      	adds	r3, #48	; 0x30
 800587c:	f805 3b01 	strb.w	r3, [r5], #1
 8005880:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005884:	f7fb f89a 	bl	80009bc <__aeabi_dcmplt>
 8005888:	2800      	cmp	r0, #0
 800588a:	d163      	bne.n	8005954 <_dtoa_r+0x5f4>
 800588c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005890:	2000      	movs	r0, #0
 8005892:	4937      	ldr	r1, [pc, #220]	; (8005970 <_dtoa_r+0x610>)
 8005894:	f7fa fc68 	bl	8000168 <__aeabi_dsub>
 8005898:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800589c:	f7fb f88e 	bl	80009bc <__aeabi_dcmplt>
 80058a0:	2800      	cmp	r0, #0
 80058a2:	f040 80b5 	bne.w	8005a10 <_dtoa_r+0x6b0>
 80058a6:	9b06      	ldr	r3, [sp, #24]
 80058a8:	1aeb      	subs	r3, r5, r3
 80058aa:	429e      	cmp	r6, r3
 80058ac:	f77f af7c 	ble.w	80057a8 <_dtoa_r+0x448>
 80058b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80058b4:	2200      	movs	r2, #0
 80058b6:	4b2f      	ldr	r3, [pc, #188]	; (8005974 <_dtoa_r+0x614>)
 80058b8:	f7fa fe0e 	bl	80004d8 <__aeabi_dmul>
 80058bc:	2200      	movs	r2, #0
 80058be:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80058c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058c6:	4b2b      	ldr	r3, [pc, #172]	; (8005974 <_dtoa_r+0x614>)
 80058c8:	f7fa fe06 	bl	80004d8 <__aeabi_dmul>
 80058cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058d0:	e7c3      	b.n	800585a <_dtoa_r+0x4fa>
 80058d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80058d6:	f7fa fdff 	bl	80004d8 <__aeabi_dmul>
 80058da:	9b06      	ldr	r3, [sp, #24]
 80058dc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80058e0:	199d      	adds	r5, r3, r6
 80058e2:	461e      	mov	r6, r3
 80058e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058e8:	f7fb f8a6 	bl	8000a38 <__aeabi_d2iz>
 80058ec:	9011      	str	r0, [sp, #68]	; 0x44
 80058ee:	f7fa fd89 	bl	8000404 <__aeabi_i2d>
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058fa:	f7fa fc35 	bl	8000168 <__aeabi_dsub>
 80058fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005900:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005904:	3330      	adds	r3, #48	; 0x30
 8005906:	f806 3b01 	strb.w	r3, [r6], #1
 800590a:	42ae      	cmp	r6, r5
 800590c:	f04f 0200 	mov.w	r2, #0
 8005910:	d124      	bne.n	800595c <_dtoa_r+0x5fc>
 8005912:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005916:	4b1a      	ldr	r3, [pc, #104]	; (8005980 <_dtoa_r+0x620>)
 8005918:	f7fa fc28 	bl	800016c <__adddf3>
 800591c:	4602      	mov	r2, r0
 800591e:	460b      	mov	r3, r1
 8005920:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005924:	f7fb f868 	bl	80009f8 <__aeabi_dcmpgt>
 8005928:	2800      	cmp	r0, #0
 800592a:	d171      	bne.n	8005a10 <_dtoa_r+0x6b0>
 800592c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005930:	2000      	movs	r0, #0
 8005932:	4913      	ldr	r1, [pc, #76]	; (8005980 <_dtoa_r+0x620>)
 8005934:	f7fa fc18 	bl	8000168 <__aeabi_dsub>
 8005938:	4602      	mov	r2, r0
 800593a:	460b      	mov	r3, r1
 800593c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005940:	f7fb f83c 	bl	80009bc <__aeabi_dcmplt>
 8005944:	2800      	cmp	r0, #0
 8005946:	f43f af2f 	beq.w	80057a8 <_dtoa_r+0x448>
 800594a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800594e:	1e6a      	subs	r2, r5, #1
 8005950:	2b30      	cmp	r3, #48	; 0x30
 8005952:	d001      	beq.n	8005958 <_dtoa_r+0x5f8>
 8005954:	46ba      	mov	sl, r7
 8005956:	e04a      	b.n	80059ee <_dtoa_r+0x68e>
 8005958:	4615      	mov	r5, r2
 800595a:	e7f6      	b.n	800594a <_dtoa_r+0x5ea>
 800595c:	4b05      	ldr	r3, [pc, #20]	; (8005974 <_dtoa_r+0x614>)
 800595e:	f7fa fdbb 	bl	80004d8 <__aeabi_dmul>
 8005962:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005966:	e7bd      	b.n	80058e4 <_dtoa_r+0x584>
 8005968:	08006c08 	.word	0x08006c08
 800596c:	08006be0 	.word	0x08006be0
 8005970:	3ff00000 	.word	0x3ff00000
 8005974:	40240000 	.word	0x40240000
 8005978:	401c0000 	.word	0x401c0000
 800597c:	40140000 	.word	0x40140000
 8005980:	3fe00000 	.word	0x3fe00000
 8005984:	9d06      	ldr	r5, [sp, #24]
 8005986:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800598a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800598e:	4630      	mov	r0, r6
 8005990:	4639      	mov	r1, r7
 8005992:	f7fa fecb 	bl	800072c <__aeabi_ddiv>
 8005996:	f7fb f84f 	bl	8000a38 <__aeabi_d2iz>
 800599a:	4681      	mov	r9, r0
 800599c:	f7fa fd32 	bl	8000404 <__aeabi_i2d>
 80059a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059a4:	f7fa fd98 	bl	80004d8 <__aeabi_dmul>
 80059a8:	4602      	mov	r2, r0
 80059aa:	460b      	mov	r3, r1
 80059ac:	4630      	mov	r0, r6
 80059ae:	4639      	mov	r1, r7
 80059b0:	f7fa fbda 	bl	8000168 <__aeabi_dsub>
 80059b4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80059b8:	f805 6b01 	strb.w	r6, [r5], #1
 80059bc:	9e06      	ldr	r6, [sp, #24]
 80059be:	4602      	mov	r2, r0
 80059c0:	1bae      	subs	r6, r5, r6
 80059c2:	45b0      	cmp	r8, r6
 80059c4:	460b      	mov	r3, r1
 80059c6:	d135      	bne.n	8005a34 <_dtoa_r+0x6d4>
 80059c8:	f7fa fbd0 	bl	800016c <__adddf3>
 80059cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059d0:	4606      	mov	r6, r0
 80059d2:	460f      	mov	r7, r1
 80059d4:	f7fb f810 	bl	80009f8 <__aeabi_dcmpgt>
 80059d8:	b9c8      	cbnz	r0, 8005a0e <_dtoa_r+0x6ae>
 80059da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059de:	4630      	mov	r0, r6
 80059e0:	4639      	mov	r1, r7
 80059e2:	f7fa ffe1 	bl	80009a8 <__aeabi_dcmpeq>
 80059e6:	b110      	cbz	r0, 80059ee <_dtoa_r+0x68e>
 80059e8:	f019 0f01 	tst.w	r9, #1
 80059ec:	d10f      	bne.n	8005a0e <_dtoa_r+0x6ae>
 80059ee:	4659      	mov	r1, fp
 80059f0:	4620      	mov	r0, r4
 80059f2:	f000 fac6 	bl	8005f82 <_Bfree>
 80059f6:	2300      	movs	r3, #0
 80059f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80059fa:	702b      	strb	r3, [r5, #0]
 80059fc:	f10a 0301 	add.w	r3, sl, #1
 8005a00:	6013      	str	r3, [r2, #0]
 8005a02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f43f acf3 	beq.w	80053f0 <_dtoa_r+0x90>
 8005a0a:	601d      	str	r5, [r3, #0]
 8005a0c:	e4f0      	b.n	80053f0 <_dtoa_r+0x90>
 8005a0e:	4657      	mov	r7, sl
 8005a10:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005a14:	1e6b      	subs	r3, r5, #1
 8005a16:	2a39      	cmp	r2, #57	; 0x39
 8005a18:	d106      	bne.n	8005a28 <_dtoa_r+0x6c8>
 8005a1a:	9a06      	ldr	r2, [sp, #24]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d107      	bne.n	8005a30 <_dtoa_r+0x6d0>
 8005a20:	2330      	movs	r3, #48	; 0x30
 8005a22:	7013      	strb	r3, [r2, #0]
 8005a24:	4613      	mov	r3, r2
 8005a26:	3701      	adds	r7, #1
 8005a28:	781a      	ldrb	r2, [r3, #0]
 8005a2a:	3201      	adds	r2, #1
 8005a2c:	701a      	strb	r2, [r3, #0]
 8005a2e:	e791      	b.n	8005954 <_dtoa_r+0x5f4>
 8005a30:	461d      	mov	r5, r3
 8005a32:	e7ed      	b.n	8005a10 <_dtoa_r+0x6b0>
 8005a34:	2200      	movs	r2, #0
 8005a36:	4b99      	ldr	r3, [pc, #612]	; (8005c9c <_dtoa_r+0x93c>)
 8005a38:	f7fa fd4e 	bl	80004d8 <__aeabi_dmul>
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	2300      	movs	r3, #0
 8005a40:	4606      	mov	r6, r0
 8005a42:	460f      	mov	r7, r1
 8005a44:	f7fa ffb0 	bl	80009a8 <__aeabi_dcmpeq>
 8005a48:	2800      	cmp	r0, #0
 8005a4a:	d09e      	beq.n	800598a <_dtoa_r+0x62a>
 8005a4c:	e7cf      	b.n	80059ee <_dtoa_r+0x68e>
 8005a4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a50:	2a00      	cmp	r2, #0
 8005a52:	f000 8088 	beq.w	8005b66 <_dtoa_r+0x806>
 8005a56:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005a58:	2a01      	cmp	r2, #1
 8005a5a:	dc6d      	bgt.n	8005b38 <_dtoa_r+0x7d8>
 8005a5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005a5e:	2a00      	cmp	r2, #0
 8005a60:	d066      	beq.n	8005b30 <_dtoa_r+0x7d0>
 8005a62:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a66:	464d      	mov	r5, r9
 8005a68:	9e08      	ldr	r6, [sp, #32]
 8005a6a:	9a07      	ldr	r2, [sp, #28]
 8005a6c:	2101      	movs	r1, #1
 8005a6e:	441a      	add	r2, r3
 8005a70:	4620      	mov	r0, r4
 8005a72:	4499      	add	r9, r3
 8005a74:	9207      	str	r2, [sp, #28]
 8005a76:	f000 fb24 	bl	80060c2 <__i2b>
 8005a7a:	4607      	mov	r7, r0
 8005a7c:	2d00      	cmp	r5, #0
 8005a7e:	dd0b      	ble.n	8005a98 <_dtoa_r+0x738>
 8005a80:	9b07      	ldr	r3, [sp, #28]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	dd08      	ble.n	8005a98 <_dtoa_r+0x738>
 8005a86:	42ab      	cmp	r3, r5
 8005a88:	bfa8      	it	ge
 8005a8a:	462b      	movge	r3, r5
 8005a8c:	9a07      	ldr	r2, [sp, #28]
 8005a8e:	eba9 0903 	sub.w	r9, r9, r3
 8005a92:	1aed      	subs	r5, r5, r3
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	9307      	str	r3, [sp, #28]
 8005a98:	9b08      	ldr	r3, [sp, #32]
 8005a9a:	b1eb      	cbz	r3, 8005ad8 <_dtoa_r+0x778>
 8005a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d065      	beq.n	8005b6e <_dtoa_r+0x80e>
 8005aa2:	b18e      	cbz	r6, 8005ac8 <_dtoa_r+0x768>
 8005aa4:	4639      	mov	r1, r7
 8005aa6:	4632      	mov	r2, r6
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	f000 fba9 	bl	8006200 <__pow5mult>
 8005aae:	465a      	mov	r2, fp
 8005ab0:	4601      	mov	r1, r0
 8005ab2:	4607      	mov	r7, r0
 8005ab4:	4620      	mov	r0, r4
 8005ab6:	f000 fb0d 	bl	80060d4 <__multiply>
 8005aba:	4659      	mov	r1, fp
 8005abc:	900a      	str	r0, [sp, #40]	; 0x28
 8005abe:	4620      	mov	r0, r4
 8005ac0:	f000 fa5f 	bl	8005f82 <_Bfree>
 8005ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ac6:	469b      	mov	fp, r3
 8005ac8:	9b08      	ldr	r3, [sp, #32]
 8005aca:	1b9a      	subs	r2, r3, r6
 8005acc:	d004      	beq.n	8005ad8 <_dtoa_r+0x778>
 8005ace:	4659      	mov	r1, fp
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	f000 fb95 	bl	8006200 <__pow5mult>
 8005ad6:	4683      	mov	fp, r0
 8005ad8:	2101      	movs	r1, #1
 8005ada:	4620      	mov	r0, r4
 8005adc:	f000 faf1 	bl	80060c2 <__i2b>
 8005ae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ae2:	4606      	mov	r6, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f000 81c6 	beq.w	8005e76 <_dtoa_r+0xb16>
 8005aea:	461a      	mov	r2, r3
 8005aec:	4601      	mov	r1, r0
 8005aee:	4620      	mov	r0, r4
 8005af0:	f000 fb86 	bl	8006200 <__pow5mult>
 8005af4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005af6:	4606      	mov	r6, r0
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	dc3e      	bgt.n	8005b7a <_dtoa_r+0x81a>
 8005afc:	9b02      	ldr	r3, [sp, #8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d137      	bne.n	8005b72 <_dtoa_r+0x812>
 8005b02:	9b03      	ldr	r3, [sp, #12]
 8005b04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d134      	bne.n	8005b76 <_dtoa_r+0x816>
 8005b0c:	9b03      	ldr	r3, [sp, #12]
 8005b0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b12:	0d1b      	lsrs	r3, r3, #20
 8005b14:	051b      	lsls	r3, r3, #20
 8005b16:	b12b      	cbz	r3, 8005b24 <_dtoa_r+0x7c4>
 8005b18:	9b07      	ldr	r3, [sp, #28]
 8005b1a:	f109 0901 	add.w	r9, r9, #1
 8005b1e:	3301      	adds	r3, #1
 8005b20:	9307      	str	r3, [sp, #28]
 8005b22:	2301      	movs	r3, #1
 8005b24:	9308      	str	r3, [sp, #32]
 8005b26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d128      	bne.n	8005b7e <_dtoa_r+0x81e>
 8005b2c:	2001      	movs	r0, #1
 8005b2e:	e02e      	b.n	8005b8e <_dtoa_r+0x82e>
 8005b30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b32:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b36:	e796      	b.n	8005a66 <_dtoa_r+0x706>
 8005b38:	9b08      	ldr	r3, [sp, #32]
 8005b3a:	f108 36ff 	add.w	r6, r8, #4294967295
 8005b3e:	42b3      	cmp	r3, r6
 8005b40:	bfb7      	itett	lt
 8005b42:	9b08      	ldrlt	r3, [sp, #32]
 8005b44:	1b9e      	subge	r6, r3, r6
 8005b46:	1af2      	sublt	r2, r6, r3
 8005b48:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005b4a:	bfbf      	itttt	lt
 8005b4c:	9608      	strlt	r6, [sp, #32]
 8005b4e:	189b      	addlt	r3, r3, r2
 8005b50:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005b52:	2600      	movlt	r6, #0
 8005b54:	f1b8 0f00 	cmp.w	r8, #0
 8005b58:	bfb9      	ittee	lt
 8005b5a:	eba9 0508 	sublt.w	r5, r9, r8
 8005b5e:	2300      	movlt	r3, #0
 8005b60:	464d      	movge	r5, r9
 8005b62:	4643      	movge	r3, r8
 8005b64:	e781      	b.n	8005a6a <_dtoa_r+0x70a>
 8005b66:	9e08      	ldr	r6, [sp, #32]
 8005b68:	464d      	mov	r5, r9
 8005b6a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005b6c:	e786      	b.n	8005a7c <_dtoa_r+0x71c>
 8005b6e:	9a08      	ldr	r2, [sp, #32]
 8005b70:	e7ad      	b.n	8005ace <_dtoa_r+0x76e>
 8005b72:	2300      	movs	r3, #0
 8005b74:	e7d6      	b.n	8005b24 <_dtoa_r+0x7c4>
 8005b76:	9b02      	ldr	r3, [sp, #8]
 8005b78:	e7d4      	b.n	8005b24 <_dtoa_r+0x7c4>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	9308      	str	r3, [sp, #32]
 8005b7e:	6933      	ldr	r3, [r6, #16]
 8005b80:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005b84:	6918      	ldr	r0, [r3, #16]
 8005b86:	f000 fa4e 	bl	8006026 <__hi0bits>
 8005b8a:	f1c0 0020 	rsb	r0, r0, #32
 8005b8e:	9b07      	ldr	r3, [sp, #28]
 8005b90:	4418      	add	r0, r3
 8005b92:	f010 001f 	ands.w	r0, r0, #31
 8005b96:	d047      	beq.n	8005c28 <_dtoa_r+0x8c8>
 8005b98:	f1c0 0320 	rsb	r3, r0, #32
 8005b9c:	2b04      	cmp	r3, #4
 8005b9e:	dd3b      	ble.n	8005c18 <_dtoa_r+0x8b8>
 8005ba0:	9b07      	ldr	r3, [sp, #28]
 8005ba2:	f1c0 001c 	rsb	r0, r0, #28
 8005ba6:	4481      	add	r9, r0
 8005ba8:	4405      	add	r5, r0
 8005baa:	4403      	add	r3, r0
 8005bac:	9307      	str	r3, [sp, #28]
 8005bae:	f1b9 0f00 	cmp.w	r9, #0
 8005bb2:	dd05      	ble.n	8005bc0 <_dtoa_r+0x860>
 8005bb4:	4659      	mov	r1, fp
 8005bb6:	464a      	mov	r2, r9
 8005bb8:	4620      	mov	r0, r4
 8005bba:	f000 fb6f 	bl	800629c <__lshift>
 8005bbe:	4683      	mov	fp, r0
 8005bc0:	9b07      	ldr	r3, [sp, #28]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	dd05      	ble.n	8005bd2 <_dtoa_r+0x872>
 8005bc6:	4631      	mov	r1, r6
 8005bc8:	461a      	mov	r2, r3
 8005bca:	4620      	mov	r0, r4
 8005bcc:	f000 fb66 	bl	800629c <__lshift>
 8005bd0:	4606      	mov	r6, r0
 8005bd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bd4:	b353      	cbz	r3, 8005c2c <_dtoa_r+0x8cc>
 8005bd6:	4631      	mov	r1, r6
 8005bd8:	4658      	mov	r0, fp
 8005bda:	f000 fbb3 	bl	8006344 <__mcmp>
 8005bde:	2800      	cmp	r0, #0
 8005be0:	da24      	bge.n	8005c2c <_dtoa_r+0x8cc>
 8005be2:	2300      	movs	r3, #0
 8005be4:	4659      	mov	r1, fp
 8005be6:	220a      	movs	r2, #10
 8005be8:	4620      	mov	r0, r4
 8005bea:	f000 f9e1 	bl	8005fb0 <__multadd>
 8005bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bf4:	4683      	mov	fp, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 8144 	beq.w	8005e84 <_dtoa_r+0xb24>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	4639      	mov	r1, r7
 8005c00:	220a      	movs	r2, #10
 8005c02:	4620      	mov	r0, r4
 8005c04:	f000 f9d4 	bl	8005fb0 <__multadd>
 8005c08:	9b04      	ldr	r3, [sp, #16]
 8005c0a:	4607      	mov	r7, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	dc4d      	bgt.n	8005cac <_dtoa_r+0x94c>
 8005c10:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	dd4a      	ble.n	8005cac <_dtoa_r+0x94c>
 8005c16:	e011      	b.n	8005c3c <_dtoa_r+0x8dc>
 8005c18:	d0c9      	beq.n	8005bae <_dtoa_r+0x84e>
 8005c1a:	9a07      	ldr	r2, [sp, #28]
 8005c1c:	331c      	adds	r3, #28
 8005c1e:	441a      	add	r2, r3
 8005c20:	4499      	add	r9, r3
 8005c22:	441d      	add	r5, r3
 8005c24:	4613      	mov	r3, r2
 8005c26:	e7c1      	b.n	8005bac <_dtoa_r+0x84c>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	e7f6      	b.n	8005c1a <_dtoa_r+0x8ba>
 8005c2c:	f1b8 0f00 	cmp.w	r8, #0
 8005c30:	dc36      	bgt.n	8005ca0 <_dtoa_r+0x940>
 8005c32:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	dd33      	ble.n	8005ca0 <_dtoa_r+0x940>
 8005c38:	f8cd 8010 	str.w	r8, [sp, #16]
 8005c3c:	9b04      	ldr	r3, [sp, #16]
 8005c3e:	b963      	cbnz	r3, 8005c5a <_dtoa_r+0x8fa>
 8005c40:	4631      	mov	r1, r6
 8005c42:	2205      	movs	r2, #5
 8005c44:	4620      	mov	r0, r4
 8005c46:	f000 f9b3 	bl	8005fb0 <__multadd>
 8005c4a:	4601      	mov	r1, r0
 8005c4c:	4606      	mov	r6, r0
 8005c4e:	4658      	mov	r0, fp
 8005c50:	f000 fb78 	bl	8006344 <__mcmp>
 8005c54:	2800      	cmp	r0, #0
 8005c56:	f73f add3 	bgt.w	8005800 <_dtoa_r+0x4a0>
 8005c5a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005c5c:	9d06      	ldr	r5, [sp, #24]
 8005c5e:	ea6f 0a03 	mvn.w	sl, r3
 8005c62:	f04f 0900 	mov.w	r9, #0
 8005c66:	4631      	mov	r1, r6
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f000 f98a 	bl	8005f82 <_Bfree>
 8005c6e:	2f00      	cmp	r7, #0
 8005c70:	f43f aebd 	beq.w	80059ee <_dtoa_r+0x68e>
 8005c74:	f1b9 0f00 	cmp.w	r9, #0
 8005c78:	d005      	beq.n	8005c86 <_dtoa_r+0x926>
 8005c7a:	45b9      	cmp	r9, r7
 8005c7c:	d003      	beq.n	8005c86 <_dtoa_r+0x926>
 8005c7e:	4649      	mov	r1, r9
 8005c80:	4620      	mov	r0, r4
 8005c82:	f000 f97e 	bl	8005f82 <_Bfree>
 8005c86:	4639      	mov	r1, r7
 8005c88:	4620      	mov	r0, r4
 8005c8a:	f000 f97a 	bl	8005f82 <_Bfree>
 8005c8e:	e6ae      	b.n	80059ee <_dtoa_r+0x68e>
 8005c90:	2600      	movs	r6, #0
 8005c92:	4637      	mov	r7, r6
 8005c94:	e7e1      	b.n	8005c5a <_dtoa_r+0x8fa>
 8005c96:	46ba      	mov	sl, r7
 8005c98:	4637      	mov	r7, r6
 8005c9a:	e5b1      	b.n	8005800 <_dtoa_r+0x4a0>
 8005c9c:	40240000 	.word	0x40240000
 8005ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ca2:	f8cd 8010 	str.w	r8, [sp, #16]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 80f3 	beq.w	8005e92 <_dtoa_r+0xb32>
 8005cac:	2d00      	cmp	r5, #0
 8005cae:	dd05      	ble.n	8005cbc <_dtoa_r+0x95c>
 8005cb0:	4639      	mov	r1, r7
 8005cb2:	462a      	mov	r2, r5
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	f000 faf1 	bl	800629c <__lshift>
 8005cba:	4607      	mov	r7, r0
 8005cbc:	9b08      	ldr	r3, [sp, #32]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d04c      	beq.n	8005d5c <_dtoa_r+0x9fc>
 8005cc2:	6879      	ldr	r1, [r7, #4]
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	f000 f928 	bl	8005f1a <_Balloc>
 8005cca:	4605      	mov	r5, r0
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	f107 010c 	add.w	r1, r7, #12
 8005cd2:	3202      	adds	r2, #2
 8005cd4:	0092      	lsls	r2, r2, #2
 8005cd6:	300c      	adds	r0, #12
 8005cd8:	f000 f912 	bl	8005f00 <memcpy>
 8005cdc:	2201      	movs	r2, #1
 8005cde:	4629      	mov	r1, r5
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	f000 fadb 	bl	800629c <__lshift>
 8005ce6:	46b9      	mov	r9, r7
 8005ce8:	4607      	mov	r7, r0
 8005cea:	9b06      	ldr	r3, [sp, #24]
 8005cec:	9307      	str	r3, [sp, #28]
 8005cee:	9b02      	ldr	r3, [sp, #8]
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	9308      	str	r3, [sp, #32]
 8005cf6:	4631      	mov	r1, r6
 8005cf8:	4658      	mov	r0, fp
 8005cfa:	f7ff faa0 	bl	800523e <quorem>
 8005cfe:	4649      	mov	r1, r9
 8005d00:	4605      	mov	r5, r0
 8005d02:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005d06:	4658      	mov	r0, fp
 8005d08:	f000 fb1c 	bl	8006344 <__mcmp>
 8005d0c:	463a      	mov	r2, r7
 8005d0e:	9002      	str	r0, [sp, #8]
 8005d10:	4631      	mov	r1, r6
 8005d12:	4620      	mov	r0, r4
 8005d14:	f000 fb30 	bl	8006378 <__mdiff>
 8005d18:	68c3      	ldr	r3, [r0, #12]
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	bb03      	cbnz	r3, 8005d60 <_dtoa_r+0xa00>
 8005d1e:	4601      	mov	r1, r0
 8005d20:	9009      	str	r0, [sp, #36]	; 0x24
 8005d22:	4658      	mov	r0, fp
 8005d24:	f000 fb0e 	bl	8006344 <__mcmp>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d2c:	4611      	mov	r1, r2
 8005d2e:	4620      	mov	r0, r4
 8005d30:	9309      	str	r3, [sp, #36]	; 0x24
 8005d32:	f000 f926 	bl	8005f82 <_Bfree>
 8005d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d38:	b9a3      	cbnz	r3, 8005d64 <_dtoa_r+0xa04>
 8005d3a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005d3c:	b992      	cbnz	r2, 8005d64 <_dtoa_r+0xa04>
 8005d3e:	9a08      	ldr	r2, [sp, #32]
 8005d40:	b982      	cbnz	r2, 8005d64 <_dtoa_r+0xa04>
 8005d42:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005d46:	d029      	beq.n	8005d9c <_dtoa_r+0xa3c>
 8005d48:	9b02      	ldr	r3, [sp, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	dd01      	ble.n	8005d52 <_dtoa_r+0x9f2>
 8005d4e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005d52:	9b07      	ldr	r3, [sp, #28]
 8005d54:	1c5d      	adds	r5, r3, #1
 8005d56:	f883 8000 	strb.w	r8, [r3]
 8005d5a:	e784      	b.n	8005c66 <_dtoa_r+0x906>
 8005d5c:	4638      	mov	r0, r7
 8005d5e:	e7c2      	b.n	8005ce6 <_dtoa_r+0x986>
 8005d60:	2301      	movs	r3, #1
 8005d62:	e7e3      	b.n	8005d2c <_dtoa_r+0x9cc>
 8005d64:	9a02      	ldr	r2, [sp, #8]
 8005d66:	2a00      	cmp	r2, #0
 8005d68:	db04      	blt.n	8005d74 <_dtoa_r+0xa14>
 8005d6a:	d123      	bne.n	8005db4 <_dtoa_r+0xa54>
 8005d6c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005d6e:	bb0a      	cbnz	r2, 8005db4 <_dtoa_r+0xa54>
 8005d70:	9a08      	ldr	r2, [sp, #32]
 8005d72:	b9fa      	cbnz	r2, 8005db4 <_dtoa_r+0xa54>
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	ddec      	ble.n	8005d52 <_dtoa_r+0x9f2>
 8005d78:	4659      	mov	r1, fp
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	f000 fa8d 	bl	800629c <__lshift>
 8005d82:	4631      	mov	r1, r6
 8005d84:	4683      	mov	fp, r0
 8005d86:	f000 fadd 	bl	8006344 <__mcmp>
 8005d8a:	2800      	cmp	r0, #0
 8005d8c:	dc03      	bgt.n	8005d96 <_dtoa_r+0xa36>
 8005d8e:	d1e0      	bne.n	8005d52 <_dtoa_r+0x9f2>
 8005d90:	f018 0f01 	tst.w	r8, #1
 8005d94:	d0dd      	beq.n	8005d52 <_dtoa_r+0x9f2>
 8005d96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005d9a:	d1d8      	bne.n	8005d4e <_dtoa_r+0x9ee>
 8005d9c:	9b07      	ldr	r3, [sp, #28]
 8005d9e:	9a07      	ldr	r2, [sp, #28]
 8005da0:	1c5d      	adds	r5, r3, #1
 8005da2:	2339      	movs	r3, #57	; 0x39
 8005da4:	7013      	strb	r3, [r2, #0]
 8005da6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005daa:	1e6a      	subs	r2, r5, #1
 8005dac:	2b39      	cmp	r3, #57	; 0x39
 8005dae:	d04d      	beq.n	8005e4c <_dtoa_r+0xaec>
 8005db0:	3301      	adds	r3, #1
 8005db2:	e052      	b.n	8005e5a <_dtoa_r+0xafa>
 8005db4:	9a07      	ldr	r2, [sp, #28]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f102 0501 	add.w	r5, r2, #1
 8005dbc:	dd06      	ble.n	8005dcc <_dtoa_r+0xa6c>
 8005dbe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005dc2:	d0eb      	beq.n	8005d9c <_dtoa_r+0xa3c>
 8005dc4:	f108 0801 	add.w	r8, r8, #1
 8005dc8:	9b07      	ldr	r3, [sp, #28]
 8005dca:	e7c4      	b.n	8005d56 <_dtoa_r+0x9f6>
 8005dcc:	9b06      	ldr	r3, [sp, #24]
 8005dce:	9a04      	ldr	r2, [sp, #16]
 8005dd0:	1aeb      	subs	r3, r5, r3
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005dd8:	d021      	beq.n	8005e1e <_dtoa_r+0xabe>
 8005dda:	4659      	mov	r1, fp
 8005ddc:	2300      	movs	r3, #0
 8005dde:	220a      	movs	r2, #10
 8005de0:	4620      	mov	r0, r4
 8005de2:	f000 f8e5 	bl	8005fb0 <__multadd>
 8005de6:	45b9      	cmp	r9, r7
 8005de8:	4683      	mov	fp, r0
 8005dea:	f04f 0300 	mov.w	r3, #0
 8005dee:	f04f 020a 	mov.w	r2, #10
 8005df2:	4649      	mov	r1, r9
 8005df4:	4620      	mov	r0, r4
 8005df6:	d105      	bne.n	8005e04 <_dtoa_r+0xaa4>
 8005df8:	f000 f8da 	bl	8005fb0 <__multadd>
 8005dfc:	4681      	mov	r9, r0
 8005dfe:	4607      	mov	r7, r0
 8005e00:	9507      	str	r5, [sp, #28]
 8005e02:	e778      	b.n	8005cf6 <_dtoa_r+0x996>
 8005e04:	f000 f8d4 	bl	8005fb0 <__multadd>
 8005e08:	4639      	mov	r1, r7
 8005e0a:	4681      	mov	r9, r0
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	220a      	movs	r2, #10
 8005e10:	4620      	mov	r0, r4
 8005e12:	f000 f8cd 	bl	8005fb0 <__multadd>
 8005e16:	4607      	mov	r7, r0
 8005e18:	e7f2      	b.n	8005e00 <_dtoa_r+0xaa0>
 8005e1a:	f04f 0900 	mov.w	r9, #0
 8005e1e:	4659      	mov	r1, fp
 8005e20:	2201      	movs	r2, #1
 8005e22:	4620      	mov	r0, r4
 8005e24:	f000 fa3a 	bl	800629c <__lshift>
 8005e28:	4631      	mov	r1, r6
 8005e2a:	4683      	mov	fp, r0
 8005e2c:	f000 fa8a 	bl	8006344 <__mcmp>
 8005e30:	2800      	cmp	r0, #0
 8005e32:	dcb8      	bgt.n	8005da6 <_dtoa_r+0xa46>
 8005e34:	d102      	bne.n	8005e3c <_dtoa_r+0xadc>
 8005e36:	f018 0f01 	tst.w	r8, #1
 8005e3a:	d1b4      	bne.n	8005da6 <_dtoa_r+0xa46>
 8005e3c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e40:	1e6a      	subs	r2, r5, #1
 8005e42:	2b30      	cmp	r3, #48	; 0x30
 8005e44:	f47f af0f 	bne.w	8005c66 <_dtoa_r+0x906>
 8005e48:	4615      	mov	r5, r2
 8005e4a:	e7f7      	b.n	8005e3c <_dtoa_r+0xadc>
 8005e4c:	9b06      	ldr	r3, [sp, #24]
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d105      	bne.n	8005e5e <_dtoa_r+0xafe>
 8005e52:	2331      	movs	r3, #49	; 0x31
 8005e54:	9a06      	ldr	r2, [sp, #24]
 8005e56:	f10a 0a01 	add.w	sl, sl, #1
 8005e5a:	7013      	strb	r3, [r2, #0]
 8005e5c:	e703      	b.n	8005c66 <_dtoa_r+0x906>
 8005e5e:	4615      	mov	r5, r2
 8005e60:	e7a1      	b.n	8005da6 <_dtoa_r+0xa46>
 8005e62:	4b17      	ldr	r3, [pc, #92]	; (8005ec0 <_dtoa_r+0xb60>)
 8005e64:	f7ff bae1 	b.w	800542a <_dtoa_r+0xca>
 8005e68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f47f aabb 	bne.w	80053e6 <_dtoa_r+0x86>
 8005e70:	4b14      	ldr	r3, [pc, #80]	; (8005ec4 <_dtoa_r+0xb64>)
 8005e72:	f7ff bada 	b.w	800542a <_dtoa_r+0xca>
 8005e76:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	f77f ae3f 	ble.w	8005afc <_dtoa_r+0x79c>
 8005e7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e80:	9308      	str	r3, [sp, #32]
 8005e82:	e653      	b.n	8005b2c <_dtoa_r+0x7cc>
 8005e84:	9b04      	ldr	r3, [sp, #16]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	dc03      	bgt.n	8005e92 <_dtoa_r+0xb32>
 8005e8a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	f73f aed5 	bgt.w	8005c3c <_dtoa_r+0x8dc>
 8005e92:	9d06      	ldr	r5, [sp, #24]
 8005e94:	4631      	mov	r1, r6
 8005e96:	4658      	mov	r0, fp
 8005e98:	f7ff f9d1 	bl	800523e <quorem>
 8005e9c:	9b06      	ldr	r3, [sp, #24]
 8005e9e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005ea2:	f805 8b01 	strb.w	r8, [r5], #1
 8005ea6:	9a04      	ldr	r2, [sp, #16]
 8005ea8:	1aeb      	subs	r3, r5, r3
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	ddb5      	ble.n	8005e1a <_dtoa_r+0xaba>
 8005eae:	4659      	mov	r1, fp
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	220a      	movs	r2, #10
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	f000 f87b 	bl	8005fb0 <__multadd>
 8005eba:	4683      	mov	fp, r0
 8005ebc:	e7ea      	b.n	8005e94 <_dtoa_r+0xb34>
 8005ebe:	bf00      	nop
 8005ec0:	08006ba8 	.word	0x08006ba8
 8005ec4:	08006bcc 	.word	0x08006bcc

08005ec8 <_localeconv_r>:
 8005ec8:	4b04      	ldr	r3, [pc, #16]	; (8005edc <_localeconv_r+0x14>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6a18      	ldr	r0, [r3, #32]
 8005ece:	4b04      	ldr	r3, [pc, #16]	; (8005ee0 <_localeconv_r+0x18>)
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	bf08      	it	eq
 8005ed4:	4618      	moveq	r0, r3
 8005ed6:	30f0      	adds	r0, #240	; 0xf0
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	20000064 	.word	0x20000064
 8005ee0:	200000c8 	.word	0x200000c8

08005ee4 <memchr>:
 8005ee4:	b510      	push	{r4, lr}
 8005ee6:	b2c9      	uxtb	r1, r1
 8005ee8:	4402      	add	r2, r0
 8005eea:	4290      	cmp	r0, r2
 8005eec:	4603      	mov	r3, r0
 8005eee:	d101      	bne.n	8005ef4 <memchr+0x10>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	e003      	b.n	8005efc <memchr+0x18>
 8005ef4:	781c      	ldrb	r4, [r3, #0]
 8005ef6:	3001      	adds	r0, #1
 8005ef8:	428c      	cmp	r4, r1
 8005efa:	d1f6      	bne.n	8005eea <memchr+0x6>
 8005efc:	4618      	mov	r0, r3
 8005efe:	bd10      	pop	{r4, pc}

08005f00 <memcpy>:
 8005f00:	b510      	push	{r4, lr}
 8005f02:	1e43      	subs	r3, r0, #1
 8005f04:	440a      	add	r2, r1
 8005f06:	4291      	cmp	r1, r2
 8005f08:	d100      	bne.n	8005f0c <memcpy+0xc>
 8005f0a:	bd10      	pop	{r4, pc}
 8005f0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f14:	e7f7      	b.n	8005f06 <memcpy+0x6>

08005f16 <__malloc_lock>:
 8005f16:	4770      	bx	lr

08005f18 <__malloc_unlock>:
 8005f18:	4770      	bx	lr

08005f1a <_Balloc>:
 8005f1a:	b570      	push	{r4, r5, r6, lr}
 8005f1c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f1e:	4604      	mov	r4, r0
 8005f20:	460e      	mov	r6, r1
 8005f22:	b93d      	cbnz	r5, 8005f34 <_Balloc+0x1a>
 8005f24:	2010      	movs	r0, #16
 8005f26:	f7fe fc09 	bl	800473c <malloc>
 8005f2a:	6260      	str	r0, [r4, #36]	; 0x24
 8005f2c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f30:	6005      	str	r5, [r0, #0]
 8005f32:	60c5      	str	r5, [r0, #12]
 8005f34:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005f36:	68eb      	ldr	r3, [r5, #12]
 8005f38:	b183      	cbz	r3, 8005f5c <_Balloc+0x42>
 8005f3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005f42:	b9b8      	cbnz	r0, 8005f74 <_Balloc+0x5a>
 8005f44:	2101      	movs	r1, #1
 8005f46:	fa01 f506 	lsl.w	r5, r1, r6
 8005f4a:	1d6a      	adds	r2, r5, #5
 8005f4c:	0092      	lsls	r2, r2, #2
 8005f4e:	4620      	mov	r0, r4
 8005f50:	f000 fabf 	bl	80064d2 <_calloc_r>
 8005f54:	b160      	cbz	r0, 8005f70 <_Balloc+0x56>
 8005f56:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005f5a:	e00e      	b.n	8005f7a <_Balloc+0x60>
 8005f5c:	2221      	movs	r2, #33	; 0x21
 8005f5e:	2104      	movs	r1, #4
 8005f60:	4620      	mov	r0, r4
 8005f62:	f000 fab6 	bl	80064d2 <_calloc_r>
 8005f66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f68:	60e8      	str	r0, [r5, #12]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1e4      	bne.n	8005f3a <_Balloc+0x20>
 8005f70:	2000      	movs	r0, #0
 8005f72:	bd70      	pop	{r4, r5, r6, pc}
 8005f74:	6802      	ldr	r2, [r0, #0]
 8005f76:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f80:	e7f7      	b.n	8005f72 <_Balloc+0x58>

08005f82 <_Bfree>:
 8005f82:	b570      	push	{r4, r5, r6, lr}
 8005f84:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005f86:	4606      	mov	r6, r0
 8005f88:	460d      	mov	r5, r1
 8005f8a:	b93c      	cbnz	r4, 8005f9c <_Bfree+0x1a>
 8005f8c:	2010      	movs	r0, #16
 8005f8e:	f7fe fbd5 	bl	800473c <malloc>
 8005f92:	6270      	str	r0, [r6, #36]	; 0x24
 8005f94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f98:	6004      	str	r4, [r0, #0]
 8005f9a:	60c4      	str	r4, [r0, #12]
 8005f9c:	b13d      	cbz	r5, 8005fae <_Bfree+0x2c>
 8005f9e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005fa0:	686a      	ldr	r2, [r5, #4]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005fa8:	6029      	str	r1, [r5, #0]
 8005faa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005fae:	bd70      	pop	{r4, r5, r6, pc}

08005fb0 <__multadd>:
 8005fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb4:	461f      	mov	r7, r3
 8005fb6:	4606      	mov	r6, r0
 8005fb8:	460c      	mov	r4, r1
 8005fba:	2300      	movs	r3, #0
 8005fbc:	690d      	ldr	r5, [r1, #16]
 8005fbe:	f101 0c14 	add.w	ip, r1, #20
 8005fc2:	f8dc 0000 	ldr.w	r0, [ip]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	b281      	uxth	r1, r0
 8005fca:	fb02 7101 	mla	r1, r2, r1, r7
 8005fce:	0c00      	lsrs	r0, r0, #16
 8005fd0:	0c0f      	lsrs	r7, r1, #16
 8005fd2:	fb02 7000 	mla	r0, r2, r0, r7
 8005fd6:	b289      	uxth	r1, r1
 8005fd8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005fdc:	429d      	cmp	r5, r3
 8005fde:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005fe2:	f84c 1b04 	str.w	r1, [ip], #4
 8005fe6:	dcec      	bgt.n	8005fc2 <__multadd+0x12>
 8005fe8:	b1d7      	cbz	r7, 8006020 <__multadd+0x70>
 8005fea:	68a3      	ldr	r3, [r4, #8]
 8005fec:	42ab      	cmp	r3, r5
 8005fee:	dc12      	bgt.n	8006016 <__multadd+0x66>
 8005ff0:	6861      	ldr	r1, [r4, #4]
 8005ff2:	4630      	mov	r0, r6
 8005ff4:	3101      	adds	r1, #1
 8005ff6:	f7ff ff90 	bl	8005f1a <_Balloc>
 8005ffa:	4680      	mov	r8, r0
 8005ffc:	6922      	ldr	r2, [r4, #16]
 8005ffe:	f104 010c 	add.w	r1, r4, #12
 8006002:	3202      	adds	r2, #2
 8006004:	0092      	lsls	r2, r2, #2
 8006006:	300c      	adds	r0, #12
 8006008:	f7ff ff7a 	bl	8005f00 <memcpy>
 800600c:	4621      	mov	r1, r4
 800600e:	4630      	mov	r0, r6
 8006010:	f7ff ffb7 	bl	8005f82 <_Bfree>
 8006014:	4644      	mov	r4, r8
 8006016:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800601a:	3501      	adds	r5, #1
 800601c:	615f      	str	r7, [r3, #20]
 800601e:	6125      	str	r5, [r4, #16]
 8006020:	4620      	mov	r0, r4
 8006022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006026 <__hi0bits>:
 8006026:	0c02      	lsrs	r2, r0, #16
 8006028:	0412      	lsls	r2, r2, #16
 800602a:	4603      	mov	r3, r0
 800602c:	b9b2      	cbnz	r2, 800605c <__hi0bits+0x36>
 800602e:	0403      	lsls	r3, r0, #16
 8006030:	2010      	movs	r0, #16
 8006032:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006036:	bf04      	itt	eq
 8006038:	021b      	lsleq	r3, r3, #8
 800603a:	3008      	addeq	r0, #8
 800603c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006040:	bf04      	itt	eq
 8006042:	011b      	lsleq	r3, r3, #4
 8006044:	3004      	addeq	r0, #4
 8006046:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800604a:	bf04      	itt	eq
 800604c:	009b      	lsleq	r3, r3, #2
 800604e:	3002      	addeq	r0, #2
 8006050:	2b00      	cmp	r3, #0
 8006052:	db06      	blt.n	8006062 <__hi0bits+0x3c>
 8006054:	005b      	lsls	r3, r3, #1
 8006056:	d503      	bpl.n	8006060 <__hi0bits+0x3a>
 8006058:	3001      	adds	r0, #1
 800605a:	4770      	bx	lr
 800605c:	2000      	movs	r0, #0
 800605e:	e7e8      	b.n	8006032 <__hi0bits+0xc>
 8006060:	2020      	movs	r0, #32
 8006062:	4770      	bx	lr

08006064 <__lo0bits>:
 8006064:	6803      	ldr	r3, [r0, #0]
 8006066:	4601      	mov	r1, r0
 8006068:	f013 0207 	ands.w	r2, r3, #7
 800606c:	d00b      	beq.n	8006086 <__lo0bits+0x22>
 800606e:	07da      	lsls	r2, r3, #31
 8006070:	d423      	bmi.n	80060ba <__lo0bits+0x56>
 8006072:	0798      	lsls	r0, r3, #30
 8006074:	bf49      	itett	mi
 8006076:	085b      	lsrmi	r3, r3, #1
 8006078:	089b      	lsrpl	r3, r3, #2
 800607a:	2001      	movmi	r0, #1
 800607c:	600b      	strmi	r3, [r1, #0]
 800607e:	bf5c      	itt	pl
 8006080:	600b      	strpl	r3, [r1, #0]
 8006082:	2002      	movpl	r0, #2
 8006084:	4770      	bx	lr
 8006086:	b298      	uxth	r0, r3
 8006088:	b9a8      	cbnz	r0, 80060b6 <__lo0bits+0x52>
 800608a:	2010      	movs	r0, #16
 800608c:	0c1b      	lsrs	r3, r3, #16
 800608e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006092:	bf04      	itt	eq
 8006094:	0a1b      	lsreq	r3, r3, #8
 8006096:	3008      	addeq	r0, #8
 8006098:	071a      	lsls	r2, r3, #28
 800609a:	bf04      	itt	eq
 800609c:	091b      	lsreq	r3, r3, #4
 800609e:	3004      	addeq	r0, #4
 80060a0:	079a      	lsls	r2, r3, #30
 80060a2:	bf04      	itt	eq
 80060a4:	089b      	lsreq	r3, r3, #2
 80060a6:	3002      	addeq	r0, #2
 80060a8:	07da      	lsls	r2, r3, #31
 80060aa:	d402      	bmi.n	80060b2 <__lo0bits+0x4e>
 80060ac:	085b      	lsrs	r3, r3, #1
 80060ae:	d006      	beq.n	80060be <__lo0bits+0x5a>
 80060b0:	3001      	adds	r0, #1
 80060b2:	600b      	str	r3, [r1, #0]
 80060b4:	4770      	bx	lr
 80060b6:	4610      	mov	r0, r2
 80060b8:	e7e9      	b.n	800608e <__lo0bits+0x2a>
 80060ba:	2000      	movs	r0, #0
 80060bc:	4770      	bx	lr
 80060be:	2020      	movs	r0, #32
 80060c0:	4770      	bx	lr

080060c2 <__i2b>:
 80060c2:	b510      	push	{r4, lr}
 80060c4:	460c      	mov	r4, r1
 80060c6:	2101      	movs	r1, #1
 80060c8:	f7ff ff27 	bl	8005f1a <_Balloc>
 80060cc:	2201      	movs	r2, #1
 80060ce:	6144      	str	r4, [r0, #20]
 80060d0:	6102      	str	r2, [r0, #16]
 80060d2:	bd10      	pop	{r4, pc}

080060d4 <__multiply>:
 80060d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d8:	4614      	mov	r4, r2
 80060da:	690a      	ldr	r2, [r1, #16]
 80060dc:	6923      	ldr	r3, [r4, #16]
 80060de:	4688      	mov	r8, r1
 80060e0:	429a      	cmp	r2, r3
 80060e2:	bfbe      	ittt	lt
 80060e4:	460b      	movlt	r3, r1
 80060e6:	46a0      	movlt	r8, r4
 80060e8:	461c      	movlt	r4, r3
 80060ea:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80060ee:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80060f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80060f6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80060fa:	eb07 0609 	add.w	r6, r7, r9
 80060fe:	42b3      	cmp	r3, r6
 8006100:	bfb8      	it	lt
 8006102:	3101      	addlt	r1, #1
 8006104:	f7ff ff09 	bl	8005f1a <_Balloc>
 8006108:	f100 0514 	add.w	r5, r0, #20
 800610c:	462b      	mov	r3, r5
 800610e:	2200      	movs	r2, #0
 8006110:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006114:	4573      	cmp	r3, lr
 8006116:	d316      	bcc.n	8006146 <__multiply+0x72>
 8006118:	f104 0214 	add.w	r2, r4, #20
 800611c:	f108 0114 	add.w	r1, r8, #20
 8006120:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006124:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	9b00      	ldr	r3, [sp, #0]
 800612c:	9201      	str	r2, [sp, #4]
 800612e:	4293      	cmp	r3, r2
 8006130:	d80c      	bhi.n	800614c <__multiply+0x78>
 8006132:	2e00      	cmp	r6, #0
 8006134:	dd03      	ble.n	800613e <__multiply+0x6a>
 8006136:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800613a:	2b00      	cmp	r3, #0
 800613c:	d05d      	beq.n	80061fa <__multiply+0x126>
 800613e:	6106      	str	r6, [r0, #16]
 8006140:	b003      	add	sp, #12
 8006142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006146:	f843 2b04 	str.w	r2, [r3], #4
 800614a:	e7e3      	b.n	8006114 <__multiply+0x40>
 800614c:	f8b2 b000 	ldrh.w	fp, [r2]
 8006150:	f1bb 0f00 	cmp.w	fp, #0
 8006154:	d023      	beq.n	800619e <__multiply+0xca>
 8006156:	4689      	mov	r9, r1
 8006158:	46ac      	mov	ip, r5
 800615a:	f04f 0800 	mov.w	r8, #0
 800615e:	f859 4b04 	ldr.w	r4, [r9], #4
 8006162:	f8dc a000 	ldr.w	sl, [ip]
 8006166:	b2a3      	uxth	r3, r4
 8006168:	fa1f fa8a 	uxth.w	sl, sl
 800616c:	fb0b a303 	mla	r3, fp, r3, sl
 8006170:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006174:	f8dc 4000 	ldr.w	r4, [ip]
 8006178:	4443      	add	r3, r8
 800617a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800617e:	fb0b 840a 	mla	r4, fp, sl, r8
 8006182:	46e2      	mov	sl, ip
 8006184:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006188:	b29b      	uxth	r3, r3
 800618a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800618e:	454f      	cmp	r7, r9
 8006190:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006194:	f84a 3b04 	str.w	r3, [sl], #4
 8006198:	d82b      	bhi.n	80061f2 <__multiply+0x11e>
 800619a:	f8cc 8004 	str.w	r8, [ip, #4]
 800619e:	9b01      	ldr	r3, [sp, #4]
 80061a0:	3204      	adds	r2, #4
 80061a2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80061a6:	f1ba 0f00 	cmp.w	sl, #0
 80061aa:	d020      	beq.n	80061ee <__multiply+0x11a>
 80061ac:	4689      	mov	r9, r1
 80061ae:	46a8      	mov	r8, r5
 80061b0:	f04f 0b00 	mov.w	fp, #0
 80061b4:	682b      	ldr	r3, [r5, #0]
 80061b6:	f8b9 c000 	ldrh.w	ip, [r9]
 80061ba:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80061be:	b29b      	uxth	r3, r3
 80061c0:	fb0a 440c 	mla	r4, sl, ip, r4
 80061c4:	46c4      	mov	ip, r8
 80061c6:	445c      	add	r4, fp
 80061c8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80061cc:	f84c 3b04 	str.w	r3, [ip], #4
 80061d0:	f859 3b04 	ldr.w	r3, [r9], #4
 80061d4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80061d8:	0c1b      	lsrs	r3, r3, #16
 80061da:	fb0a b303 	mla	r3, sl, r3, fp
 80061de:	454f      	cmp	r7, r9
 80061e0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80061e4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80061e8:	d805      	bhi.n	80061f6 <__multiply+0x122>
 80061ea:	f8c8 3004 	str.w	r3, [r8, #4]
 80061ee:	3504      	adds	r5, #4
 80061f0:	e79b      	b.n	800612a <__multiply+0x56>
 80061f2:	46d4      	mov	ip, sl
 80061f4:	e7b3      	b.n	800615e <__multiply+0x8a>
 80061f6:	46e0      	mov	r8, ip
 80061f8:	e7dd      	b.n	80061b6 <__multiply+0xe2>
 80061fa:	3e01      	subs	r6, #1
 80061fc:	e799      	b.n	8006132 <__multiply+0x5e>
	...

08006200 <__pow5mult>:
 8006200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006204:	4615      	mov	r5, r2
 8006206:	f012 0203 	ands.w	r2, r2, #3
 800620a:	4606      	mov	r6, r0
 800620c:	460f      	mov	r7, r1
 800620e:	d007      	beq.n	8006220 <__pow5mult+0x20>
 8006210:	4c21      	ldr	r4, [pc, #132]	; (8006298 <__pow5mult+0x98>)
 8006212:	3a01      	subs	r2, #1
 8006214:	2300      	movs	r3, #0
 8006216:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800621a:	f7ff fec9 	bl	8005fb0 <__multadd>
 800621e:	4607      	mov	r7, r0
 8006220:	10ad      	asrs	r5, r5, #2
 8006222:	d035      	beq.n	8006290 <__pow5mult+0x90>
 8006224:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006226:	b93c      	cbnz	r4, 8006238 <__pow5mult+0x38>
 8006228:	2010      	movs	r0, #16
 800622a:	f7fe fa87 	bl	800473c <malloc>
 800622e:	6270      	str	r0, [r6, #36]	; 0x24
 8006230:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006234:	6004      	str	r4, [r0, #0]
 8006236:	60c4      	str	r4, [r0, #12]
 8006238:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800623c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006240:	b94c      	cbnz	r4, 8006256 <__pow5mult+0x56>
 8006242:	f240 2171 	movw	r1, #625	; 0x271
 8006246:	4630      	mov	r0, r6
 8006248:	f7ff ff3b 	bl	80060c2 <__i2b>
 800624c:	2300      	movs	r3, #0
 800624e:	4604      	mov	r4, r0
 8006250:	f8c8 0008 	str.w	r0, [r8, #8]
 8006254:	6003      	str	r3, [r0, #0]
 8006256:	f04f 0800 	mov.w	r8, #0
 800625a:	07eb      	lsls	r3, r5, #31
 800625c:	d50a      	bpl.n	8006274 <__pow5mult+0x74>
 800625e:	4639      	mov	r1, r7
 8006260:	4622      	mov	r2, r4
 8006262:	4630      	mov	r0, r6
 8006264:	f7ff ff36 	bl	80060d4 <__multiply>
 8006268:	4681      	mov	r9, r0
 800626a:	4639      	mov	r1, r7
 800626c:	4630      	mov	r0, r6
 800626e:	f7ff fe88 	bl	8005f82 <_Bfree>
 8006272:	464f      	mov	r7, r9
 8006274:	106d      	asrs	r5, r5, #1
 8006276:	d00b      	beq.n	8006290 <__pow5mult+0x90>
 8006278:	6820      	ldr	r0, [r4, #0]
 800627a:	b938      	cbnz	r0, 800628c <__pow5mult+0x8c>
 800627c:	4622      	mov	r2, r4
 800627e:	4621      	mov	r1, r4
 8006280:	4630      	mov	r0, r6
 8006282:	f7ff ff27 	bl	80060d4 <__multiply>
 8006286:	6020      	str	r0, [r4, #0]
 8006288:	f8c0 8000 	str.w	r8, [r0]
 800628c:	4604      	mov	r4, r0
 800628e:	e7e4      	b.n	800625a <__pow5mult+0x5a>
 8006290:	4638      	mov	r0, r7
 8006292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006296:	bf00      	nop
 8006298:	08006cd0 	.word	0x08006cd0

0800629c <__lshift>:
 800629c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062a0:	460c      	mov	r4, r1
 80062a2:	4607      	mov	r7, r0
 80062a4:	4616      	mov	r6, r2
 80062a6:	6923      	ldr	r3, [r4, #16]
 80062a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80062ac:	eb0a 0903 	add.w	r9, sl, r3
 80062b0:	6849      	ldr	r1, [r1, #4]
 80062b2:	68a3      	ldr	r3, [r4, #8]
 80062b4:	f109 0501 	add.w	r5, r9, #1
 80062b8:	42ab      	cmp	r3, r5
 80062ba:	db32      	blt.n	8006322 <__lshift+0x86>
 80062bc:	4638      	mov	r0, r7
 80062be:	f7ff fe2c 	bl	8005f1a <_Balloc>
 80062c2:	2300      	movs	r3, #0
 80062c4:	4680      	mov	r8, r0
 80062c6:	461a      	mov	r2, r3
 80062c8:	f100 0114 	add.w	r1, r0, #20
 80062cc:	4553      	cmp	r3, sl
 80062ce:	db2b      	blt.n	8006328 <__lshift+0x8c>
 80062d0:	6920      	ldr	r0, [r4, #16]
 80062d2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80062d6:	f104 0314 	add.w	r3, r4, #20
 80062da:	f016 021f 	ands.w	r2, r6, #31
 80062de:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80062e2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80062e6:	d025      	beq.n	8006334 <__lshift+0x98>
 80062e8:	2000      	movs	r0, #0
 80062ea:	f1c2 0e20 	rsb	lr, r2, #32
 80062ee:	468a      	mov	sl, r1
 80062f0:	681e      	ldr	r6, [r3, #0]
 80062f2:	4096      	lsls	r6, r2
 80062f4:	4330      	orrs	r0, r6
 80062f6:	f84a 0b04 	str.w	r0, [sl], #4
 80062fa:	f853 0b04 	ldr.w	r0, [r3], #4
 80062fe:	459c      	cmp	ip, r3
 8006300:	fa20 f00e 	lsr.w	r0, r0, lr
 8006304:	d814      	bhi.n	8006330 <__lshift+0x94>
 8006306:	6048      	str	r0, [r1, #4]
 8006308:	b108      	cbz	r0, 800630e <__lshift+0x72>
 800630a:	f109 0502 	add.w	r5, r9, #2
 800630e:	3d01      	subs	r5, #1
 8006310:	4638      	mov	r0, r7
 8006312:	f8c8 5010 	str.w	r5, [r8, #16]
 8006316:	4621      	mov	r1, r4
 8006318:	f7ff fe33 	bl	8005f82 <_Bfree>
 800631c:	4640      	mov	r0, r8
 800631e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006322:	3101      	adds	r1, #1
 8006324:	005b      	lsls	r3, r3, #1
 8006326:	e7c7      	b.n	80062b8 <__lshift+0x1c>
 8006328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800632c:	3301      	adds	r3, #1
 800632e:	e7cd      	b.n	80062cc <__lshift+0x30>
 8006330:	4651      	mov	r1, sl
 8006332:	e7dc      	b.n	80062ee <__lshift+0x52>
 8006334:	3904      	subs	r1, #4
 8006336:	f853 2b04 	ldr.w	r2, [r3], #4
 800633a:	459c      	cmp	ip, r3
 800633c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006340:	d8f9      	bhi.n	8006336 <__lshift+0x9a>
 8006342:	e7e4      	b.n	800630e <__lshift+0x72>

08006344 <__mcmp>:
 8006344:	6903      	ldr	r3, [r0, #16]
 8006346:	690a      	ldr	r2, [r1, #16]
 8006348:	b530      	push	{r4, r5, lr}
 800634a:	1a9b      	subs	r3, r3, r2
 800634c:	d10c      	bne.n	8006368 <__mcmp+0x24>
 800634e:	0092      	lsls	r2, r2, #2
 8006350:	3014      	adds	r0, #20
 8006352:	3114      	adds	r1, #20
 8006354:	1884      	adds	r4, r0, r2
 8006356:	4411      	add	r1, r2
 8006358:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800635c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006360:	4295      	cmp	r5, r2
 8006362:	d003      	beq.n	800636c <__mcmp+0x28>
 8006364:	d305      	bcc.n	8006372 <__mcmp+0x2e>
 8006366:	2301      	movs	r3, #1
 8006368:	4618      	mov	r0, r3
 800636a:	bd30      	pop	{r4, r5, pc}
 800636c:	42a0      	cmp	r0, r4
 800636e:	d3f3      	bcc.n	8006358 <__mcmp+0x14>
 8006370:	e7fa      	b.n	8006368 <__mcmp+0x24>
 8006372:	f04f 33ff 	mov.w	r3, #4294967295
 8006376:	e7f7      	b.n	8006368 <__mcmp+0x24>

08006378 <__mdiff>:
 8006378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800637c:	460d      	mov	r5, r1
 800637e:	4607      	mov	r7, r0
 8006380:	4611      	mov	r1, r2
 8006382:	4628      	mov	r0, r5
 8006384:	4614      	mov	r4, r2
 8006386:	f7ff ffdd 	bl	8006344 <__mcmp>
 800638a:	1e06      	subs	r6, r0, #0
 800638c:	d108      	bne.n	80063a0 <__mdiff+0x28>
 800638e:	4631      	mov	r1, r6
 8006390:	4638      	mov	r0, r7
 8006392:	f7ff fdc2 	bl	8005f1a <_Balloc>
 8006396:	2301      	movs	r3, #1
 8006398:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800639c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063a0:	bfa4      	itt	ge
 80063a2:	4623      	movge	r3, r4
 80063a4:	462c      	movge	r4, r5
 80063a6:	4638      	mov	r0, r7
 80063a8:	6861      	ldr	r1, [r4, #4]
 80063aa:	bfa6      	itte	ge
 80063ac:	461d      	movge	r5, r3
 80063ae:	2600      	movge	r6, #0
 80063b0:	2601      	movlt	r6, #1
 80063b2:	f7ff fdb2 	bl	8005f1a <_Balloc>
 80063b6:	f04f 0e00 	mov.w	lr, #0
 80063ba:	60c6      	str	r6, [r0, #12]
 80063bc:	692b      	ldr	r3, [r5, #16]
 80063be:	6926      	ldr	r6, [r4, #16]
 80063c0:	f104 0214 	add.w	r2, r4, #20
 80063c4:	f105 0914 	add.w	r9, r5, #20
 80063c8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80063cc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80063d0:	f100 0114 	add.w	r1, r0, #20
 80063d4:	f852 ab04 	ldr.w	sl, [r2], #4
 80063d8:	f859 5b04 	ldr.w	r5, [r9], #4
 80063dc:	fa1f f38a 	uxth.w	r3, sl
 80063e0:	4473      	add	r3, lr
 80063e2:	b2ac      	uxth	r4, r5
 80063e4:	1b1b      	subs	r3, r3, r4
 80063e6:	0c2c      	lsrs	r4, r5, #16
 80063e8:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80063ec:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80063f6:	45c8      	cmp	r8, r9
 80063f8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80063fc:	4694      	mov	ip, r2
 80063fe:	f841 4b04 	str.w	r4, [r1], #4
 8006402:	d8e7      	bhi.n	80063d4 <__mdiff+0x5c>
 8006404:	45bc      	cmp	ip, r7
 8006406:	d304      	bcc.n	8006412 <__mdiff+0x9a>
 8006408:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800640c:	b183      	cbz	r3, 8006430 <__mdiff+0xb8>
 800640e:	6106      	str	r6, [r0, #16]
 8006410:	e7c4      	b.n	800639c <__mdiff+0x24>
 8006412:	f85c 4b04 	ldr.w	r4, [ip], #4
 8006416:	b2a2      	uxth	r2, r4
 8006418:	4472      	add	r2, lr
 800641a:	1413      	asrs	r3, r2, #16
 800641c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006420:	b292      	uxth	r2, r2
 8006422:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006426:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800642a:	f841 2b04 	str.w	r2, [r1], #4
 800642e:	e7e9      	b.n	8006404 <__mdiff+0x8c>
 8006430:	3e01      	subs	r6, #1
 8006432:	e7e9      	b.n	8006408 <__mdiff+0x90>

08006434 <__d2b>:
 8006434:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006438:	461c      	mov	r4, r3
 800643a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800643e:	2101      	movs	r1, #1
 8006440:	4690      	mov	r8, r2
 8006442:	f7ff fd6a 	bl	8005f1a <_Balloc>
 8006446:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800644a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800644e:	4607      	mov	r7, r0
 8006450:	bb34      	cbnz	r4, 80064a0 <__d2b+0x6c>
 8006452:	9201      	str	r2, [sp, #4]
 8006454:	f1b8 0200 	subs.w	r2, r8, #0
 8006458:	d027      	beq.n	80064aa <__d2b+0x76>
 800645a:	a802      	add	r0, sp, #8
 800645c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006460:	f7ff fe00 	bl	8006064 <__lo0bits>
 8006464:	9900      	ldr	r1, [sp, #0]
 8006466:	b1f0      	cbz	r0, 80064a6 <__d2b+0x72>
 8006468:	9a01      	ldr	r2, [sp, #4]
 800646a:	f1c0 0320 	rsb	r3, r0, #32
 800646e:	fa02 f303 	lsl.w	r3, r2, r3
 8006472:	430b      	orrs	r3, r1
 8006474:	40c2      	lsrs	r2, r0
 8006476:	617b      	str	r3, [r7, #20]
 8006478:	9201      	str	r2, [sp, #4]
 800647a:	9b01      	ldr	r3, [sp, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	bf14      	ite	ne
 8006480:	2102      	movne	r1, #2
 8006482:	2101      	moveq	r1, #1
 8006484:	61bb      	str	r3, [r7, #24]
 8006486:	6139      	str	r1, [r7, #16]
 8006488:	b1c4      	cbz	r4, 80064bc <__d2b+0x88>
 800648a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800648e:	4404      	add	r4, r0
 8006490:	6034      	str	r4, [r6, #0]
 8006492:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006496:	6028      	str	r0, [r5, #0]
 8006498:	4638      	mov	r0, r7
 800649a:	b002      	add	sp, #8
 800649c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064a0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80064a4:	e7d5      	b.n	8006452 <__d2b+0x1e>
 80064a6:	6179      	str	r1, [r7, #20]
 80064a8:	e7e7      	b.n	800647a <__d2b+0x46>
 80064aa:	a801      	add	r0, sp, #4
 80064ac:	f7ff fdda 	bl	8006064 <__lo0bits>
 80064b0:	2101      	movs	r1, #1
 80064b2:	9b01      	ldr	r3, [sp, #4]
 80064b4:	6139      	str	r1, [r7, #16]
 80064b6:	617b      	str	r3, [r7, #20]
 80064b8:	3020      	adds	r0, #32
 80064ba:	e7e5      	b.n	8006488 <__d2b+0x54>
 80064bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80064c0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80064c4:	6030      	str	r0, [r6, #0]
 80064c6:	6918      	ldr	r0, [r3, #16]
 80064c8:	f7ff fdad 	bl	8006026 <__hi0bits>
 80064cc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80064d0:	e7e1      	b.n	8006496 <__d2b+0x62>

080064d2 <_calloc_r>:
 80064d2:	b538      	push	{r3, r4, r5, lr}
 80064d4:	fb02 f401 	mul.w	r4, r2, r1
 80064d8:	4621      	mov	r1, r4
 80064da:	f7fe f98b 	bl	80047f4 <_malloc_r>
 80064de:	4605      	mov	r5, r0
 80064e0:	b118      	cbz	r0, 80064ea <_calloc_r+0x18>
 80064e2:	4622      	mov	r2, r4
 80064e4:	2100      	movs	r1, #0
 80064e6:	f7fe f931 	bl	800474c <memset>
 80064ea:	4628      	mov	r0, r5
 80064ec:	bd38      	pop	{r3, r4, r5, pc}

080064ee <__ssputs_r>:
 80064ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064f2:	688e      	ldr	r6, [r1, #8]
 80064f4:	4682      	mov	sl, r0
 80064f6:	429e      	cmp	r6, r3
 80064f8:	460c      	mov	r4, r1
 80064fa:	4690      	mov	r8, r2
 80064fc:	4699      	mov	r9, r3
 80064fe:	d837      	bhi.n	8006570 <__ssputs_r+0x82>
 8006500:	898a      	ldrh	r2, [r1, #12]
 8006502:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006506:	d031      	beq.n	800656c <__ssputs_r+0x7e>
 8006508:	2302      	movs	r3, #2
 800650a:	6825      	ldr	r5, [r4, #0]
 800650c:	6909      	ldr	r1, [r1, #16]
 800650e:	1a6f      	subs	r7, r5, r1
 8006510:	6965      	ldr	r5, [r4, #20]
 8006512:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006516:	fb95 f5f3 	sdiv	r5, r5, r3
 800651a:	f109 0301 	add.w	r3, r9, #1
 800651e:	443b      	add	r3, r7
 8006520:	429d      	cmp	r5, r3
 8006522:	bf38      	it	cc
 8006524:	461d      	movcc	r5, r3
 8006526:	0553      	lsls	r3, r2, #21
 8006528:	d530      	bpl.n	800658c <__ssputs_r+0x9e>
 800652a:	4629      	mov	r1, r5
 800652c:	f7fe f962 	bl	80047f4 <_malloc_r>
 8006530:	4606      	mov	r6, r0
 8006532:	b950      	cbnz	r0, 800654a <__ssputs_r+0x5c>
 8006534:	230c      	movs	r3, #12
 8006536:	f04f 30ff 	mov.w	r0, #4294967295
 800653a:	f8ca 3000 	str.w	r3, [sl]
 800653e:	89a3      	ldrh	r3, [r4, #12]
 8006540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006544:	81a3      	strh	r3, [r4, #12]
 8006546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800654a:	463a      	mov	r2, r7
 800654c:	6921      	ldr	r1, [r4, #16]
 800654e:	f7ff fcd7 	bl	8005f00 <memcpy>
 8006552:	89a3      	ldrh	r3, [r4, #12]
 8006554:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800655c:	81a3      	strh	r3, [r4, #12]
 800655e:	6126      	str	r6, [r4, #16]
 8006560:	443e      	add	r6, r7
 8006562:	6026      	str	r6, [r4, #0]
 8006564:	464e      	mov	r6, r9
 8006566:	6165      	str	r5, [r4, #20]
 8006568:	1bed      	subs	r5, r5, r7
 800656a:	60a5      	str	r5, [r4, #8]
 800656c:	454e      	cmp	r6, r9
 800656e:	d900      	bls.n	8006572 <__ssputs_r+0x84>
 8006570:	464e      	mov	r6, r9
 8006572:	4632      	mov	r2, r6
 8006574:	4641      	mov	r1, r8
 8006576:	6820      	ldr	r0, [r4, #0]
 8006578:	f000 f91e 	bl	80067b8 <memmove>
 800657c:	68a3      	ldr	r3, [r4, #8]
 800657e:	2000      	movs	r0, #0
 8006580:	1b9b      	subs	r3, r3, r6
 8006582:	60a3      	str	r3, [r4, #8]
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	441e      	add	r6, r3
 8006588:	6026      	str	r6, [r4, #0]
 800658a:	e7dc      	b.n	8006546 <__ssputs_r+0x58>
 800658c:	462a      	mov	r2, r5
 800658e:	f000 f92c 	bl	80067ea <_realloc_r>
 8006592:	4606      	mov	r6, r0
 8006594:	2800      	cmp	r0, #0
 8006596:	d1e2      	bne.n	800655e <__ssputs_r+0x70>
 8006598:	6921      	ldr	r1, [r4, #16]
 800659a:	4650      	mov	r0, sl
 800659c:	f7fe f8de 	bl	800475c <_free_r>
 80065a0:	e7c8      	b.n	8006534 <__ssputs_r+0x46>
	...

080065a4 <_svfiprintf_r>:
 80065a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a8:	461d      	mov	r5, r3
 80065aa:	898b      	ldrh	r3, [r1, #12]
 80065ac:	b09d      	sub	sp, #116	; 0x74
 80065ae:	061f      	lsls	r7, r3, #24
 80065b0:	4680      	mov	r8, r0
 80065b2:	460c      	mov	r4, r1
 80065b4:	4616      	mov	r6, r2
 80065b6:	d50f      	bpl.n	80065d8 <_svfiprintf_r+0x34>
 80065b8:	690b      	ldr	r3, [r1, #16]
 80065ba:	b96b      	cbnz	r3, 80065d8 <_svfiprintf_r+0x34>
 80065bc:	2140      	movs	r1, #64	; 0x40
 80065be:	f7fe f919 	bl	80047f4 <_malloc_r>
 80065c2:	6020      	str	r0, [r4, #0]
 80065c4:	6120      	str	r0, [r4, #16]
 80065c6:	b928      	cbnz	r0, 80065d4 <_svfiprintf_r+0x30>
 80065c8:	230c      	movs	r3, #12
 80065ca:	f8c8 3000 	str.w	r3, [r8]
 80065ce:	f04f 30ff 	mov.w	r0, #4294967295
 80065d2:	e0c8      	b.n	8006766 <_svfiprintf_r+0x1c2>
 80065d4:	2340      	movs	r3, #64	; 0x40
 80065d6:	6163      	str	r3, [r4, #20]
 80065d8:	2300      	movs	r3, #0
 80065da:	9309      	str	r3, [sp, #36]	; 0x24
 80065dc:	2320      	movs	r3, #32
 80065de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065e2:	2330      	movs	r3, #48	; 0x30
 80065e4:	f04f 0b01 	mov.w	fp, #1
 80065e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065ec:	9503      	str	r5, [sp, #12]
 80065ee:	4637      	mov	r7, r6
 80065f0:	463d      	mov	r5, r7
 80065f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80065f6:	b10b      	cbz	r3, 80065fc <_svfiprintf_r+0x58>
 80065f8:	2b25      	cmp	r3, #37	; 0x25
 80065fa:	d13e      	bne.n	800667a <_svfiprintf_r+0xd6>
 80065fc:	ebb7 0a06 	subs.w	sl, r7, r6
 8006600:	d00b      	beq.n	800661a <_svfiprintf_r+0x76>
 8006602:	4653      	mov	r3, sl
 8006604:	4632      	mov	r2, r6
 8006606:	4621      	mov	r1, r4
 8006608:	4640      	mov	r0, r8
 800660a:	f7ff ff70 	bl	80064ee <__ssputs_r>
 800660e:	3001      	adds	r0, #1
 8006610:	f000 80a4 	beq.w	800675c <_svfiprintf_r+0x1b8>
 8006614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006616:	4453      	add	r3, sl
 8006618:	9309      	str	r3, [sp, #36]	; 0x24
 800661a:	783b      	ldrb	r3, [r7, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 809d 	beq.w	800675c <_svfiprintf_r+0x1b8>
 8006622:	2300      	movs	r3, #0
 8006624:	f04f 32ff 	mov.w	r2, #4294967295
 8006628:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800662c:	9304      	str	r3, [sp, #16]
 800662e:	9307      	str	r3, [sp, #28]
 8006630:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006634:	931a      	str	r3, [sp, #104]	; 0x68
 8006636:	462f      	mov	r7, r5
 8006638:	2205      	movs	r2, #5
 800663a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800663e:	4850      	ldr	r0, [pc, #320]	; (8006780 <_svfiprintf_r+0x1dc>)
 8006640:	f7ff fc50 	bl	8005ee4 <memchr>
 8006644:	9b04      	ldr	r3, [sp, #16]
 8006646:	b9d0      	cbnz	r0, 800667e <_svfiprintf_r+0xda>
 8006648:	06d9      	lsls	r1, r3, #27
 800664a:	bf44      	itt	mi
 800664c:	2220      	movmi	r2, #32
 800664e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006652:	071a      	lsls	r2, r3, #28
 8006654:	bf44      	itt	mi
 8006656:	222b      	movmi	r2, #43	; 0x2b
 8006658:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800665c:	782a      	ldrb	r2, [r5, #0]
 800665e:	2a2a      	cmp	r2, #42	; 0x2a
 8006660:	d015      	beq.n	800668e <_svfiprintf_r+0xea>
 8006662:	462f      	mov	r7, r5
 8006664:	2000      	movs	r0, #0
 8006666:	250a      	movs	r5, #10
 8006668:	9a07      	ldr	r2, [sp, #28]
 800666a:	4639      	mov	r1, r7
 800666c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006670:	3b30      	subs	r3, #48	; 0x30
 8006672:	2b09      	cmp	r3, #9
 8006674:	d94d      	bls.n	8006712 <_svfiprintf_r+0x16e>
 8006676:	b1b8      	cbz	r0, 80066a8 <_svfiprintf_r+0x104>
 8006678:	e00f      	b.n	800669a <_svfiprintf_r+0xf6>
 800667a:	462f      	mov	r7, r5
 800667c:	e7b8      	b.n	80065f0 <_svfiprintf_r+0x4c>
 800667e:	4a40      	ldr	r2, [pc, #256]	; (8006780 <_svfiprintf_r+0x1dc>)
 8006680:	463d      	mov	r5, r7
 8006682:	1a80      	subs	r0, r0, r2
 8006684:	fa0b f000 	lsl.w	r0, fp, r0
 8006688:	4318      	orrs	r0, r3
 800668a:	9004      	str	r0, [sp, #16]
 800668c:	e7d3      	b.n	8006636 <_svfiprintf_r+0x92>
 800668e:	9a03      	ldr	r2, [sp, #12]
 8006690:	1d11      	adds	r1, r2, #4
 8006692:	6812      	ldr	r2, [r2, #0]
 8006694:	9103      	str	r1, [sp, #12]
 8006696:	2a00      	cmp	r2, #0
 8006698:	db01      	blt.n	800669e <_svfiprintf_r+0xfa>
 800669a:	9207      	str	r2, [sp, #28]
 800669c:	e004      	b.n	80066a8 <_svfiprintf_r+0x104>
 800669e:	4252      	negs	r2, r2
 80066a0:	f043 0302 	orr.w	r3, r3, #2
 80066a4:	9207      	str	r2, [sp, #28]
 80066a6:	9304      	str	r3, [sp, #16]
 80066a8:	783b      	ldrb	r3, [r7, #0]
 80066aa:	2b2e      	cmp	r3, #46	; 0x2e
 80066ac:	d10c      	bne.n	80066c8 <_svfiprintf_r+0x124>
 80066ae:	787b      	ldrb	r3, [r7, #1]
 80066b0:	2b2a      	cmp	r3, #42	; 0x2a
 80066b2:	d133      	bne.n	800671c <_svfiprintf_r+0x178>
 80066b4:	9b03      	ldr	r3, [sp, #12]
 80066b6:	3702      	adds	r7, #2
 80066b8:	1d1a      	adds	r2, r3, #4
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	9203      	str	r2, [sp, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	bfb8      	it	lt
 80066c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80066c6:	9305      	str	r3, [sp, #20]
 80066c8:	4d2e      	ldr	r5, [pc, #184]	; (8006784 <_svfiprintf_r+0x1e0>)
 80066ca:	2203      	movs	r2, #3
 80066cc:	7839      	ldrb	r1, [r7, #0]
 80066ce:	4628      	mov	r0, r5
 80066d0:	f7ff fc08 	bl	8005ee4 <memchr>
 80066d4:	b138      	cbz	r0, 80066e6 <_svfiprintf_r+0x142>
 80066d6:	2340      	movs	r3, #64	; 0x40
 80066d8:	1b40      	subs	r0, r0, r5
 80066da:	fa03 f000 	lsl.w	r0, r3, r0
 80066de:	9b04      	ldr	r3, [sp, #16]
 80066e0:	3701      	adds	r7, #1
 80066e2:	4303      	orrs	r3, r0
 80066e4:	9304      	str	r3, [sp, #16]
 80066e6:	7839      	ldrb	r1, [r7, #0]
 80066e8:	2206      	movs	r2, #6
 80066ea:	4827      	ldr	r0, [pc, #156]	; (8006788 <_svfiprintf_r+0x1e4>)
 80066ec:	1c7e      	adds	r6, r7, #1
 80066ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066f2:	f7ff fbf7 	bl	8005ee4 <memchr>
 80066f6:	2800      	cmp	r0, #0
 80066f8:	d038      	beq.n	800676c <_svfiprintf_r+0x1c8>
 80066fa:	4b24      	ldr	r3, [pc, #144]	; (800678c <_svfiprintf_r+0x1e8>)
 80066fc:	bb13      	cbnz	r3, 8006744 <_svfiprintf_r+0x1a0>
 80066fe:	9b03      	ldr	r3, [sp, #12]
 8006700:	3307      	adds	r3, #7
 8006702:	f023 0307 	bic.w	r3, r3, #7
 8006706:	3308      	adds	r3, #8
 8006708:	9303      	str	r3, [sp, #12]
 800670a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800670c:	444b      	add	r3, r9
 800670e:	9309      	str	r3, [sp, #36]	; 0x24
 8006710:	e76d      	b.n	80065ee <_svfiprintf_r+0x4a>
 8006712:	fb05 3202 	mla	r2, r5, r2, r3
 8006716:	2001      	movs	r0, #1
 8006718:	460f      	mov	r7, r1
 800671a:	e7a6      	b.n	800666a <_svfiprintf_r+0xc6>
 800671c:	2300      	movs	r3, #0
 800671e:	250a      	movs	r5, #10
 8006720:	4619      	mov	r1, r3
 8006722:	3701      	adds	r7, #1
 8006724:	9305      	str	r3, [sp, #20]
 8006726:	4638      	mov	r0, r7
 8006728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800672c:	3a30      	subs	r2, #48	; 0x30
 800672e:	2a09      	cmp	r2, #9
 8006730:	d903      	bls.n	800673a <_svfiprintf_r+0x196>
 8006732:	2b00      	cmp	r3, #0
 8006734:	d0c8      	beq.n	80066c8 <_svfiprintf_r+0x124>
 8006736:	9105      	str	r1, [sp, #20]
 8006738:	e7c6      	b.n	80066c8 <_svfiprintf_r+0x124>
 800673a:	fb05 2101 	mla	r1, r5, r1, r2
 800673e:	2301      	movs	r3, #1
 8006740:	4607      	mov	r7, r0
 8006742:	e7f0      	b.n	8006726 <_svfiprintf_r+0x182>
 8006744:	ab03      	add	r3, sp, #12
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	4622      	mov	r2, r4
 800674a:	4b11      	ldr	r3, [pc, #68]	; (8006790 <_svfiprintf_r+0x1ec>)
 800674c:	a904      	add	r1, sp, #16
 800674e:	4640      	mov	r0, r8
 8006750:	f7fe f93c 	bl	80049cc <_printf_float>
 8006754:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006758:	4681      	mov	r9, r0
 800675a:	d1d6      	bne.n	800670a <_svfiprintf_r+0x166>
 800675c:	89a3      	ldrh	r3, [r4, #12]
 800675e:	065b      	lsls	r3, r3, #25
 8006760:	f53f af35 	bmi.w	80065ce <_svfiprintf_r+0x2a>
 8006764:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006766:	b01d      	add	sp, #116	; 0x74
 8006768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800676c:	ab03      	add	r3, sp, #12
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	4622      	mov	r2, r4
 8006772:	4b07      	ldr	r3, [pc, #28]	; (8006790 <_svfiprintf_r+0x1ec>)
 8006774:	a904      	add	r1, sp, #16
 8006776:	4640      	mov	r0, r8
 8006778:	f7fe fbd4 	bl	8004f24 <_printf_i>
 800677c:	e7ea      	b.n	8006754 <_svfiprintf_r+0x1b0>
 800677e:	bf00      	nop
 8006780:	08006cdc 	.word	0x08006cdc
 8006784:	08006ce2 	.word	0x08006ce2
 8006788:	08006ce6 	.word	0x08006ce6
 800678c:	080049cd 	.word	0x080049cd
 8006790:	080064ef 	.word	0x080064ef

08006794 <__ascii_mbtowc>:
 8006794:	b082      	sub	sp, #8
 8006796:	b901      	cbnz	r1, 800679a <__ascii_mbtowc+0x6>
 8006798:	a901      	add	r1, sp, #4
 800679a:	b142      	cbz	r2, 80067ae <__ascii_mbtowc+0x1a>
 800679c:	b14b      	cbz	r3, 80067b2 <__ascii_mbtowc+0x1e>
 800679e:	7813      	ldrb	r3, [r2, #0]
 80067a0:	600b      	str	r3, [r1, #0]
 80067a2:	7812      	ldrb	r2, [r2, #0]
 80067a4:	1c10      	adds	r0, r2, #0
 80067a6:	bf18      	it	ne
 80067a8:	2001      	movne	r0, #1
 80067aa:	b002      	add	sp, #8
 80067ac:	4770      	bx	lr
 80067ae:	4610      	mov	r0, r2
 80067b0:	e7fb      	b.n	80067aa <__ascii_mbtowc+0x16>
 80067b2:	f06f 0001 	mvn.w	r0, #1
 80067b6:	e7f8      	b.n	80067aa <__ascii_mbtowc+0x16>

080067b8 <memmove>:
 80067b8:	4288      	cmp	r0, r1
 80067ba:	b510      	push	{r4, lr}
 80067bc:	eb01 0302 	add.w	r3, r1, r2
 80067c0:	d807      	bhi.n	80067d2 <memmove+0x1a>
 80067c2:	1e42      	subs	r2, r0, #1
 80067c4:	4299      	cmp	r1, r3
 80067c6:	d00a      	beq.n	80067de <memmove+0x26>
 80067c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067cc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80067d0:	e7f8      	b.n	80067c4 <memmove+0xc>
 80067d2:	4283      	cmp	r3, r0
 80067d4:	d9f5      	bls.n	80067c2 <memmove+0xa>
 80067d6:	1881      	adds	r1, r0, r2
 80067d8:	1ad2      	subs	r2, r2, r3
 80067da:	42d3      	cmn	r3, r2
 80067dc:	d100      	bne.n	80067e0 <memmove+0x28>
 80067de:	bd10      	pop	{r4, pc}
 80067e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067e4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80067e8:	e7f7      	b.n	80067da <memmove+0x22>

080067ea <_realloc_r>:
 80067ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ec:	4607      	mov	r7, r0
 80067ee:	4614      	mov	r4, r2
 80067f0:	460e      	mov	r6, r1
 80067f2:	b921      	cbnz	r1, 80067fe <_realloc_r+0x14>
 80067f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80067f8:	4611      	mov	r1, r2
 80067fa:	f7fd bffb 	b.w	80047f4 <_malloc_r>
 80067fe:	b922      	cbnz	r2, 800680a <_realloc_r+0x20>
 8006800:	f7fd ffac 	bl	800475c <_free_r>
 8006804:	4625      	mov	r5, r4
 8006806:	4628      	mov	r0, r5
 8006808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800680a:	f000 f821 	bl	8006850 <_malloc_usable_size_r>
 800680e:	42a0      	cmp	r0, r4
 8006810:	d20f      	bcs.n	8006832 <_realloc_r+0x48>
 8006812:	4621      	mov	r1, r4
 8006814:	4638      	mov	r0, r7
 8006816:	f7fd ffed 	bl	80047f4 <_malloc_r>
 800681a:	4605      	mov	r5, r0
 800681c:	2800      	cmp	r0, #0
 800681e:	d0f2      	beq.n	8006806 <_realloc_r+0x1c>
 8006820:	4631      	mov	r1, r6
 8006822:	4622      	mov	r2, r4
 8006824:	f7ff fb6c 	bl	8005f00 <memcpy>
 8006828:	4631      	mov	r1, r6
 800682a:	4638      	mov	r0, r7
 800682c:	f7fd ff96 	bl	800475c <_free_r>
 8006830:	e7e9      	b.n	8006806 <_realloc_r+0x1c>
 8006832:	4635      	mov	r5, r6
 8006834:	e7e7      	b.n	8006806 <_realloc_r+0x1c>

08006836 <__ascii_wctomb>:
 8006836:	b149      	cbz	r1, 800684c <__ascii_wctomb+0x16>
 8006838:	2aff      	cmp	r2, #255	; 0xff
 800683a:	bf8b      	itete	hi
 800683c:	238a      	movhi	r3, #138	; 0x8a
 800683e:	700a      	strbls	r2, [r1, #0]
 8006840:	6003      	strhi	r3, [r0, #0]
 8006842:	2001      	movls	r0, #1
 8006844:	bf88      	it	hi
 8006846:	f04f 30ff 	movhi.w	r0, #4294967295
 800684a:	4770      	bx	lr
 800684c:	4608      	mov	r0, r1
 800684e:	4770      	bx	lr

08006850 <_malloc_usable_size_r>:
 8006850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006854:	1f18      	subs	r0, r3, #4
 8006856:	2b00      	cmp	r3, #0
 8006858:	bfbc      	itt	lt
 800685a:	580b      	ldrlt	r3, [r1, r0]
 800685c:	18c0      	addlt	r0, r0, r3
 800685e:	4770      	bx	lr

08006860 <_init>:
 8006860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006862:	bf00      	nop
 8006864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006866:	bc08      	pop	{r3}
 8006868:	469e      	mov	lr, r3
 800686a:	4770      	bx	lr

0800686c <_fini>:
 800686c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800686e:	bf00      	nop
 8006870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006872:	bc08      	pop	{r3}
 8006874:	469e      	mov	lr, r3
 8006876:	4770      	bx	lr
