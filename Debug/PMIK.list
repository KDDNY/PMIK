
PMIK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081a4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000678  080082b8  080082b8  000182b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008930  08008930  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008930  08008930  00018930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008938  08008938  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008938  08008938  00018938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800893c  0800893c  0001893c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000adc  200001e4  08008b24  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cc0  08008b24  00020cc0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110d5  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002478  00000000  00000000  000312e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fe8  00000000  00000000  00033760  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f28  00000000  00000000  00034748  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001886c  00000000  00000000  00035670  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d0c0  00000000  00000000  0004dedc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d5d6  00000000  00000000  0005af9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e8572  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ef8  00000000  00000000  000e85f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800829c 	.word	0x0800829c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800829c 	.word	0x0800829c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_ldivmod>:
 8000f44:	b97b      	cbnz	r3, 8000f66 <__aeabi_ldivmod+0x22>
 8000f46:	b972      	cbnz	r2, 8000f66 <__aeabi_ldivmod+0x22>
 8000f48:	2900      	cmp	r1, #0
 8000f4a:	bfbe      	ittt	lt
 8000f4c:	2000      	movlt	r0, #0
 8000f4e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000f52:	e006      	blt.n	8000f62 <__aeabi_ldivmod+0x1e>
 8000f54:	bf08      	it	eq
 8000f56:	2800      	cmpeq	r0, #0
 8000f58:	bf1c      	itt	ne
 8000f5a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000f5e:	f04f 30ff 	movne.w	r0, #4294967295
 8000f62:	f000 b9a7 	b.w	80012b4 <__aeabi_idiv0>
 8000f66:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f6a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f6e:	2900      	cmp	r1, #0
 8000f70:	db09      	blt.n	8000f86 <__aeabi_ldivmod+0x42>
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	db1a      	blt.n	8000fac <__aeabi_ldivmod+0x68>
 8000f76:	f000 f835 	bl	8000fe4 <__udivmoddi4>
 8000f7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f82:	b004      	add	sp, #16
 8000f84:	4770      	bx	lr
 8000f86:	4240      	negs	r0, r0
 8000f88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	db1b      	blt.n	8000fc8 <__aeabi_ldivmod+0x84>
 8000f90:	f000 f828 	bl	8000fe4 <__udivmoddi4>
 8000f94:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f9c:	b004      	add	sp, #16
 8000f9e:	4240      	negs	r0, r0
 8000fa0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fa4:	4252      	negs	r2, r2
 8000fa6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000faa:	4770      	bx	lr
 8000fac:	4252      	negs	r2, r2
 8000fae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fb2:	f000 f817 	bl	8000fe4 <__udivmoddi4>
 8000fb6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fbe:	b004      	add	sp, #16
 8000fc0:	4240      	negs	r0, r0
 8000fc2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fc6:	4770      	bx	lr
 8000fc8:	4252      	negs	r2, r2
 8000fca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fce:	f000 f809 	bl	8000fe4 <__udivmoddi4>
 8000fd2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fda:	b004      	add	sp, #16
 8000fdc:	4252      	negs	r2, r2
 8000fde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fe2:	4770      	bx	lr

08000fe4 <__udivmoddi4>:
 8000fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fe8:	468c      	mov	ip, r1
 8000fea:	4604      	mov	r4, r0
 8000fec:	9e08      	ldr	r6, [sp, #32]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d14b      	bne.n	800108a <__udivmoddi4+0xa6>
 8000ff2:	428a      	cmp	r2, r1
 8000ff4:	4615      	mov	r5, r2
 8000ff6:	d967      	bls.n	80010c8 <__udivmoddi4+0xe4>
 8000ff8:	fab2 f282 	clz	r2, r2
 8000ffc:	b14a      	cbz	r2, 8001012 <__udivmoddi4+0x2e>
 8000ffe:	f1c2 0720 	rsb	r7, r2, #32
 8001002:	fa01 f302 	lsl.w	r3, r1, r2
 8001006:	fa20 f707 	lsr.w	r7, r0, r7
 800100a:	4095      	lsls	r5, r2
 800100c:	ea47 0c03 	orr.w	ip, r7, r3
 8001010:	4094      	lsls	r4, r2
 8001012:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001016:	fbbc f7fe 	udiv	r7, ip, lr
 800101a:	fa1f f885 	uxth.w	r8, r5
 800101e:	fb0e c317 	mls	r3, lr, r7, ip
 8001022:	fb07 f908 	mul.w	r9, r7, r8
 8001026:	0c21      	lsrs	r1, r4, #16
 8001028:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800102c:	4599      	cmp	r9, r3
 800102e:	d909      	bls.n	8001044 <__udivmoddi4+0x60>
 8001030:	18eb      	adds	r3, r5, r3
 8001032:	f107 31ff 	add.w	r1, r7, #4294967295
 8001036:	f080 811c 	bcs.w	8001272 <__udivmoddi4+0x28e>
 800103a:	4599      	cmp	r9, r3
 800103c:	f240 8119 	bls.w	8001272 <__udivmoddi4+0x28e>
 8001040:	3f02      	subs	r7, #2
 8001042:	442b      	add	r3, r5
 8001044:	eba3 0309 	sub.w	r3, r3, r9
 8001048:	fbb3 f0fe 	udiv	r0, r3, lr
 800104c:	fb0e 3310 	mls	r3, lr, r0, r3
 8001050:	fb00 f108 	mul.w	r1, r0, r8
 8001054:	b2a4      	uxth	r4, r4
 8001056:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800105a:	42a1      	cmp	r1, r4
 800105c:	d909      	bls.n	8001072 <__udivmoddi4+0x8e>
 800105e:	192c      	adds	r4, r5, r4
 8001060:	f100 33ff 	add.w	r3, r0, #4294967295
 8001064:	f080 8107 	bcs.w	8001276 <__udivmoddi4+0x292>
 8001068:	42a1      	cmp	r1, r4
 800106a:	f240 8104 	bls.w	8001276 <__udivmoddi4+0x292>
 800106e:	3802      	subs	r0, #2
 8001070:	442c      	add	r4, r5
 8001072:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001076:	2700      	movs	r7, #0
 8001078:	1a64      	subs	r4, r4, r1
 800107a:	b11e      	cbz	r6, 8001084 <__udivmoddi4+0xa0>
 800107c:	2300      	movs	r3, #0
 800107e:	40d4      	lsrs	r4, r2
 8001080:	e9c6 4300 	strd	r4, r3, [r6]
 8001084:	4639      	mov	r1, r7
 8001086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800108a:	428b      	cmp	r3, r1
 800108c:	d909      	bls.n	80010a2 <__udivmoddi4+0xbe>
 800108e:	2e00      	cmp	r6, #0
 8001090:	f000 80ec 	beq.w	800126c <__udivmoddi4+0x288>
 8001094:	2700      	movs	r7, #0
 8001096:	e9c6 0100 	strd	r0, r1, [r6]
 800109a:	4638      	mov	r0, r7
 800109c:	4639      	mov	r1, r7
 800109e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a2:	fab3 f783 	clz	r7, r3
 80010a6:	2f00      	cmp	r7, #0
 80010a8:	d148      	bne.n	800113c <__udivmoddi4+0x158>
 80010aa:	428b      	cmp	r3, r1
 80010ac:	d302      	bcc.n	80010b4 <__udivmoddi4+0xd0>
 80010ae:	4282      	cmp	r2, r0
 80010b0:	f200 80fb 	bhi.w	80012aa <__udivmoddi4+0x2c6>
 80010b4:	1a84      	subs	r4, r0, r2
 80010b6:	eb61 0303 	sbc.w	r3, r1, r3
 80010ba:	2001      	movs	r0, #1
 80010bc:	469c      	mov	ip, r3
 80010be:	2e00      	cmp	r6, #0
 80010c0:	d0e0      	beq.n	8001084 <__udivmoddi4+0xa0>
 80010c2:	e9c6 4c00 	strd	r4, ip, [r6]
 80010c6:	e7dd      	b.n	8001084 <__udivmoddi4+0xa0>
 80010c8:	b902      	cbnz	r2, 80010cc <__udivmoddi4+0xe8>
 80010ca:	deff      	udf	#255	; 0xff
 80010cc:	fab2 f282 	clz	r2, r2
 80010d0:	2a00      	cmp	r2, #0
 80010d2:	f040 808f 	bne.w	80011f4 <__udivmoddi4+0x210>
 80010d6:	2701      	movs	r7, #1
 80010d8:	1b49      	subs	r1, r1, r5
 80010da:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80010de:	fa1f f985 	uxth.w	r9, r5
 80010e2:	fbb1 fef8 	udiv	lr, r1, r8
 80010e6:	fb08 111e 	mls	r1, r8, lr, r1
 80010ea:	fb09 f00e 	mul.w	r0, r9, lr
 80010ee:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80010f2:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80010f6:	4298      	cmp	r0, r3
 80010f8:	d907      	bls.n	800110a <__udivmoddi4+0x126>
 80010fa:	18eb      	adds	r3, r5, r3
 80010fc:	f10e 31ff 	add.w	r1, lr, #4294967295
 8001100:	d202      	bcs.n	8001108 <__udivmoddi4+0x124>
 8001102:	4298      	cmp	r0, r3
 8001104:	f200 80cd 	bhi.w	80012a2 <__udivmoddi4+0x2be>
 8001108:	468e      	mov	lr, r1
 800110a:	1a1b      	subs	r3, r3, r0
 800110c:	fbb3 f0f8 	udiv	r0, r3, r8
 8001110:	fb08 3310 	mls	r3, r8, r0, r3
 8001114:	fb09 f900 	mul.w	r9, r9, r0
 8001118:	b2a4      	uxth	r4, r4
 800111a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800111e:	45a1      	cmp	r9, r4
 8001120:	d907      	bls.n	8001132 <__udivmoddi4+0x14e>
 8001122:	192c      	adds	r4, r5, r4
 8001124:	f100 33ff 	add.w	r3, r0, #4294967295
 8001128:	d202      	bcs.n	8001130 <__udivmoddi4+0x14c>
 800112a:	45a1      	cmp	r9, r4
 800112c:	f200 80b6 	bhi.w	800129c <__udivmoddi4+0x2b8>
 8001130:	4618      	mov	r0, r3
 8001132:	eba4 0409 	sub.w	r4, r4, r9
 8001136:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800113a:	e79e      	b.n	800107a <__udivmoddi4+0x96>
 800113c:	f1c7 0520 	rsb	r5, r7, #32
 8001140:	40bb      	lsls	r3, r7
 8001142:	fa22 fc05 	lsr.w	ip, r2, r5
 8001146:	ea4c 0c03 	orr.w	ip, ip, r3
 800114a:	fa21 f405 	lsr.w	r4, r1, r5
 800114e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001152:	fbb4 f9fe 	udiv	r9, r4, lr
 8001156:	fa1f f88c 	uxth.w	r8, ip
 800115a:	fb0e 4419 	mls	r4, lr, r9, r4
 800115e:	fa20 f305 	lsr.w	r3, r0, r5
 8001162:	40b9      	lsls	r1, r7
 8001164:	fb09 fa08 	mul.w	sl, r9, r8
 8001168:	4319      	orrs	r1, r3
 800116a:	0c0b      	lsrs	r3, r1, #16
 800116c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001170:	45a2      	cmp	sl, r4
 8001172:	fa02 f207 	lsl.w	r2, r2, r7
 8001176:	fa00 f307 	lsl.w	r3, r0, r7
 800117a:	d90b      	bls.n	8001194 <__udivmoddi4+0x1b0>
 800117c:	eb1c 0404 	adds.w	r4, ip, r4
 8001180:	f109 30ff 	add.w	r0, r9, #4294967295
 8001184:	f080 8088 	bcs.w	8001298 <__udivmoddi4+0x2b4>
 8001188:	45a2      	cmp	sl, r4
 800118a:	f240 8085 	bls.w	8001298 <__udivmoddi4+0x2b4>
 800118e:	f1a9 0902 	sub.w	r9, r9, #2
 8001192:	4464      	add	r4, ip
 8001194:	eba4 040a 	sub.w	r4, r4, sl
 8001198:	fbb4 f0fe 	udiv	r0, r4, lr
 800119c:	fb0e 4410 	mls	r4, lr, r0, r4
 80011a0:	fb00 fa08 	mul.w	sl, r0, r8
 80011a4:	b289      	uxth	r1, r1
 80011a6:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80011aa:	45a2      	cmp	sl, r4
 80011ac:	d908      	bls.n	80011c0 <__udivmoddi4+0x1dc>
 80011ae:	eb1c 0404 	adds.w	r4, ip, r4
 80011b2:	f100 31ff 	add.w	r1, r0, #4294967295
 80011b6:	d26b      	bcs.n	8001290 <__udivmoddi4+0x2ac>
 80011b8:	45a2      	cmp	sl, r4
 80011ba:	d969      	bls.n	8001290 <__udivmoddi4+0x2ac>
 80011bc:	3802      	subs	r0, #2
 80011be:	4464      	add	r4, ip
 80011c0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80011c4:	fba0 8902 	umull	r8, r9, r0, r2
 80011c8:	eba4 040a 	sub.w	r4, r4, sl
 80011cc:	454c      	cmp	r4, r9
 80011ce:	4641      	mov	r1, r8
 80011d0:	46ce      	mov	lr, r9
 80011d2:	d354      	bcc.n	800127e <__udivmoddi4+0x29a>
 80011d4:	d051      	beq.n	800127a <__udivmoddi4+0x296>
 80011d6:	2e00      	cmp	r6, #0
 80011d8:	d069      	beq.n	80012ae <__udivmoddi4+0x2ca>
 80011da:	1a5a      	subs	r2, r3, r1
 80011dc:	eb64 040e 	sbc.w	r4, r4, lr
 80011e0:	fa04 f505 	lsl.w	r5, r4, r5
 80011e4:	fa22 f307 	lsr.w	r3, r2, r7
 80011e8:	40fc      	lsrs	r4, r7
 80011ea:	431d      	orrs	r5, r3
 80011ec:	e9c6 5400 	strd	r5, r4, [r6]
 80011f0:	2700      	movs	r7, #0
 80011f2:	e747      	b.n	8001084 <__udivmoddi4+0xa0>
 80011f4:	4095      	lsls	r5, r2
 80011f6:	f1c2 0320 	rsb	r3, r2, #32
 80011fa:	fa21 f003 	lsr.w	r0, r1, r3
 80011fe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8001202:	fbb0 f7f8 	udiv	r7, r0, r8
 8001206:	fa1f f985 	uxth.w	r9, r5
 800120a:	fb08 0017 	mls	r0, r8, r7, r0
 800120e:	fa24 f303 	lsr.w	r3, r4, r3
 8001212:	4091      	lsls	r1, r2
 8001214:	fb07 fc09 	mul.w	ip, r7, r9
 8001218:	430b      	orrs	r3, r1
 800121a:	0c19      	lsrs	r1, r3, #16
 800121c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001220:	458c      	cmp	ip, r1
 8001222:	fa04 f402 	lsl.w	r4, r4, r2
 8001226:	d907      	bls.n	8001238 <__udivmoddi4+0x254>
 8001228:	1869      	adds	r1, r5, r1
 800122a:	f107 30ff 	add.w	r0, r7, #4294967295
 800122e:	d231      	bcs.n	8001294 <__udivmoddi4+0x2b0>
 8001230:	458c      	cmp	ip, r1
 8001232:	d92f      	bls.n	8001294 <__udivmoddi4+0x2b0>
 8001234:	3f02      	subs	r7, #2
 8001236:	4429      	add	r1, r5
 8001238:	eba1 010c 	sub.w	r1, r1, ip
 800123c:	fbb1 f0f8 	udiv	r0, r1, r8
 8001240:	fb08 1c10 	mls	ip, r8, r0, r1
 8001244:	fb00 fe09 	mul.w	lr, r0, r9
 8001248:	b299      	uxth	r1, r3
 800124a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800124e:	458e      	cmp	lr, r1
 8001250:	d907      	bls.n	8001262 <__udivmoddi4+0x27e>
 8001252:	1869      	adds	r1, r5, r1
 8001254:	f100 33ff 	add.w	r3, r0, #4294967295
 8001258:	d218      	bcs.n	800128c <__udivmoddi4+0x2a8>
 800125a:	458e      	cmp	lr, r1
 800125c:	d916      	bls.n	800128c <__udivmoddi4+0x2a8>
 800125e:	3802      	subs	r0, #2
 8001260:	4429      	add	r1, r5
 8001262:	eba1 010e 	sub.w	r1, r1, lr
 8001266:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800126a:	e73a      	b.n	80010e2 <__udivmoddi4+0xfe>
 800126c:	4637      	mov	r7, r6
 800126e:	4630      	mov	r0, r6
 8001270:	e708      	b.n	8001084 <__udivmoddi4+0xa0>
 8001272:	460f      	mov	r7, r1
 8001274:	e6e6      	b.n	8001044 <__udivmoddi4+0x60>
 8001276:	4618      	mov	r0, r3
 8001278:	e6fb      	b.n	8001072 <__udivmoddi4+0x8e>
 800127a:	4543      	cmp	r3, r8
 800127c:	d2ab      	bcs.n	80011d6 <__udivmoddi4+0x1f2>
 800127e:	ebb8 0102 	subs.w	r1, r8, r2
 8001282:	eb69 020c 	sbc.w	r2, r9, ip
 8001286:	3801      	subs	r0, #1
 8001288:	4696      	mov	lr, r2
 800128a:	e7a4      	b.n	80011d6 <__udivmoddi4+0x1f2>
 800128c:	4618      	mov	r0, r3
 800128e:	e7e8      	b.n	8001262 <__udivmoddi4+0x27e>
 8001290:	4608      	mov	r0, r1
 8001292:	e795      	b.n	80011c0 <__udivmoddi4+0x1dc>
 8001294:	4607      	mov	r7, r0
 8001296:	e7cf      	b.n	8001238 <__udivmoddi4+0x254>
 8001298:	4681      	mov	r9, r0
 800129a:	e77b      	b.n	8001194 <__udivmoddi4+0x1b0>
 800129c:	3802      	subs	r0, #2
 800129e:	442c      	add	r4, r5
 80012a0:	e747      	b.n	8001132 <__udivmoddi4+0x14e>
 80012a2:	f1ae 0e02 	sub.w	lr, lr, #2
 80012a6:	442b      	add	r3, r5
 80012a8:	e72f      	b.n	800110a <__udivmoddi4+0x126>
 80012aa:	4638      	mov	r0, r7
 80012ac:	e707      	b.n	80010be <__udivmoddi4+0xda>
 80012ae:	4637      	mov	r7, r6
 80012b0:	e6e8      	b.n	8001084 <__udivmoddi4+0xa0>
 80012b2:	bf00      	nop

080012b4 <__aeabi_idiv0>:
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop

080012b8 <ESP_Init>:

float measure;
/*****************************************************************************************************************************************/

void ESP_Init (char *SSID, char *PASSWD)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b098      	sub	sp, #96	; 0x60
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 80012c2:	f000 fa3f 	bl	8001744 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n", wifi_uart);
 80012c6:	4966      	ldr	r1, [pc, #408]	; (8001460 <ESP_Init+0x1a8>)
 80012c8:	4866      	ldr	r0, [pc, #408]	; (8001464 <ESP_Init+0x1ac>)
 80012ca:	f000 fca0 	bl	8001c0e <Uart_sendstring>
	Uart_sendstring("RESETTING.", pc_uart);
 80012ce:	4966      	ldr	r1, [pc, #408]	; (8001468 <ESP_Init+0x1b0>)
 80012d0:	4866      	ldr	r0, [pc, #408]	; (800146c <ESP_Init+0x1b4>)
 80012d2:	f000 fc9c 	bl	8001c0e <Uart_sendstring>
	for (int i=0; i<5; i++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012da:	e00a      	b.n	80012f2 <ESP_Init+0x3a>
	{
		Uart_sendstring(".", pc_uart);
 80012dc:	4962      	ldr	r1, [pc, #392]	; (8001468 <ESP_Init+0x1b0>)
 80012de:	4864      	ldr	r0, [pc, #400]	; (8001470 <ESP_Init+0x1b8>)
 80012e0:	f000 fc95 	bl	8001c0e <Uart_sendstring>
		HAL_Delay(1000);
 80012e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012e8:	f001 ffec 	bl	80032c4 <HAL_Delay>
	for (int i=0; i<5; i++)
 80012ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012ee:	3301      	adds	r3, #1
 80012f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012f4:	2b04      	cmp	r3, #4
 80012f6:	ddf1      	ble.n	80012dc <ESP_Init+0x24>
	}

	/********* AT **********/
	Uart_flush(wifi_uart);
 80012f8:	4859      	ldr	r0, [pc, #356]	; (8001460 <ESP_Init+0x1a8>)
 80012fa:	f000 fadd 	bl	80018b8 <Uart_flush>
	Uart_sendstring("AT\r\n", wifi_uart);
 80012fe:	4958      	ldr	r1, [pc, #352]	; (8001460 <ESP_Init+0x1a8>)
 8001300:	485c      	ldr	r0, [pc, #368]	; (8001474 <ESP_Init+0x1bc>)
 8001302:	f000 fc84 	bl	8001c0e <Uart_sendstring>
	while(!(Wait_for("OK\r\n", wifi_uart)));
 8001306:	bf00      	nop
 8001308:	4955      	ldr	r1, [pc, #340]	; (8001460 <ESP_Init+0x1a8>)
 800130a:	485b      	ldr	r0, [pc, #364]	; (8001478 <ESP_Init+0x1c0>)
 800130c:	f000 fd14 	bl	8001d38 <Wait_for>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0f8      	beq.n	8001308 <ESP_Init+0x50>
	Uart_sendstring("AT---->OK\n\n", pc_uart);
 8001316:	4954      	ldr	r1, [pc, #336]	; (8001468 <ESP_Init+0x1b0>)
 8001318:	4858      	ldr	r0, [pc, #352]	; (800147c <ESP_Init+0x1c4>)
 800131a:	f000 fc78 	bl	8001c0e <Uart_sendstring>


	/********* AT+CWMODE=1 **********/
	Uart_flush(wifi_uart);
 800131e:	4850      	ldr	r0, [pc, #320]	; (8001460 <ESP_Init+0x1a8>)
 8001320:	f000 faca 	bl	80018b8 <Uart_flush>
	Uart_sendstring("AT+CWMODE=1\r\n", wifi_uart);
 8001324:	494e      	ldr	r1, [pc, #312]	; (8001460 <ESP_Init+0x1a8>)
 8001326:	4856      	ldr	r0, [pc, #344]	; (8001480 <ESP_Init+0x1c8>)
 8001328:	f000 fc71 	bl	8001c0e <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 800132c:	bf00      	nop
 800132e:	494c      	ldr	r1, [pc, #304]	; (8001460 <ESP_Init+0x1a8>)
 8001330:	4851      	ldr	r0, [pc, #324]	; (8001478 <ESP_Init+0x1c0>)
 8001332:	f000 fd01 	bl	8001d38 <Wait_for>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0f8      	beq.n	800132e <ESP_Init+0x76>
	Uart_sendstring("CW MODE---->1\n\n", pc_uart);
 800133c:	494a      	ldr	r1, [pc, #296]	; (8001468 <ESP_Init+0x1b0>)
 800133e:	4851      	ldr	r0, [pc, #324]	; (8001484 <ESP_Init+0x1cc>)
 8001340:	f000 fc65 	bl	8001c0e <Uart_sendstring>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	Uart_flush(wifi_uart);
 8001344:	4846      	ldr	r0, [pc, #280]	; (8001460 <ESP_Init+0x1a8>)
 8001346:	f000 fab7 	bl	80018b8 <Uart_flush>
	Uart_sendstring("connecting... to the provided AP\n", pc_uart);
 800134a:	4947      	ldr	r1, [pc, #284]	; (8001468 <ESP_Init+0x1b0>)
 800134c:	484e      	ldr	r0, [pc, #312]	; (8001488 <ESP_Init+0x1d0>)
 800134e:	f000 fc5e 	bl	8001c0e <Uart_sendstring>
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8001352:	f107 0008 	add.w	r0, r7, #8
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	494c      	ldr	r1, [pc, #304]	; (800148c <ESP_Init+0x1d4>)
 800135c:	f005 fba0 	bl	8006aa0 <siprintf>
	Uart_sendstring(data, wifi_uart);
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	493e      	ldr	r1, [pc, #248]	; (8001460 <ESP_Init+0x1a8>)
 8001366:	4618      	mov	r0, r3
 8001368:	f000 fc51 	bl	8001c0e <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 800136c:	bf00      	nop
 800136e:	493c      	ldr	r1, [pc, #240]	; (8001460 <ESP_Init+0x1a8>)
 8001370:	4841      	ldr	r0, [pc, #260]	; (8001478 <ESP_Init+0x1c0>)
 8001372:	f000 fce1 	bl	8001d38 <Wait_for>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0f8      	beq.n	800136e <ESP_Init+0xb6>
	sprintf (data, "Connected to,\"%s\"\n\n", SSID);
 800137c:	f107 0308 	add.w	r3, r7, #8
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	4943      	ldr	r1, [pc, #268]	; (8001490 <ESP_Init+0x1d8>)
 8001384:	4618      	mov	r0, r3
 8001386:	f005 fb8b 	bl	8006aa0 <siprintf>
	Uart_sendstring(data,pc_uart);
 800138a:	f107 0308 	add.w	r3, r7, #8
 800138e:	4936      	ldr	r1, [pc, #216]	; (8001468 <ESP_Init+0x1b0>)
 8001390:	4618      	mov	r0, r3
 8001392:	f000 fc3c 	bl	8001c0e <Uart_sendstring>


	/********* AT+CIFSR **********/
	Uart_flush(wifi_uart);
 8001396:	4832      	ldr	r0, [pc, #200]	; (8001460 <ESP_Init+0x1a8>)
 8001398:	f000 fa8e 	bl	80018b8 <Uart_flush>
	Uart_sendstring("AT+CIFSR\r\n", wifi_uart);
 800139c:	4930      	ldr	r1, [pc, #192]	; (8001460 <ESP_Init+0x1a8>)
 800139e:	483d      	ldr	r0, [pc, #244]	; (8001494 <ESP_Init+0x1dc>)
 80013a0:	f000 fc35 	bl	8001c0e <Uart_sendstring>
	while (!(Wait_for("CIFSR:STAIP,\"", wifi_uart)));
 80013a4:	bf00      	nop
 80013a6:	492e      	ldr	r1, [pc, #184]	; (8001460 <ESP_Init+0x1a8>)
 80013a8:	483b      	ldr	r0, [pc, #236]	; (8001498 <ESP_Init+0x1e0>)
 80013aa:	f000 fcc5 	bl	8001d38 <Wait_for>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0f8      	beq.n	80013a6 <ESP_Init+0xee>
	while (!(Copy_upto("\"",buffer, wifi_uart)));
 80013b4:	bf00      	nop
 80013b6:	4a2a      	ldr	r2, [pc, #168]	; (8001460 <ESP_Init+0x1a8>)
 80013b8:	4938      	ldr	r1, [pc, #224]	; (800149c <ESP_Init+0x1e4>)
 80013ba:	4839      	ldr	r0, [pc, #228]	; (80014a0 <ESP_Init+0x1e8>)
 80013bc:	f000 fc3e 	bl	8001c3c <Copy_upto>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0f7      	beq.n	80013b6 <ESP_Init+0xfe>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 80013c6:	bf00      	nop
 80013c8:	4925      	ldr	r1, [pc, #148]	; (8001460 <ESP_Init+0x1a8>)
 80013ca:	482b      	ldr	r0, [pc, #172]	; (8001478 <ESP_Init+0x1c0>)
 80013cc:	f000 fcb4 	bl	8001d38 <Wait_for>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f8      	beq.n	80013c8 <ESP_Init+0x110>
	int len = strlen (buffer);
 80013d6:	4831      	ldr	r0, [pc, #196]	; (800149c <ESP_Init+0x1e4>)
 80013d8:	f7fe feba 	bl	8000150 <strlen>
 80013dc:	4603      	mov	r3, r0
 80013de:	65bb      	str	r3, [r7, #88]	; 0x58
	buffer[len-1] = '\0';
 80013e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013e2:	3b01      	subs	r3, #1
 80013e4:	4a2d      	ldr	r2, [pc, #180]	; (800149c <ESP_Init+0x1e4>)
 80013e6:	2100      	movs	r1, #0
 80013e8:	54d1      	strb	r1, [r2, r3]
	sprintf (data, "IP ADDR: %s\n\n", buffer);
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	4a2b      	ldr	r2, [pc, #172]	; (800149c <ESP_Init+0x1e4>)
 80013f0:	492c      	ldr	r1, [pc, #176]	; (80014a4 <ESP_Init+0x1ec>)
 80013f2:	4618      	mov	r0, r3
 80013f4:	f005 fb54 	bl	8006aa0 <siprintf>
	Uart_sendstring(data, pc_uart);
 80013f8:	f107 0308 	add.w	r3, r7, #8
 80013fc:	491a      	ldr	r1, [pc, #104]	; (8001468 <ESP_Init+0x1b0>)
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 fc05 	bl	8001c0e <Uart_sendstring>

	/********* AT+CIPMUX **********/
	Uart_flush(wifi_uart);
 8001404:	4816      	ldr	r0, [pc, #88]	; (8001460 <ESP_Init+0x1a8>)
 8001406:	f000 fa57 	bl	80018b8 <Uart_flush>
	Uart_sendstring("AT+CIPMUX=1\r\n", wifi_uart);
 800140a:	4915      	ldr	r1, [pc, #84]	; (8001460 <ESP_Init+0x1a8>)
 800140c:	4826      	ldr	r0, [pc, #152]	; (80014a8 <ESP_Init+0x1f0>)
 800140e:	f000 fbfe 	bl	8001c0e <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8001412:	bf00      	nop
 8001414:	4912      	ldr	r1, [pc, #72]	; (8001460 <ESP_Init+0x1a8>)
 8001416:	4818      	ldr	r0, [pc, #96]	; (8001478 <ESP_Init+0x1c0>)
 8001418:	f000 fc8e 	bl	8001d38 <Wait_for>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f8      	beq.n	8001414 <ESP_Init+0x15c>
	Uart_sendstring("CIPMUX---->OK\n\n", pc_uart);
 8001422:	4911      	ldr	r1, [pc, #68]	; (8001468 <ESP_Init+0x1b0>)
 8001424:	4821      	ldr	r0, [pc, #132]	; (80014ac <ESP_Init+0x1f4>)
 8001426:	f000 fbf2 	bl	8001c0e <Uart_sendstring>

	/********* AT+CIPSERVER **********/
	Uart_flush(wifi_uart);
 800142a:	480d      	ldr	r0, [pc, #52]	; (8001460 <ESP_Init+0x1a8>)
 800142c:	f000 fa44 	bl	80018b8 <Uart_flush>
	Uart_sendstring("AT+CIPSERVER=1,80\r\n", wifi_uart);
 8001430:	490b      	ldr	r1, [pc, #44]	; (8001460 <ESP_Init+0x1a8>)
 8001432:	481f      	ldr	r0, [pc, #124]	; (80014b0 <ESP_Init+0x1f8>)
 8001434:	f000 fbeb 	bl	8001c0e <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8001438:	bf00      	nop
 800143a:	4909      	ldr	r1, [pc, #36]	; (8001460 <ESP_Init+0x1a8>)
 800143c:	480e      	ldr	r0, [pc, #56]	; (8001478 <ESP_Init+0x1c0>)
 800143e:	f000 fc7b 	bl	8001d38 <Wait_for>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0f8      	beq.n	800143a <ESP_Init+0x182>
	Uart_sendstring("CIPSERVER---->OK\n\n", pc_uart);
 8001448:	4907      	ldr	r1, [pc, #28]	; (8001468 <ESP_Init+0x1b0>)
 800144a:	481a      	ldr	r0, [pc, #104]	; (80014b4 <ESP_Init+0x1fc>)
 800144c:	f000 fbdf 	bl	8001c0e <Uart_sendstring>

	Uart_sendstring("Now Connect to the IP ADRESS\n\n", pc_uart);
 8001450:	4905      	ldr	r1, [pc, #20]	; (8001468 <ESP_Init+0x1b0>)
 8001452:	4819      	ldr	r0, [pc, #100]	; (80014b8 <ESP_Init+0x200>)
 8001454:	f000 fbdb 	bl	8001c0e <Uart_sendstring>

}
 8001458:	bf00      	nop
 800145a:	3760      	adds	r7, #96	; 0x60
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000b00 	.word	0x20000b00
 8001464:	08008470 	.word	0x08008470
 8001468:	20000c78 	.word	0x20000c78
 800146c:	0800847c 	.word	0x0800847c
 8001470:	08008488 	.word	0x08008488
 8001474:	0800848c 	.word	0x0800848c
 8001478:	08008494 	.word	0x08008494
 800147c:	0800849c 	.word	0x0800849c
 8001480:	080084a8 	.word	0x080084a8
 8001484:	080084b8 	.word	0x080084b8
 8001488:	080084c8 	.word	0x080084c8
 800148c:	080084ec 	.word	0x080084ec
 8001490:	08008504 	.word	0x08008504
 8001494:	08008518 	.word	0x08008518
 8001498:	08008524 	.word	0x08008524
 800149c:	20000a30 	.word	0x20000a30
 80014a0:	08008534 	.word	0x08008534
 80014a4:	08008538 	.word	0x08008538
 80014a8:	08008548 	.word	0x08008548
 80014ac:	08008558 	.word	0x08008558
 80014b0:	08008568 	.word	0x08008568
 80014b4:	0800857c 	.word	0x0800857c
 80014b8:	08008590 	.word	0x08008590

080014bc <Server_Send>:




int Server_Send (char *str, int Link_ID)
{
 80014bc:	b590      	push	{r4, r7, lr}
 80014be:	b099      	sub	sp, #100	; 0x64
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
	int len = strlen (str);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7fe fe42 	bl	8000150 <strlen>
 80014cc:	4603      	mov	r3, r0
 80014ce:	65fb      	str	r3, [r7, #92]	; 0x5c
	char data[80];
	sprintf (data, "AT+CIPSEND=%d,%d\r\n", Link_ID, len);
 80014d0:	f107 000c 	add.w	r0, r7, #12
 80014d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	491b      	ldr	r1, [pc, #108]	; (8001548 <Server_Send+0x8c>)
 80014da:	f005 fae1 	bl	8006aa0 <siprintf>
	Uart_sendstring(data, wifi_uart);
 80014de:	f107 030c 	add.w	r3, r7, #12
 80014e2:	491a      	ldr	r1, [pc, #104]	; (800154c <Server_Send+0x90>)
 80014e4:	4618      	mov	r0, r3
 80014e6:	f000 fb92 	bl	8001c0e <Uart_sendstring>
	while (!(Wait_for(">", wifi_uart)));
 80014ea:	bf00      	nop
 80014ec:	4917      	ldr	r1, [pc, #92]	; (800154c <Server_Send+0x90>)
 80014ee:	4818      	ldr	r0, [pc, #96]	; (8001550 <Server_Send+0x94>)
 80014f0:	f000 fc22 	bl	8001d38 <Wait_for>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0f8      	beq.n	80014ec <Server_Send+0x30>
	Uart_sendstring (str, wifi_uart);
 80014fa:	4914      	ldr	r1, [pc, #80]	; (800154c <Server_Send+0x90>)
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 fb86 	bl	8001c0e <Uart_sendstring>
	while (!(Wait_for("SEND OK", wifi_uart)));
 8001502:	bf00      	nop
 8001504:	4911      	ldr	r1, [pc, #68]	; (800154c <Server_Send+0x90>)
 8001506:	4813      	ldr	r0, [pc, #76]	; (8001554 <Server_Send+0x98>)
 8001508:	f000 fc16 	bl	8001d38 <Wait_for>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f8      	beq.n	8001504 <Server_Send+0x48>
	sprintf (data, "AT+CIPCLOSE=5\r\n");
 8001512:	f107 030c 	add.w	r3, r7, #12
 8001516:	4a10      	ldr	r2, [pc, #64]	; (8001558 <Server_Send+0x9c>)
 8001518:	461c      	mov	r4, r3
 800151a:	4613      	mov	r3, r2
 800151c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800151e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Uart_sendstring(data, wifi_uart);
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	4909      	ldr	r1, [pc, #36]	; (800154c <Server_Send+0x90>)
 8001528:	4618      	mov	r0, r3
 800152a:	f000 fb70 	bl	8001c0e <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 800152e:	bf00      	nop
 8001530:	4906      	ldr	r1, [pc, #24]	; (800154c <Server_Send+0x90>)
 8001532:	480a      	ldr	r0, [pc, #40]	; (800155c <Server_Send+0xa0>)
 8001534:	f000 fc00 	bl	8001d38 <Wait_for>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f8      	beq.n	8001530 <Server_Send+0x74>
	return 1;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	3764      	adds	r7, #100	; 0x64
 8001544:	46bd      	mov	sp, r7
 8001546:	bd90      	pop	{r4, r7, pc}
 8001548:	080085b0 	.word	0x080085b0
 800154c:	20000b00 	.word	0x20000b00
 8001550:	080085c4 	.word	0x080085c4
 8001554:	080085c8 	.word	0x080085c8
 8001558:	080085d0 	.word	0x080085d0
 800155c:	08008494 	.word	0x08008494

08001560 <Server_Handle>:

void Server_Handle (char *str, int Link_ID)
{
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	f2ad 4d7c 	subw	sp, sp, #1148	; 0x47c
 8001566:	af02      	add	r7, sp, #8
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	6018      	str	r0, [r3, #0]
 800156c:	463b      	mov	r3, r7
 800156e:	6019      	str	r1, [r3, #0]
	char datatosend[1024] = {0};
 8001570:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001574:	4618      	mov	r0, r3
 8001576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800157a:	461a      	mov	r2, r3
 800157c:	2100      	movs	r1, #0
 800157e:	f004 fe03 	bl	8006188 <memset>
		sprintf (datatosend, Basic_inclusion);
 8001582:	4b27      	ldr	r3, [pc, #156]	; (8001620 <Server_Handle+0xc0>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f005 fa87 	bl	8006aa0 <siprintf>
		strcat(datatosend, "<p>");
 8001592:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe fdda 	bl	8000150 <strlen>
 800159c:	4603      	mov	r3, r0
 800159e:	461a      	mov	r2, r3
 80015a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015a4:	4413      	add	r3, r2
 80015a6:	4a1f      	ldr	r2, [pc, #124]	; (8001624 <Server_Handle+0xc4>)
 80015a8:	6810      	ldr	r0, [r2, #0]
 80015aa:	6018      	str	r0, [r3, #0]
		char buffer[100];
		snprintf(buffer, 10, "%.2f", measure);
 80015ac:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <Server_Handle+0xc8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe ff39 	bl	8000428 <__aeabi_f2d>
 80015b6:	4603      	mov	r3, r0
 80015b8:	460c      	mov	r4, r1
 80015ba:	f107 000c 	add.w	r0, r7, #12
 80015be:	e9cd 3400 	strd	r3, r4, [sp]
 80015c2:	4a1a      	ldr	r2, [pc, #104]	; (800162c <Server_Handle+0xcc>)
 80015c4:	210a      	movs	r1, #10
 80015c6:	f005 fa37 	bl	8006a38 <sniprintf>
		strcat(datatosend, buffer);
 80015ca:	f107 020c 	add.w	r2, r7, #12
 80015ce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f005 fa83 	bl	8006ae0 <strcat>
		strcat(datatosend, "</p>");
 80015da:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe fdb6 	bl	8000150 <strlen>
 80015e4:	4603      	mov	r3, r0
 80015e6:	461a      	mov	r2, r3
 80015e8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015ec:	4413      	add	r3, r2
 80015ee:	4a10      	ldr	r2, [pc, #64]	; (8001630 <Server_Handle+0xd0>)
 80015f0:	6810      	ldr	r0, [r2, #0]
 80015f2:	6018      	str	r0, [r3, #0]
 80015f4:	7912      	ldrb	r2, [r2, #4]
 80015f6:	711a      	strb	r2, [r3, #4]
		strcat(datatosend, Terminate);
 80015f8:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <Server_Handle+0xd4>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001600:	4611      	mov	r1, r2
 8001602:	4618      	mov	r0, r3
 8001604:	f005 fa6c 	bl	8006ae0 <strcat>
		Server_Send(datatosend, Link_ID);
 8001608:	463b      	mov	r3, r7
 800160a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800160e:	6819      	ldr	r1, [r3, #0]
 8001610:	4610      	mov	r0, r2
 8001612:	f7ff ff53 	bl	80014bc <Server_Send>
}
 8001616:	bf00      	nop
 8001618:	f207 4774 	addw	r7, r7, #1140	; 0x474
 800161c:	46bd      	mov	sp, r7
 800161e:	bd90      	pop	{r4, r7, pc}
 8001620:	20000000 	.word	0x20000000
 8001624:	080085e0 	.word	0x080085e0
 8001628:	20000a2c 	.word	0x20000a2c
 800162c:	080085e4 	.word	0x080085e4
 8001630:	080085ec 	.word	0x080085ec
 8001634:	20000004 	.word	0x20000004

08001638 <Server_Start>:

void Server_Start ()
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b092      	sub	sp, #72	; 0x48
 800163c:	af00      	add	r7, sp, #0
	char buftocopyinto[64] = {0};
 800163e:	f107 0308 	add.w	r3, r7, #8
 8001642:	2240      	movs	r2, #64	; 0x40
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f004 fd9e 	bl	8006188 <memset>
	char Link_ID;
	while (!(Get_after("+IPD,", 1, &Link_ID, wifi_uart)));
 800164c:	bf00      	nop
 800164e:	1dfa      	adds	r2, r7, #7
 8001650:	4b2a      	ldr	r3, [pc, #168]	; (80016fc <Server_Start+0xc4>)
 8001652:	2101      	movs	r1, #1
 8001654:	482a      	ldr	r0, [pc, #168]	; (8001700 <Server_Start+0xc8>)
 8001656:	f000 faab 	bl	8001bb0 <Get_after>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f6      	beq.n	800164e <Server_Start+0x16>
	Link_ID -= 48;
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	3b30      	subs	r3, #48	; 0x30
 8001664:	b2db      	uxtb	r3, r3
 8001666:	71fb      	strb	r3, [r7, #7]
	while (!(Copy_upto(" HTTP/1.1", buftocopyinto, wifi_uart)));
 8001668:	bf00      	nop
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	4a23      	ldr	r2, [pc, #140]	; (80016fc <Server_Start+0xc4>)
 8001670:	4619      	mov	r1, r3
 8001672:	4824      	ldr	r0, [pc, #144]	; (8001704 <Server_Start+0xcc>)
 8001674:	f000 fae2 	bl	8001c3c <Copy_upto>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f5      	beq.n	800166a <Server_Start+0x32>
	if (Look_for("/ledon", buftocopyinto) == 1)
 800167e:	f107 0308 	add.w	r3, r7, #8
 8001682:	4619      	mov	r1, r3
 8001684:	4820      	ldr	r0, [pc, #128]	; (8001708 <Server_Start+0xd0>)
 8001686:	f000 f8c5 	bl	8001814 <Look_for>
 800168a:	4603      	mov	r3, r0
 800168c:	2b01      	cmp	r3, #1
 800168e:	d10a      	bne.n	80016a6 <Server_Start+0x6e>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001690:	2201      	movs	r2, #1
 8001692:	2120      	movs	r1, #32
 8001694:	481d      	ldr	r0, [pc, #116]	; (800170c <Server_Start+0xd4>)
 8001696:	f002 f915 	bl	80038c4 <HAL_GPIO_WritePin>
		Server_Handle("/ledon",Link_ID);
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	4619      	mov	r1, r3
 800169e:	481a      	ldr	r0, [pc, #104]	; (8001708 <Server_Start+0xd0>)
 80016a0:	f7ff ff5e 	bl	8001560 <Server_Handle>
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
		Server_Handle("/ ", Link_ID);
	}
}
 80016a4:	e026      	b.n	80016f4 <Server_Start+0xbc>
	else if (Look_for("/ledoff", buftocopyinto) == 1)
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	4619      	mov	r1, r3
 80016ac:	4818      	ldr	r0, [pc, #96]	; (8001710 <Server_Start+0xd8>)
 80016ae:	f000 f8b1 	bl	8001814 <Look_for>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d10a      	bne.n	80016ce <Server_Start+0x96>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2120      	movs	r1, #32
 80016bc:	4813      	ldr	r0, [pc, #76]	; (800170c <Server_Start+0xd4>)
 80016be:	f002 f901 	bl	80038c4 <HAL_GPIO_WritePin>
		Server_Handle("/ledoff",Link_ID);
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	4619      	mov	r1, r3
 80016c6:	4812      	ldr	r0, [pc, #72]	; (8001710 <Server_Start+0xd8>)
 80016c8:	f7ff ff4a 	bl	8001560 <Server_Handle>
}
 80016cc:	e012      	b.n	80016f4 <Server_Start+0xbc>
	else if (Look_for("/favicon.ico", buftocopyinto) == 1);
 80016ce:	f107 0308 	add.w	r3, r7, #8
 80016d2:	4619      	mov	r1, r3
 80016d4:	480f      	ldr	r0, [pc, #60]	; (8001714 <Server_Start+0xdc>)
 80016d6:	f000 f89d 	bl	8001814 <Look_for>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d009      	beq.n	80016f4 <Server_Start+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2120      	movs	r1, #32
 80016e4:	4809      	ldr	r0, [pc, #36]	; (800170c <Server_Start+0xd4>)
 80016e6:	f002 f8ed 	bl	80038c4 <HAL_GPIO_WritePin>
		Server_Handle("/ ", Link_ID);
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	4619      	mov	r1, r3
 80016ee:	480a      	ldr	r0, [pc, #40]	; (8001718 <Server_Start+0xe0>)
 80016f0:	f7ff ff36 	bl	8001560 <Server_Handle>
}
 80016f4:	bf00      	nop
 80016f6:	3748      	adds	r7, #72	; 0x48
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000b00 	.word	0x20000b00
 8001700:	080085f4 	.word	0x080085f4
 8001704:	080085fc 	.word	0x080085fc
 8001708:	08008608 	.word	0x08008608
 800170c:	40010800 	.word	0x40010800
 8001710:	08008610 	.word	0x08008610
 8001714:	08008618 	.word	0x08008618
 8001718:	08008628 	.word	0x08008628

0800171c <SetTemperature>:


void SetTemperature(float temp){
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	measure = temp;
 8001724:	4a05      	ldr	r2, [pc, #20]	; (800173c <SetTemperature+0x20>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6013      	str	r3, [r2, #0]
	measure = 22.22;
 800172a:	4b04      	ldr	r3, [pc, #16]	; (800173c <SetTemperature+0x20>)
 800172c:	4a04      	ldr	r2, [pc, #16]	; (8001740 <SetTemperature+0x24>)
 800172e:	601a      	str	r2, [r3, #0]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20000a2c 	.word	0x20000a2c
 8001740:	41b1c28f 	.word	0x41b1c28f

08001744 <Ringbuf_init>:

void store_char (unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <Ringbuf_init+0x64>)
 800174a:	4a18      	ldr	r2, [pc, #96]	; (80017ac <Ringbuf_init+0x68>)
 800174c:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 800174e:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <Ringbuf_init+0x6c>)
 8001750:	4a18      	ldr	r2, [pc, #96]	; (80017b4 <Ringbuf_init+0x70>)
 8001752:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 8001754:	4b18      	ldr	r3, [pc, #96]	; (80017b8 <Ringbuf_init+0x74>)
 8001756:	4a19      	ldr	r2, [pc, #100]	; (80017bc <Ringbuf_init+0x78>)
 8001758:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 800175a:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <Ringbuf_init+0x7c>)
 800175c:	4a19      	ldr	r2, [pc, #100]	; (80017c4 <Ringbuf_init+0x80>)
 800175e:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_ERR);
 8001760:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <Ringbuf_init+0x84>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	695a      	ldr	r2, [r3, #20]
 8001766:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <Ringbuf_init+0x84>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f042 0201 	orr.w	r2, r2, #1
 800176e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_ERR);
 8001770:	4b16      	ldr	r3, [pc, #88]	; (80017cc <Ringbuf_init+0x88>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	695a      	ldr	r2, [r3, #20]
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <Ringbuf_init+0x88>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f042 0201 	orr.w	r2, r2, #1
 800177e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <Ringbuf_init+0x84>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68da      	ldr	r2, [r3, #12]
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <Ringbuf_init+0x84>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f042 0220 	orr.w	r2, r2, #32
 800178e:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
 8001790:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <Ringbuf_init+0x88>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	68da      	ldr	r2, [r3, #12]
 8001796:	4b0d      	ldr	r3, [pc, #52]	; (80017cc <Ringbuf_init+0x88>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f042 0220 	orr.w	r2, r2, #32
 800179e:	60da      	str	r2, [r3, #12]
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	20000a4c 	.word	0x20000a4c
 80017ac:	20000200 	.word	0x20000200
 80017b0:	20000a50 	.word	0x20000a50
 80017b4:	20000408 	.word	0x20000408
 80017b8:	20000a54 	.word	0x20000a54
 80017bc:	20000610 	.word	0x20000610
 80017c0:	20000a48 	.word	0x20000a48
 80017c4:	20000818 	.word	0x20000818
 80017c8:	20000b00 	.word	0x20000b00
 80017cc:	20000c78 	.word	0x20000c78

080017d0 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	6039      	str	r1, [r7, #0]
 80017da:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017e2:	3301      	adds	r3, #1
 80017e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017e8:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d009      	beq.n	800180a <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	79f9      	ldrb	r1, [r7, #7]
 8001800:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 800180a:	bf00      	nop
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr

08001814 <Look_for>:


int Look_for (char *str, char *buffertolookinto)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
	int stringlength = strlen (str);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7fe fc96 	bl	8000150 <strlen>
 8001824:	4603      	mov	r3, r0
 8001826:	60fb      	str	r3, [r7, #12]
	int bufferlength = strlen (buffertolookinto);
 8001828:	6838      	ldr	r0, [r7, #0]
 800182a:	f7fe fc91 	bl	8000150 <strlen>
 800182e:	4603      	mov	r3, r0
 8001830:	60bb      	str	r3, [r7, #8]
	int so_far = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
repeat:
	while (str[so_far] != buffertolookinto[indx]) indx++;
 800183a:	e002      	b.n	8001842 <Look_for+0x2e>
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	3301      	adds	r3, #1
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	4413      	add	r3, r2
 8001848:	781a      	ldrb	r2, [r3, #0]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	6839      	ldr	r1, [r7, #0]
 800184e:	440b      	add	r3, r1
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	d1f2      	bne.n	800183c <Look_for+0x28>
	if (str[so_far] == buffertolookinto[indx]){
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	4413      	add	r3, r2
 800185c:	781a      	ldrb	r2, [r3, #0]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	6839      	ldr	r1, [r7, #0]
 8001862:	440b      	add	r3, r1
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d111      	bne.n	800188e <Look_for+0x7a>
	while (str[so_far] == buffertolookinto[indx])
 800186a:	e005      	b.n	8001878 <Look_for+0x64>
	{
		so_far++;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	3301      	adds	r3, #1
 8001870:	617b      	str	r3, [r7, #20]
		indx++;
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	3301      	adds	r3, #1
 8001876:	613b      	str	r3, [r7, #16]
	while (str[so_far] == buffertolookinto[indx])
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	781a      	ldrb	r2, [r3, #0]
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	6839      	ldr	r1, [r7, #0]
 8001884:	440b      	add	r3, r1
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	429a      	cmp	r2, r3
 800188a:	d0ef      	beq.n	800186c <Look_for+0x58>
 800188c:	e008      	b.n	80018a0 <Look_for+0x8c>
	}
	}

	else
		{
			so_far =0;
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
			if (indx >= bufferlength) return -1;
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	429a      	cmp	r2, r3
 8001898:	dbcf      	blt.n	800183a <Look_for+0x26>
 800189a:	f04f 33ff 	mov.w	r3, #4294967295
 800189e:	e007      	b.n	80018b0 <Look_for+0x9c>
			goto repeat;
		}

	if (so_far == stringlength) return 1;
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d101      	bne.n	80018ac <Look_for+0x98>
 80018a8:	2301      	movs	r3, #1
 80018aa:	e001      	b.n	80018b0 <Look_for+0x9c>
	else return -1;
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <Uart_flush>:
	}
}


void Uart_flush (UART_HandleTypeDef *uart)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a12      	ldr	r2, [pc, #72]	; (800190c <Uart_flush+0x54>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d10c      	bne.n	80018e2 <Uart_flush+0x2a>
	{
		memset(_rx_buffer1->buffer,'\0', UART_BUFFER_SIZE);
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <Uart_flush+0x58>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018d0:	2100      	movs	r1, #0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f004 fc58 	bl	8006188 <memset>
		_rx_buffer1->head = 0;
 80018d8:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <Uart_flush+0x58>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2200      	movs	r2, #0
 80018de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
	if (uart == pc_uart)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a0b      	ldr	r2, [pc, #44]	; (8001914 <Uart_flush+0x5c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d10c      	bne.n	8001904 <Uart_flush+0x4c>
	{
		memset(_rx_buffer2->buffer,'\0', UART_BUFFER_SIZE);
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <Uart_flush+0x60>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018f2:	2100      	movs	r1, #0
 80018f4:	4618      	mov	r0, r3
 80018f6:	f004 fc47 	bl	8006188 <memset>
		_rx_buffer2->head = 0;
 80018fa:	4b07      	ldr	r3, [pc, #28]	; (8001918 <Uart_flush+0x60>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2200      	movs	r2, #0
 8001900:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000b00 	.word	0x20000b00
 8001910:	20000a4c 	.word	0x20000a4c
 8001914:	20000c78 	.word	0x20000c78
 8001918:	20000a54 	.word	0x20000a54

0800191c <Uart_peek>:


int Uart_peek(UART_HandleTypeDef *uart)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a1c      	ldr	r2, [pc, #112]	; (8001998 <Uart_peek+0x7c>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d114      	bne.n	8001956 <Uart_peek+0x3a>
	{
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 800192c:	4b1b      	ldr	r3, [pc, #108]	; (800199c <Uart_peek+0x80>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001934:	4b19      	ldr	r3, [pc, #100]	; (800199c <Uart_peek+0x80>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800193c:	429a      	cmp	r2, r3
 800193e:	d102      	bne.n	8001946 <Uart_peek+0x2a>
		  {
		    return -1;
 8001940:	f04f 33ff 	mov.w	r3, #4294967295
 8001944:	e022      	b.n	800198c <Uart_peek+0x70>
		  }
		  else
		  {
		    return _rx_buffer1->buffer[_rx_buffer1->tail];
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <Uart_peek+0x80>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	4b14      	ldr	r3, [pc, #80]	; (800199c <Uart_peek+0x80>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001952:	5cd3      	ldrb	r3, [r2, r3]
 8001954:	e01a      	b.n	800198c <Uart_peek+0x70>
		  }
	}

	else if (uart == pc_uart)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a11      	ldr	r2, [pc, #68]	; (80019a0 <Uart_peek+0x84>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d114      	bne.n	8001988 <Uart_peek+0x6c>
	{
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <Uart_peek+0x88>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001966:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <Uart_peek+0x88>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800196e:	429a      	cmp	r2, r3
 8001970:	d102      	bne.n	8001978 <Uart_peek+0x5c>
		  {
		    return -1;
 8001972:	f04f 33ff 	mov.w	r3, #4294967295
 8001976:	e009      	b.n	800198c <Uart_peek+0x70>
		  }
		  else
		  {
		    return _rx_buffer2->buffer[_rx_buffer2->tail];
 8001978:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <Uart_peek+0x88>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <Uart_peek+0x88>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001984:	5cd3      	ldrb	r3, [r2, r3]
 8001986:	e001      	b.n	800198c <Uart_peek+0x70>
		  }
	}

	return -1;
 8001988:	f04f 33ff 	mov.w	r3, #4294967295
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	20000b00 	.word	0x20000b00
 800199c:	20000a4c 	.word	0x20000a4c
 80019a0:	20000c78 	.word	0x20000c78
 80019a4:	20000a54 	.word	0x20000a54

080019a8 <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a29      	ldr	r2, [pc, #164]	; (8001a58 <Uart_read+0xb0>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d121      	bne.n	80019fc <Uart_read+0x54>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 80019b8:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <Uart_read+0xb4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80019c0:	4b26      	ldr	r3, [pc, #152]	; (8001a5c <Uart_read+0xb4>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d102      	bne.n	80019d2 <Uart_read+0x2a>
		  {
		    return -1;
 80019cc:	f04f 33ff 	mov.w	r3, #4294967295
 80019d0:	e03c      	b.n	8001a4c <Uart_read+0xa4>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 80019d2:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <Uart_read+0xb4>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <Uart_read+0xb4>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80019de:	5cd3      	ldrb	r3, [r2, r3]
 80019e0:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 80019e2:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <Uart_read+0xb4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <Uart_read+0xb4>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 80019f8:	7bbb      	ldrb	r3, [r7, #14]
 80019fa:	e027      	b.n	8001a4c <Uart_read+0xa4>
		  }
	}

	else if (uart == pc_uart)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a18      	ldr	r2, [pc, #96]	; (8001a60 <Uart_read+0xb8>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d121      	bne.n	8001a48 <Uart_read+0xa0>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 8001a04:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <Uart_read+0xbc>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001a0c:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <Uart_read+0xbc>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d102      	bne.n	8001a1e <Uart_read+0x76>
		  {
		    return -1;
 8001a18:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1c:	e016      	b.n	8001a4c <Uart_read+0xa4>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <Uart_read+0xbc>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <Uart_read+0xbc>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001a2a:	5cd3      	ldrb	r3, [r2, r3]
 8001a2c:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <Uart_read+0xbc>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <Uart_read+0xbc>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	e001      	b.n	8001a4c <Uart_read+0xa4>
		  }
	}

	else return -1;
 8001a48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	20000b00 	.word	0x20000b00
 8001a5c:	20000a4c 	.word	0x20000a4c
 8001a60:	20000c78 	.word	0x20000c78
 8001a64:	20000a54 	.word	0x20000a54

08001a68 <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
	if (c>=0)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	db54      	blt.n	8001b22 <Uart_write+0xba>
	{
		if (uart == device_uart){
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	4a2c      	ldr	r2, [pc, #176]	; (8001b2c <Uart_write+0xc4>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d126      	bne.n	8001ace <Uart_write+0x66>
		int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8001a80:	4b2b      	ldr	r3, [pc, #172]	; (8001b30 <Uart_write+0xc8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a88:	3301      	adds	r3, #1
 8001a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a8e:	60bb      	str	r3, [r7, #8]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer1->tail);
 8001a90:	bf00      	nop
 8001a92:	4b27      	ldr	r3, [pc, #156]	; (8001b30 <Uart_write+0xc8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d0f8      	beq.n	8001a92 <Uart_write+0x2a>

		_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 8001aa0:	4b23      	ldr	r3, [pc, #140]	; (8001b30 <Uart_write+0xc8>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b22      	ldr	r3, [pc, #136]	; (8001b30 <Uart_write+0xc8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	b2c9      	uxtb	r1, r1
 8001ab0:	54d1      	strb	r1, [r2, r3]
		_tx_buffer1->head = i;
 8001ab2:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <Uart_write+0xc8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		__HAL_UART_ENABLE_IT(device_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8001abc:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <Uart_write+0xc4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <Uart_write+0xc4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001aca:	60da      	str	r2, [r3, #12]
			_tx_buffer2->head = i;

			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
			}
	}
}
 8001acc:	e029      	b.n	8001b22 <Uart_write+0xba>
		else if (uart == pc_uart){
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	4a18      	ldr	r2, [pc, #96]	; (8001b34 <Uart_write+0xcc>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d125      	bne.n	8001b22 <Uart_write+0xba>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 8001ad6:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <Uart_write+0xd0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ade:	3301      	adds	r3, #1
 8001ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ae4:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 8001ae6:	bf00      	nop
 8001ae8:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <Uart_write+0xd0>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d0f8      	beq.n	8001ae8 <Uart_write+0x80>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 8001af6:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <Uart_write+0xd0>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <Uart_write+0xd0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	b2c9      	uxtb	r1, r1
 8001b06:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <Uart_write+0xd0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <Uart_write+0xcc>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <Uart_write+0xcc>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b20:	60da      	str	r2, [r3, #12]
}
 8001b22:	bf00      	nop
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr
 8001b2c:	20000b00 	.word	0x20000b00
 8001b30:	20000a50 	.word	0x20000a50
 8001b34:	20000c78 	.word	0x20000c78
 8001b38:	20000a48 	.word	0x20000a48

08001b3c <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a16      	ldr	r2, [pc, #88]	; (8001ba0 <IsDataAvailable+0x64>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d10e      	bne.n	8001b6a <IsDataAvailable+0x2e>
 8001b4c:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <IsDataAvailable+0x68>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <IsDataAvailable+0x68>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b68:	e014      	b.n	8001b94 <IsDataAvailable+0x58>
	else if (uart == pc_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ba8 <IsDataAvailable+0x6c>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d10e      	bne.n	8001b90 <IsDataAvailable+0x54>
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <IsDataAvailable+0x70>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <IsDataAvailable+0x70>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b8e:	e001      	b.n	8001b94 <IsDataAvailable+0x58>
	return -1;
 8001b90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20000b00 	.word	0x20000b00
 8001ba4:	20000a4c 	.word	0x20000a4c
 8001ba8:	20000c78 	.word	0x20000c78
 8001bac:	20000a54 	.word	0x20000a54

08001bb0 <Get_after>:



int Get_after (char *string, uint8_t numberofchars, char *buffertosave, UART_HandleTypeDef *uart)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	607a      	str	r2, [r7, #4]
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	72fb      	strb	r3, [r7, #11]

	while (Wait_for(string, uart) != 1);
 8001bc0:	bf00      	nop
 8001bc2:	6839      	ldr	r1, [r7, #0]
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f000 f8b7 	bl	8001d38 <Wait_for>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d1f8      	bne.n	8001bc2 <Get_after+0x12>
	for (int indx=0; indx<numberofchars; indx++)
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	e012      	b.n	8001bfc <Get_after+0x4c>
	{
		while (!(IsDataAvailable(uart)));
 8001bd6:	bf00      	nop
 8001bd8:	6838      	ldr	r0, [r7, #0]
 8001bda:	f7ff ffaf 	bl	8001b3c <IsDataAvailable>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d0f9      	beq.n	8001bd8 <Get_after+0x28>
		buffertosave[indx] = Uart_read(uart);
 8001be4:	6838      	ldr	r0, [r7, #0]
 8001be6:	f7ff fedf 	bl	80019a8 <Uart_read>
 8001bea:	4601      	mov	r1, r0
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	b2ca      	uxtb	r2, r1
 8001bf4:	701a      	strb	r2, [r3, #0]
	for (int indx=0; indx<numberofchars; indx++)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	7afb      	ldrb	r3, [r7, #11]
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	dbe8      	blt.n	8001bd6 <Get_after+0x26>
	}
	return 1;
 8001c04:	2301      	movs	r3, #1
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <Uart_sendstring>:

void Uart_sendstring (const char *s, UART_HandleTypeDef *uart)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	6039      	str	r1, [r7, #0]
	while(*s!='\0') Uart_write(*s++, uart);
 8001c18:	e007      	b.n	8001c2a <Uart_sendstring+0x1c>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	607a      	str	r2, [r7, #4]
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	6839      	ldr	r1, [r7, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ff1f 	bl	8001a68 <Uart_write>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f3      	bne.n	8001c1a <Uart_sendstring+0xc>
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <Copy_upto>:
  while(*s) Uart_write(*s++, uart);
}


int Copy_upto (char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
	int so_far =0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f7fe fa7f 	bl	8000150 <strlen>
 8001c52:	4603      	mov	r3, r0
 8001c54:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61bb      	str	r3, [r7, #24]

again:
	while (!IsDataAvailable(uart));
 8001c5a:	bf00      	nop
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff ff6d 	bl	8001b3c <IsDataAvailable>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0f9      	beq.n	8001c5c <Copy_upto+0x20>
	while (Uart_peek(uart) != string[so_far])
 8001c68:	e01f      	b.n	8001caa <Copy_upto+0x6e>
		{
			buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 8001c6a:	4b32      	ldr	r3, [pc, #200]	; (8001d34 <Copy_upto+0xf8>)
 8001c6c:	6819      	ldr	r1, [r3, #0]
 8001c6e:	4b31      	ldr	r3, [pc, #196]	; (8001d34 <Copy_upto+0xf8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	68b8      	ldr	r0, [r7, #8]
 8001c7a:	4403      	add	r3, r0
 8001c7c:	5c8a      	ldrb	r2, [r1, r2]
 8001c7e:	701a      	strb	r2, [r3, #0]
			_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8001c80:	4b2c      	ldr	r3, [pc, #176]	; (8001d34 <Copy_upto+0xf8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001c88:	1c5a      	adds	r2, r3, #1
 8001c8a:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <Copy_upto+0xf8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c92:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	61bb      	str	r3, [r7, #24]
			while (!IsDataAvailable(uart));
 8001c9c:	bf00      	nop
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff ff4c 	bl	8001b3c <IsDataAvailable>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f9      	beq.n	8001c9e <Copy_upto+0x62>
	while (Uart_peek(uart) != string[so_far])
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff fe36 	bl	800191c <Uart_peek>
 8001cb0:	4601      	mov	r1, r0
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	4299      	cmp	r1, r3
 8001cbc:	d1d5      	bne.n	8001c6a <Copy_upto+0x2e>

		}
	while (Uart_peek(uart) == string [so_far])
 8001cbe:	e01b      	b.n	8001cf8 <Copy_upto+0xbc>
	{
		so_far++;
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = Uart_read(uart);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff fe6e 	bl	80019a8 <Uart_read>
 8001ccc:	4601      	mov	r1, r0
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	1c5a      	adds	r2, r3, #1
 8001cd2:	61ba      	str	r2, [r7, #24]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	4413      	add	r3, r2
 8001cda:	b2ca      	uxtb	r2, r1
 8001cdc:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8001cde:	69fa      	ldr	r2, [r7, #28]
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d101      	bne.n	8001cea <Copy_upto+0xae>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e01f      	b.n	8001d2a <Copy_upto+0xee>
		while (!IsDataAvailable(uart));
 8001cea:	bf00      	nop
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff ff25 	bl	8001b3c <IsDataAvailable>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0f9      	beq.n	8001cec <Copy_upto+0xb0>
	while (Uart_peek(uart) == string [so_far])
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff fe0f 	bl	800191c <Uart_peek>
 8001cfe:	4601      	mov	r1, r0
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	4413      	add	r3, r2
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	4299      	cmp	r1, r3
 8001d0a:	d0d9      	beq.n	8001cc0 <Copy_upto+0x84>
	}

	if (so_far != len)
 8001d0c:	69fa      	ldr	r2, [r7, #28]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d002      	beq.n	8001d1a <Copy_upto+0xde>
	{
		so_far = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	61fb      	str	r3, [r7, #28]
		goto again;
 8001d18:	e79f      	b.n	8001c5a <Copy_upto+0x1e>
	}

	if (so_far == len) return 1;
 8001d1a:	69fa      	ldr	r2, [r7, #28]
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d101      	bne.n	8001d26 <Copy_upto+0xea>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e001      	b.n	8001d2a <Copy_upto+0xee>
	else return -1;
 8001d26:	f04f 33ff 	mov.w	r3, #4294967295

}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3720      	adds	r7, #32
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000a4c 	.word	0x20000a4c

08001d38 <Wait_for>:


int Wait_for (char *string,UART_HandleTypeDef *uart)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7fe fa02 	bl	8000150 <strlen>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	60bb      	str	r3, [r7, #8]

again_device:
	while (!IsDataAvailable(uart));
 8001d50:	bf00      	nop
 8001d52:	6838      	ldr	r0, [r7, #0]
 8001d54:	f7ff fef2 	bl	8001b3c <IsDataAvailable>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0f9      	beq.n	8001d52 <Wait_for+0x1a>
	if (Uart_peek(uart) != string[so_far])
 8001d5e:	6838      	ldr	r0, [r7, #0]
 8001d60:	f7ff fddc 	bl	800191c <Uart_peek>
 8001d64:	4601      	mov	r1, r0
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	4299      	cmp	r1, r3
 8001d70:	d01e      	beq.n	8001db0 <Wait_for+0x78>
	{
		 _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE ;
 8001d72:	4b1e      	ldr	r3, [pc, #120]	; (8001dec <Wait_for+0xb4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001d7a:	1c5a      	adds	r2, r3, #1
 8001d7c:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <Wait_for+0xb4>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		goto again_device;
 8001d88:	e7e2      	b.n	8001d50 <Wait_for+0x18>

	}
	while (Uart_peek(uart) == string [so_far])
	{
		so_far++;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	60fb      	str	r3, [r7, #12]
		Uart_read(uart);
 8001d90:	6838      	ldr	r0, [r7, #0]
 8001d92:	f7ff fe09 	bl	80019a8 <Uart_read>
		if (so_far == len) return 1;
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d101      	bne.n	8001da2 <Wait_for+0x6a>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e01f      	b.n	8001de2 <Wait_for+0xaa>
		while (!IsDataAvailable(uart));
 8001da2:	bf00      	nop
 8001da4:	6838      	ldr	r0, [r7, #0]
 8001da6:	f7ff fec9 	bl	8001b3c <IsDataAvailable>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0f9      	beq.n	8001da4 <Wait_for+0x6c>
	while (Uart_peek(uart) == string [so_far])
 8001db0:	6838      	ldr	r0, [r7, #0]
 8001db2:	f7ff fdb3 	bl	800191c <Uart_peek>
 8001db6:	4601      	mov	r1, r0
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4299      	cmp	r1, r3
 8001dc2:	d0e2      	beq.n	8001d8a <Wait_for+0x52>
	}

	if (so_far != len)
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d002      	beq.n	8001dd2 <Wait_for+0x9a>
	{
		so_far = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
		goto again_device;
 8001dd0:	e7be      	b.n	8001d50 <Wait_for+0x18>
	}

	if (so_far == len) return 1;
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d101      	bne.n	8001dde <Wait_for+0xa6>
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e001      	b.n	8001de2 <Wait_for+0xaa>
	else return -1;
 8001dde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000a4c 	.word	0x20000a4c

08001df0 <Uart_isr>:

void Uart_isr (UART_HandleTypeDef *huart)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	f003 0320 	and.w	r3, r3, #32
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d023      	beq.n	8001e5a <Uart_isr+0x6a>
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	f003 0320 	and.w	r3, r3, #32
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d01e      	beq.n	8001e5a <Uart_isr+0x6a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	73fb      	strb	r3, [r7, #15]
        if (huart == device_uart)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a3f      	ldr	r2, [pc, #252]	; (8001f2c <Uart_isr+0x13c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d107      	bne.n	8001e42 <Uart_isr+0x52>
        {
        	store_char (c, _rx_buffer1);  // store data in buffer
 8001e32:	4b3f      	ldr	r3, [pc, #252]	; (8001f30 <Uart_isr+0x140>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	4611      	mov	r1, r2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff fcc8 	bl	80017d0 <store_char>
        else if (huart == pc_uart)
        {
           	store_char (c, _rx_buffer2);  // store data in buffer
        }

        return;
 8001e40:	e06e      	b.n	8001f20 <Uart_isr+0x130>
        else if (huart == pc_uart)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a3b      	ldr	r2, [pc, #236]	; (8001f34 <Uart_isr+0x144>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d16a      	bne.n	8001f20 <Uart_isr+0x130>
           	store_char (c, _rx_buffer2);  // store data in buffer
 8001e4a:	4b3b      	ldr	r3, [pc, #236]	; (8001f38 <Uart_isr+0x148>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	4611      	mov	r1, r2
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff fcbc 	bl	80017d0 <store_char>
        return;
 8001e58:	e062      	b.n	8001f20 <Uart_isr+0x130>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d060      	beq.n	8001f26 <Uart_isr+0x136>
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d05b      	beq.n	8001f26 <Uart_isr+0x136>
    {
    	if (huart == device_uart){
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a2e      	ldr	r2, [pc, #184]	; (8001f2c <Uart_isr+0x13c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d127      	bne.n	8001ec6 <Uart_isr+0xd6>
    	if(tx_buffer1.head == tx_buffer1.tail)
 8001e76:	4b31      	ldr	r3, [pc, #196]	; (8001f3c <Uart_isr+0x14c>)
 8001e78:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001e7c:	4b2f      	ldr	r3, [pc, #188]	; (8001f3c <Uart_isr+0x14c>)
 8001e7e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d108      	bne.n	8001e98 <Uart_isr+0xa8>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68da      	ldr	r2, [r3, #12]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e94:	60da      	str	r2, [r3, #12]
        	      huart->Instance->SR;
        	      huart->Instance->DR = c;

        	    }
        	}
    	return;
 8001e96:	e045      	b.n	8001f24 <Uart_isr+0x134>
    	      unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8001e98:	4b28      	ldr	r3, [pc, #160]	; (8001f3c <Uart_isr+0x14c>)
 8001e9a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e9e:	4a27      	ldr	r2, [pc, #156]	; (8001f3c <Uart_isr+0x14c>)
 8001ea0:	5cd3      	ldrb	r3, [r2, r3]
 8001ea2:	737b      	strb	r3, [r7, #13]
    	      tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8001ea4:	4b25      	ldr	r3, [pc, #148]	; (8001f3c <Uart_isr+0x14c>)
 8001ea6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001eaa:	3301      	adds	r3, #1
 8001eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eb0:	4a22      	ldr	r2, [pc, #136]	; (8001f3c <Uart_isr+0x14c>)
 8001eb2:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	7b7a      	ldrb	r2, [r7, #13]
 8001ec2:	605a      	str	r2, [r3, #4]
    	return;
 8001ec4:	e02e      	b.n	8001f24 <Uart_isr+0x134>
    	else if (huart == pc_uart){
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a1a      	ldr	r2, [pc, #104]	; (8001f34 <Uart_isr+0x144>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d12a      	bne.n	8001f24 <Uart_isr+0x134>
        	if(tx_buffer2.head == tx_buffer2.tail)
 8001ece:	4b1c      	ldr	r3, [pc, #112]	; (8001f40 <Uart_isr+0x150>)
 8001ed0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001ed4:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <Uart_isr+0x150>)
 8001ed6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d108      	bne.n	8001ef0 <Uart_isr+0x100>
        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eec:	60da      	str	r2, [r3, #12]
    	return;
 8001eee:	e019      	b.n	8001f24 <Uart_isr+0x134>
        	      unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 8001ef0:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <Uart_isr+0x150>)
 8001ef2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001ef6:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <Uart_isr+0x150>)
 8001ef8:	5cd3      	ldrb	r3, [r2, r3]
 8001efa:	73bb      	strb	r3, [r7, #14]
        	      tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8001efc:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <Uart_isr+0x150>)
 8001efe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001f02:	3301      	adds	r3, #1
 8001f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f08:	4a0d      	ldr	r2, [pc, #52]	; (8001f40 <Uart_isr+0x150>)
 8001f0a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
        	      huart->Instance->SR;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
        	      huart->Instance->DR = c;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	7bba      	ldrb	r2, [r7, #14]
 8001f1a:	605a      	str	r2, [r3, #4]
    	return;
 8001f1c:	bf00      	nop
 8001f1e:	e001      	b.n	8001f24 <Uart_isr+0x134>
        return;
 8001f20:	bf00      	nop
 8001f22:	e000      	b.n	8001f26 <Uart_isr+0x136>
    	return;
 8001f24:	bf00      	nop
    }
}
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20000b00 	.word	0x20000b00
 8001f30:	20000a4c 	.word	0x20000a4c
 8001f34:	20000c78 	.word	0x20000c78
 8001f38:	20000a54 	.word	0x20000a54
 8001f3c:	20000408 	.word	0x20000408
 8001f40:	20000818 	.word	0x20000818

08001f44 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2203      	movs	r2, #3
 8001f50:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2203      	movs	r2, #3
 8001f62:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2203      	movs	r2, #3
 8001f68:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2203      	movs	r2, #3
 8001f6e:	715a      	strb	r2, [r3, #5]
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr

08001f7a <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b08a      	sub	sp, #40	; 0x28
 8001f7e:	af04      	add	r7, sp, #16
 8001f80:	60f8      	str	r0, [r7, #12]
 8001f82:	460b      	mov	r3, r1
 8001f84:	607a      	str	r2, [r7, #4]
 8001f86:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001f94:	7afb      	ldrb	r3, [r7, #11]
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	8af9      	ldrh	r1, [r7, #22]
 8001f9a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f9e:	9302      	str	r3, [sp, #8]
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	9301      	str	r3, [sp, #4]
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	2301      	movs	r3, #1
 8001fac:	f001 ff10 	bl	8003dd0 <HAL_I2C_Mem_Read>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10b      	bne.n	8001fce <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001fb6:	7d7b      	ldrb	r3, [r7, #21]
 8001fb8:	021b      	lsls	r3, r3, #8
 8001fba:	b21a      	sxth	r2, r3
 8001fbc:	7d3b      	ldrb	r3, [r7, #20]
 8001fbe:	b21b      	sxth	r3, r3
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	b21b      	sxth	r3, r3
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	801a      	strh	r2, [r3, #0]
		return true;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <read_register16+0x56>
	} else
		return false;
 8001fce:	2300      	movs	r3, #0

}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001fd8:	b590      	push	{r4, r7, lr}
 8001fda:	b08b      	sub	sp, #44	; 0x2c
 8001fdc:	af04      	add	r7, sp, #16
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	72fb      	strb	r3, [r7, #11]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001ff8:	7afb      	ldrb	r3, [r7, #11]
 8001ffa:	b29c      	uxth	r4, r3
 8001ffc:	7abb      	ldrb	r3, [r7, #10]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	8af9      	ldrh	r1, [r7, #22]
 8002002:	f241 3288 	movw	r2, #5000	; 0x1388
 8002006:	9202      	str	r2, [sp, #8]
 8002008:	9301      	str	r3, [sp, #4]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	2301      	movs	r3, #1
 8002010:	4622      	mov	r2, r4
 8002012:	f001 fedd 	bl	8003dd0 <HAL_I2C_Mem_Read>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <read_data+0x48>
		return 0;
 800201c:	2300      	movs	r3, #0
 800201e:	e000      	b.n	8002022 <read_data+0x4a>
	else
		return 1;
 8002020:	2301      	movs	r3, #1

}
 8002022:	4618      	mov	r0, r3
 8002024:	371c      	adds	r7, #28
 8002026:	46bd      	mov	sp, r7
 8002028:	bd90      	pop	{r4, r7, pc}

0800202a <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	461a      	mov	r2, r3
 8002036:	2188      	movs	r1, #136	; 0x88
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff ff9e 	bl	8001f7a <read_register16>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d06f      	beq.n	8002124 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3302      	adds	r3, #2
 8002048:	461a      	mov	r2, r3
 800204a:	218a      	movs	r1, #138	; 0x8a
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff ff94 	bl	8001f7a <read_register16>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d065      	beq.n	8002124 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3304      	adds	r3, #4
 800205c:	461a      	mov	r2, r3
 800205e:	218c      	movs	r1, #140	; 0x8c
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff ff8a 	bl	8001f7a <read_register16>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d05b      	beq.n	8002124 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3306      	adds	r3, #6
 8002070:	461a      	mov	r2, r3
 8002072:	218e      	movs	r1, #142	; 0x8e
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff ff80 	bl	8001f7a <read_register16>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d051      	beq.n	8002124 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3308      	adds	r3, #8
 8002084:	461a      	mov	r2, r3
 8002086:	2190      	movs	r1, #144	; 0x90
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff ff76 	bl	8001f7a <read_register16>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d047      	beq.n	8002124 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	330a      	adds	r3, #10
 8002098:	461a      	mov	r2, r3
 800209a:	2192      	movs	r1, #146	; 0x92
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff ff6c 	bl	8001f7a <read_register16>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d03d      	beq.n	8002124 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	330c      	adds	r3, #12
 80020ac:	461a      	mov	r2, r3
 80020ae:	2194      	movs	r1, #148	; 0x94
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ff62 	bl	8001f7a <read_register16>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d033      	beq.n	8002124 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	330e      	adds	r3, #14
 80020c0:	461a      	mov	r2, r3
 80020c2:	2196      	movs	r1, #150	; 0x96
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff ff58 	bl	8001f7a <read_register16>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d029      	beq.n	8002124 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3310      	adds	r3, #16
 80020d4:	461a      	mov	r2, r3
 80020d6:	2198      	movs	r1, #152	; 0x98
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff ff4e 	bl	8001f7a <read_register16>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d01f      	beq.n	8002124 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3312      	adds	r3, #18
 80020e8:	461a      	mov	r2, r3
 80020ea:	219a      	movs	r1, #154	; 0x9a
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff ff44 	bl	8001f7a <read_register16>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d015      	beq.n	8002124 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3314      	adds	r3, #20
 80020fc:	461a      	mov	r2, r3
 80020fe:	219c      	movs	r1, #156	; 0x9c
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff ff3a 	bl	8001f7a <read_register16>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00b      	beq.n	8002124 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8002110:	461a      	mov	r2, r3
 8002112:	219e      	movs	r1, #158	; 0x9e
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff ff30 	bl	8001f7a <read_register16>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <read_calibration_data+0xfa>

		return true;
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <read_calibration_data+0xfc>
	}

	return false;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 800212e:	b580      	push	{r7, lr}
 8002130:	b084      	sub	sp, #16
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f103 0218 	add.w	r2, r3, #24
 800213c:	2301      	movs	r3, #1
 800213e:	21a1      	movs	r1, #161	; 0xa1
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff ff49 	bl	8001fd8 <read_data>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d14b      	bne.n	80021e4 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	331a      	adds	r3, #26
 8002150:	461a      	mov	r2, r3
 8002152:	21e1      	movs	r1, #225	; 0xe1
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff ff10 	bl	8001f7a <read_register16>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d041      	beq.n	80021e4 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f103 021c 	add.w	r2, r3, #28
 8002166:	2301      	movs	r3, #1
 8002168:	21e3      	movs	r1, #227	; 0xe3
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff ff34 	bl	8001fd8 <read_data>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d136      	bne.n	80021e4 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8002176:	f107 030e 	add.w	r3, r7, #14
 800217a:	461a      	mov	r2, r3
 800217c:	21e4      	movs	r1, #228	; 0xe4
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff fefb 	bl	8001f7a <read_register16>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d02c      	beq.n	80021e4 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 800218a:	f107 030c 	add.w	r3, r7, #12
 800218e:	461a      	mov	r2, r3
 8002190:	21e5      	movs	r1, #229	; 0xe5
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff fef1 	bl	8001f7a <read_register16>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d022      	beq.n	80021e4 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f103 0222 	add.w	r2, r3, #34	; 0x22
 80021a4:	2301      	movs	r3, #1
 80021a6:	21e7      	movs	r1, #231	; 0xe7
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff ff15 	bl	8001fd8 <read_data>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d117      	bne.n	80021e4 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80021b4:	89fb      	ldrh	r3, [r7, #14]
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	b21b      	sxth	r3, r3
 80021ba:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 80021be:	b21a      	sxth	r2, r3
 80021c0:	89fb      	ldrh	r3, [r7, #14]
 80021c2:	121b      	asrs	r3, r3, #8
 80021c4:	b21b      	sxth	r3, r3
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	b21b      	sxth	r3, r3
 80021cc:	4313      	orrs	r3, r2
 80021ce:	b21a      	sxth	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80021d4:	89bb      	ldrh	r3, [r7, #12]
 80021d6:	091b      	lsrs	r3, r3, #4
 80021d8:	b29b      	uxth	r3, r3
 80021da:	b21a      	sxth	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	841a      	strh	r2, [r3, #32]

		return true;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e000      	b.n	80021e6 <read_hum_calibration_data+0xb8>
	}

	return false;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b088      	sub	sp, #32
 80021f2:	af04      	add	r7, sp, #16
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	460b      	mov	r3, r1
 80021f8:	70fb      	strb	r3, [r7, #3]
 80021fa:	4613      	mov	r3, r2
 80021fc:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	b29a      	uxth	r2, r3
 800220e:	89f9      	ldrh	r1, [r7, #14]
 8002210:	f242 7310 	movw	r3, #10000	; 0x2710
 8002214:	9302      	str	r3, [sp, #8]
 8002216:	2301      	movs	r3, #1
 8002218:	9301      	str	r3, [sp, #4]
 800221a:	1cbb      	adds	r3, r7, #2
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	2301      	movs	r3, #1
 8002220:	f001 fcdc 	bl	8003bdc <HAL_I2C_Mem_Write>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <write_register8+0x40>
		return false;
 800222a:	2300      	movs	r3, #0
 800222c:	e000      	b.n	8002230 <write_register8+0x42>
	else
		return true;
 800222e:	2301      	movs	r3, #1
}
 8002230:	4618      	mov	r0, r3
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002246:	2b76      	cmp	r3, #118	; 0x76
 8002248:	d005      	beq.n	8002256 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800224e:	2b77      	cmp	r3, #119	; 0x77
 8002250:	d001      	beq.n	8002256 <bmp280_init+0x1e>

		return false;
 8002252:	2300      	movs	r3, #0
 8002254:	e099      	b.n	800238a <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800225c:	2301      	movs	r3, #1
 800225e:	21d0      	movs	r1, #208	; 0xd0
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff feb9 	bl	8001fd8 <read_data>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <bmp280_init+0x38>
		return false;
 800226c:	2300      	movs	r3, #0
 800226e:	e08c      	b.n	800238a <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002276:	2b58      	cmp	r3, #88	; 0x58
 8002278:	d006      	beq.n	8002288 <bmp280_init+0x50>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002280:	2b60      	cmp	r3, #96	; 0x60
 8002282:	d001      	beq.n	8002288 <bmp280_init+0x50>

		return false;
 8002284:	2300      	movs	r3, #0
 8002286:	e080      	b.n	800238a <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8002288:	22b6      	movs	r2, #182	; 0xb6
 800228a:	21e0      	movs	r1, #224	; 0xe0
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ffae 	bl	80021ee <write_register8>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <bmp280_init+0x64>
		return false;
 8002298:	2300      	movs	r3, #0
 800229a:	e076      	b.n	800238a <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 800229c:	f107 020c 	add.w	r2, r7, #12
 80022a0:	2301      	movs	r3, #1
 80022a2:	21f3      	movs	r1, #243	; 0xf3
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7ff fe97 	bl	8001fd8 <read_data>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1f5      	bne.n	800229c <bmp280_init+0x64>
				&& (status & 1) == 0)
 80022b0:	7b3b      	ldrb	r3, [r7, #12]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f0      	bne.n	800229c <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff feb5 	bl	800202a <read_calibration_data>
 80022c0:	4603      	mov	r3, r0
 80022c2:	f083 0301 	eor.w	r3, r3, #1
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d100      	bne.n	80022ce <bmp280_init+0x96>
 80022cc:	e001      	b.n	80022d2 <bmp280_init+0x9a>
		return false;
 80022ce:	2300      	movs	r3, #0
 80022d0:	e05b      	b.n	800238a <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80022d8:	2b60      	cmp	r3, #96	; 0x60
 80022da:	d10a      	bne.n	80022f2 <bmp280_init+0xba>
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ff26 	bl	800212e <read_hum_calibration_data>
 80022e2:	4603      	mov	r3, r0
 80022e4:	f083 0301 	eor.w	r3, r3, #1
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <bmp280_init+0xba>
		return false;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e04b      	b.n	800238a <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	795b      	ldrb	r3, [r3, #5]
 80022f6:	015b      	lsls	r3, r3, #5
 80022f8:	b25a      	sxtb	r2, r3
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	785b      	ldrb	r3, [r3, #1]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	b25b      	sxtb	r3, r3
 8002302:	4313      	orrs	r3, r2
 8002304:	b25b      	sxtb	r3, r3
 8002306:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	461a      	mov	r2, r3
 800230c:	21f5      	movs	r1, #245	; 0xf5
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff ff6d 	bl	80021ee <write_register8>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <bmp280_init+0xe6>
		return false;
 800231a:	2300      	movs	r3, #0
 800231c:	e035      	b.n	800238a <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d102      	bne.n	800232c <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	78db      	ldrb	r3, [r3, #3]
 8002330:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8002332:	b25a      	sxtb	r2, r3
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	789b      	ldrb	r3, [r3, #2]
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	b25b      	sxtb	r3, r3
 800233c:	4313      	orrs	r3, r2
 800233e:	b25a      	sxtb	r2, r3
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	b25b      	sxtb	r3, r3
 8002346:	4313      	orrs	r3, r2
 8002348:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 800234a:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002352:	2b60      	cmp	r3, #96	; 0x60
 8002354:	d10d      	bne.n	8002372 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	791b      	ldrb	r3, [r3, #4]
 800235a:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 800235c:	7b7b      	ldrb	r3, [r7, #13]
 800235e:	461a      	mov	r2, r3
 8002360:	21f2      	movs	r1, #242	; 0xf2
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff ff43 	bl	80021ee <write_register8>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <bmp280_init+0x13a>
			return false;
 800236e:	2300      	movs	r3, #0
 8002370:	e00b      	b.n	800238a <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8002372:	7bbb      	ldrb	r3, [r7, #14]
 8002374:	461a      	mov	r2, r3
 8002376:	21f4      	movs	r1, #244	; 0xf4
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff ff38 	bl	80021ee <write_register8>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <bmp280_init+0x150>
		return false;
 8002384:	2300      	movs	r3, #0
 8002386:	e000      	b.n	800238a <bmp280_init+0x152>
	}

	return true;
 8002388:	2301      	movs	r3, #1
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8002392:	b480      	push	{r7}
 8002394:	b087      	sub	sp, #28
 8002396:	af00      	add	r7, sp, #0
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	10da      	asrs	r2, r3, #3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80023b0:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80023b4:	12db      	asrs	r3, r3, #11
 80023b6:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	111b      	asrs	r3, r3, #4
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	8812      	ldrh	r2, [r2, #0]
 80023c0:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	1112      	asrs	r2, r2, #4
 80023c6:	68f9      	ldr	r1, [r7, #12]
 80023c8:	8809      	ldrh	r1, [r1, #0]
 80023ca:	1a52      	subs	r2, r2, r1
 80023cc:	fb02 f303 	mul.w	r3, r2, r3
 80023d0:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80023d8:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80023dc:	139b      	asrs	r3, r3, #14
 80023de:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	441a      	add	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	3380      	adds	r3, #128	; 0x80
 80023f6:	121b      	asrs	r3, r3, #8
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	371c      	adds	r7, #28
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr

08002402 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8002402:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8002406:	b08a      	sub	sp, #40	; 0x28
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4619      	mov	r1, r3
 8002414:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002418:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 800241c:	f142 34ff 	adc.w	r4, r2, #4294967295
 8002420:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	6a3a      	ldr	r2, [r7, #32]
 8002428:	fb02 f203 	mul.w	r2, r2, r3
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	6a39      	ldr	r1, [r7, #32]
 8002430:	fb01 f303 	mul.w	r3, r1, r3
 8002434:	441a      	add	r2, r3
 8002436:	6a39      	ldr	r1, [r7, #32]
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	fba1 3403 	umull	r3, r4, r1, r3
 800243e:	4422      	add	r2, r4
 8002440:	4614      	mov	r4, r2
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8002448:	b211      	sxth	r1, r2
 800244a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800244e:	fb01 f504 	mul.w	r5, r1, r4
 8002452:	fb03 f002 	mul.w	r0, r3, r2
 8002456:	4428      	add	r0, r5
 8002458:	fba3 3401 	umull	r3, r4, r3, r1
 800245c:	1902      	adds	r2, r0, r4
 800245e:	4614      	mov	r4, r2
 8002460:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8002464:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800246e:	b21b      	sxth	r3, r3
 8002470:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002474:	6a3a      	ldr	r2, [r7, #32]
 8002476:	fb04 f102 	mul.w	r1, r4, r2
 800247a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800247c:	fb03 f202 	mul.w	r2, r3, r2
 8002480:	1888      	adds	r0, r1, r2
 8002482:	6a3a      	ldr	r2, [r7, #32]
 8002484:	fba2 1203 	umull	r1, r2, r2, r3
 8002488:	1883      	adds	r3, r0, r2
 800248a:	461a      	mov	r2, r3
 800248c:	f04f 0500 	mov.w	r5, #0
 8002490:	f04f 0600 	mov.w	r6, #0
 8002494:	0456      	lsls	r6, r2, #17
 8002496:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 800249a:	044d      	lsls	r5, r1, #17
 800249c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80024a0:	186b      	adds	r3, r5, r1
 80024a2:	eb46 0402 	adc.w	r4, r6, r2
 80024a6:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80024b0:	b219      	sxth	r1, r3
 80024b2:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80024b6:	f04f 0500 	mov.w	r5, #0
 80024ba:	f04f 0600 	mov.w	r6, #0
 80024be:	00ce      	lsls	r6, r1, #3
 80024c0:	2500      	movs	r5, #0
 80024c2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80024c6:	186b      	adds	r3, r5, r1
 80024c8:	eb46 0402 	adc.w	r4, r6, r2
 80024cc:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	6a3a      	ldr	r2, [r7, #32]
 80024d4:	fb02 f203 	mul.w	r2, r2, r3
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	6a39      	ldr	r1, [r7, #32]
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	441a      	add	r2, r3
 80024e2:	6a39      	ldr	r1, [r7, #32]
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	fba1 3403 	umull	r3, r4, r1, r3
 80024ea:	4422      	add	r2, r4
 80024ec:	4614      	mov	r4, r2
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80024f4:	b211      	sxth	r1, r2
 80024f6:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80024fa:	fb01 f504 	mul.w	r5, r1, r4
 80024fe:	fb03 f002 	mul.w	r0, r3, r2
 8002502:	4428      	add	r0, r5
 8002504:	fba3 3401 	umull	r3, r4, r3, r1
 8002508:	1902      	adds	r2, r0, r4
 800250a:	4614      	mov	r4, r2
 800250c:	f04f 0100 	mov.w	r1, #0
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	0a19      	lsrs	r1, r3, #8
 8002516:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 800251a:	1222      	asrs	r2, r4, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002522:	b21b      	sxth	r3, r3
 8002524:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002528:	6a38      	ldr	r0, [r7, #32]
 800252a:	fb04 f500 	mul.w	r5, r4, r0
 800252e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002530:	fb03 f000 	mul.w	r0, r3, r0
 8002534:	4428      	add	r0, r5
 8002536:	6a3d      	ldr	r5, [r7, #32]
 8002538:	fba5 5603 	umull	r5, r6, r5, r3
 800253c:	1983      	adds	r3, r0, r6
 800253e:	461e      	mov	r6, r3
 8002540:	f04f 0b00 	mov.w	fp, #0
 8002544:	f04f 0c00 	mov.w	ip, #0
 8002548:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 800254c:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8002550:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8002554:	eb1b 0301 	adds.w	r3, fp, r1
 8002558:	eb4c 0402 	adc.w	r4, ip, r2
 800255c:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8002560:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002564:	1c19      	adds	r1, r3, #0
 8002566:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	88db      	ldrh	r3, [r3, #6]
 800256e:	b29b      	uxth	r3, r3
 8002570:	f04f 0400 	mov.w	r4, #0
 8002574:	fb03 f502 	mul.w	r5, r3, r2
 8002578:	fb01 f004 	mul.w	r0, r1, r4
 800257c:	4428      	add	r0, r5
 800257e:	fba1 3403 	umull	r3, r4, r1, r3
 8002582:	1902      	adds	r2, r0, r4
 8002584:	4614      	mov	r4, r2
 8002586:	f04f 0100 	mov.w	r1, #0
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	1061      	asrs	r1, r4, #1
 8002590:	17e2      	asrs	r2, r4, #31
 8002592:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 8002596:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800259a:	4323      	orrs	r3, r4
 800259c:	d101      	bne.n	80025a2 <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 800259e:	2300      	movs	r3, #0
 80025a0:	e0d4      	b.n	800274c <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80025a8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80025ac:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	ea4f 0963 	mov.w	r9, r3, asr #1
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 80025bc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80025c0:	4645      	mov	r5, r8
 80025c2:	464e      	mov	r6, r9
 80025c4:	1aed      	subs	r5, r5, r3
 80025c6:	eb66 0604 	sbc.w	r6, r6, r4
 80025ca:	46a8      	mov	r8, r5
 80025cc:	46b1      	mov	r9, r6
 80025ce:	eb18 0308 	adds.w	r3, r8, r8
 80025d2:	eb49 0409 	adc.w	r4, r9, r9
 80025d6:	4698      	mov	r8, r3
 80025d8:	46a1      	mov	r9, r4
 80025da:	eb18 0805 	adds.w	r8, r8, r5
 80025de:	eb49 0906 	adc.w	r9, r9, r6
 80025e2:	f04f 0100 	mov.w	r1, #0
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	ea4f 1289 	mov.w	r2, r9, lsl #6
 80025ee:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 80025f2:	ea4f 1188 	mov.w	r1, r8, lsl #6
 80025f6:	eb18 0801 	adds.w	r8, r8, r1
 80025fa:	eb49 0902 	adc.w	r9, r9, r2
 80025fe:	f04f 0100 	mov.w	r1, #0
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	ea4f 0289 	mov.w	r2, r9, lsl #2
 800260a:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800260e:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8002612:	4688      	mov	r8, r1
 8002614:	4691      	mov	r9, r2
 8002616:	eb18 0805 	adds.w	r8, r8, r5
 800261a:	eb49 0906 	adc.w	r9, r9, r6
 800261e:	f04f 0100 	mov.w	r1, #0
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	ea4f 0289 	mov.w	r2, r9, lsl #2
 800262a:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800262e:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8002632:	4688      	mov	r8, r1
 8002634:	4691      	mov	r9, r2
 8002636:	eb18 0005 	adds.w	r0, r8, r5
 800263a:	eb49 0106 	adc.w	r1, r9, r6
 800263e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002642:	f7fe fc7f 	bl	8000f44 <__aeabi_ldivmod>
 8002646:	4603      	mov	r3, r0
 8002648:	460c      	mov	r4, r1
 800264a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002654:	b219      	sxth	r1, r3
 8002656:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800265a:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	f04f 0400 	mov.w	r4, #0
 8002666:	0b6b      	lsrs	r3, r5, #13
 8002668:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 800266c:	1374      	asrs	r4, r6, #13
 800266e:	fb03 f502 	mul.w	r5, r3, r2
 8002672:	fb01 f004 	mul.w	r0, r1, r4
 8002676:	4428      	add	r0, r5
 8002678:	fba1 1203 	umull	r1, r2, r1, r3
 800267c:	1883      	adds	r3, r0, r2
 800267e:	461a      	mov	r2, r3
 8002680:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8002684:	f04f 0300 	mov.w	r3, #0
 8002688:	f04f 0400 	mov.w	r4, #0
 800268c:	0b6b      	lsrs	r3, r5, #13
 800268e:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8002692:	1374      	asrs	r4, r6, #13
 8002694:	fb03 f502 	mul.w	r5, r3, r2
 8002698:	fb01 f004 	mul.w	r0, r1, r4
 800269c:	4428      	add	r0, r5
 800269e:	fba1 1203 	umull	r1, r2, r1, r3
 80026a2:	1883      	adds	r3, r0, r2
 80026a4:	461a      	mov	r2, r3
 80026a6:	f04f 0300 	mov.w	r3, #0
 80026aa:	f04f 0400 	mov.w	r4, #0
 80026ae:	0e4b      	lsrs	r3, r1, #25
 80026b0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80026b4:	1654      	asrs	r4, r2, #25
 80026b6:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80026c0:	b21b      	sxth	r3, r3
 80026c2:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	fb04 f102 	mul.w	r1, r4, r2
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	fb03 f202 	mul.w	r2, r3, r2
 80026d2:	1888      	adds	r0, r1, r2
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	fba2 1203 	umull	r1, r2, r2, r3
 80026da:	1883      	adds	r3, r0, r2
 80026dc:	461a      	mov	r2, r3
 80026de:	f04f 0300 	mov.w	r3, #0
 80026e2:	f04f 0400 	mov.w	r4, #0
 80026e6:	0ccb      	lsrs	r3, r1, #19
 80026e8:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80026ec:	14d4      	asrs	r4, r2, #19
 80026ee:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 80026f2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80026f6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80026fa:	eb11 0803 	adds.w	r8, r1, r3
 80026fe:	eb42 0904 	adc.w	r9, r2, r4
 8002702:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002706:	eb13 0508 	adds.w	r5, r3, r8
 800270a:	eb44 0609 	adc.w	r6, r4, r9
 800270e:	f04f 0100 	mov.w	r1, #0
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	0a29      	lsrs	r1, r5, #8
 8002718:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 800271c:	1232      	asrs	r2, r6, #8
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002724:	b21d      	sxth	r5, r3
 8002726:	ea4f 76e5 	mov.w	r6, r5, asr #31
 800272a:	f04f 0800 	mov.w	r8, #0
 800272e:	f04f 0900 	mov.w	r9, #0
 8002732:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8002736:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 800273a:	ea4f 1805 	mov.w	r8, r5, lsl #4
 800273e:	eb18 0301 	adds.w	r3, r8, r1
 8002742:	eb49 0402 	adc.w	r4, r9, r2
 8002746:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 800274a:	693b      	ldr	r3, [r7, #16]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3728      	adds	r7, #40	; 0x28
 8002750:	46bd      	mov	sp, r7
 8002752:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

08002756 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8002756:	b480      	push	{r7}
 8002758:	b087      	sub	sp, #28
 800275a:	af00      	add	r7, sp, #0
 800275c:	60f8      	str	r0, [r7, #12]
 800275e:	60b9      	str	r1, [r7, #8]
 8002760:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8002768:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	039a      	lsls	r2, r3, #14
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002774:	051b      	lsls	r3, r3, #20
 8002776:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800277e:	4619      	mov	r1, r3
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	fb03 f301 	mul.w	r3, r3, r1
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800278c:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8002794:	4611      	mov	r1, r2
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	fb02 f201 	mul.w	r2, r2, r1
 800279c:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 800279e:	68f9      	ldr	r1, [r7, #12]
 80027a0:	7f09      	ldrb	r1, [r1, #28]
 80027a2:	4608      	mov	r0, r1
 80027a4:	6979      	ldr	r1, [r7, #20]
 80027a6:	fb01 f100 	mul.w	r1, r1, r0
 80027aa:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80027ac:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80027b0:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80027b4:	1292      	asrs	r2, r2, #10
 80027b6:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 80027ba:	68f9      	ldr	r1, [r7, #12]
 80027bc:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 80027c0:	fb01 f202 	mul.w	r2, r1, r2
 80027c4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80027c8:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80027ca:	fb02 f303 	mul.w	r3, r2, r3
 80027ce:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	13db      	asrs	r3, r3, #15
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	13d2      	asrs	r2, r2, #15
 80027d8:	fb02 f303 	mul.w	r3, r2, r3
 80027dc:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	7e12      	ldrb	r2, [r2, #24]
 80027e2:	fb02 f303 	mul.w	r3, r2, r3
 80027e6:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80027f4:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80027fc:	bfa8      	it	ge
 80027fe:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8002802:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	131b      	asrs	r3, r3, #12
}
 8002808:	4618      	mov	r0, r3
 800280a:	371c      	adds	r7, #28
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr

08002812 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8002812:	b580      	push	{r7, lr}
 8002814:	b08c      	sub	sp, #48	; 0x30
 8002816:	af00      	add	r7, sp, #0
 8002818:	60f8      	str	r0, [r7, #12]
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
 800281e:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002826:	2b60      	cmp	r3, #96	; 0x60
 8002828:	d007      	beq.n	800283a <bmp280_read_fixed+0x28>
		if (humidity)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d002      	beq.n	8002836 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8002836:	2300      	movs	r3, #0
 8002838:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <bmp280_read_fixed+0x32>
 8002840:	2308      	movs	r3, #8
 8002842:	e000      	b.n	8002846 <bmp280_read_fixed+0x34>
 8002844:	2306      	movs	r3, #6
 8002846:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8002848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284a:	b2db      	uxtb	r3, r3
 800284c:	f107 0218 	add.w	r2, r7, #24
 8002850:	21f7      	movs	r1, #247	; 0xf7
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f7ff fbc0 	bl	8001fd8 <read_data>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <bmp280_read_fixed+0x50>
		return false;
 800285e:	2300      	movs	r3, #0
 8002860:	e038      	b.n	80028d4 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8002862:	7e3b      	ldrb	r3, [r7, #24]
 8002864:	031a      	lsls	r2, r3, #12
 8002866:	7e7b      	ldrb	r3, [r7, #25]
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	4313      	orrs	r3, r2
 800286c:	7eba      	ldrb	r2, [r7, #26]
 800286e:	0912      	lsrs	r2, r2, #4
 8002870:	b2d2      	uxtb	r2, r2
 8002872:	4313      	orrs	r3, r2
 8002874:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8002876:	7efb      	ldrb	r3, [r7, #27]
 8002878:	031a      	lsls	r2, r3, #12
 800287a:	7f3b      	ldrb	r3, [r7, #28]
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	4313      	orrs	r3, r2
 8002880:	7f7a      	ldrb	r2, [r7, #29]
 8002882:	0912      	lsrs	r2, r2, #4
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	4313      	orrs	r3, r2
 8002888:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 800288a:	f107 0314 	add.w	r3, r7, #20
 800288e:	461a      	mov	r2, r3
 8002890:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f7ff fd7d 	bl	8002392 <compensate_temperature>
 8002898:	4602      	mov	r2, r0
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	461a      	mov	r2, r3
 80028a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f7ff fdac 	bl	8002402 <compensate_pressure>
 80028aa:	4602      	mov	r2, r0
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	601a      	str	r2, [r3, #0]

	if (humidity) {
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00d      	beq.n	80028d2 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 80028b6:	7fbb      	ldrb	r3, [r7, #30]
 80028b8:	021b      	lsls	r3, r3, #8
 80028ba:	7ffa      	ldrb	r2, [r7, #31]
 80028bc:	4313      	orrs	r3, r2
 80028be:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	461a      	mov	r2, r3
 80028c4:	6a39      	ldr	r1, [r7, #32]
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f7ff ff45 	bl	8002756 <compensate_humidity>
 80028cc:	4602      	mov	r2, r0
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	601a      	str	r2, [r3, #0]
	}

	return true;
 80028d2:	2301      	movs	r3, #1
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3730      	adds	r7, #48	; 0x30
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <bmp280_read_float+0x1a>
 80028f0:	f107 0314 	add.w	r3, r7, #20
 80028f4:	e000      	b.n	80028f8 <bmp280_read_float+0x1c>
 80028f6:	2300      	movs	r3, #0
 80028f8:	f107 0218 	add.w	r2, r7, #24
 80028fc:	f107 011c 	add.w	r1, r7, #28
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f7ff ff86 	bl	8002812 <bmp280_read_fixed>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d02d      	beq.n	8002968 <bmp280_read_float+0x8c>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe f974 	bl	8000bfc <__aeabi_i2f>
 8002914:	4603      	mov	r3, r0
 8002916:	4917      	ldr	r1, [pc, #92]	; (8002974 <bmp280_read_float+0x98>)
 8002918:	4618      	mov	r0, r3
 800291a:	f7fe fa77 	bl	8000e0c <__aeabi_fdiv>
 800291e:	4603      	mov	r3, r0
 8002920:	461a      	mov	r2, r3
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	4618      	mov	r0, r3
 800292a:	f7fe f963 	bl	8000bf4 <__aeabi_ui2f>
 800292e:	4603      	mov	r3, r0
 8002930:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8002934:	4618      	mov	r0, r3
 8002936:	f7fe fa69 	bl	8000e0c <__aeabi_fdiv>
 800293a:	4603      	mov	r3, r0
 800293c:	461a      	mov	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	601a      	str	r2, [r3, #0]
		if (humidity)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00d      	beq.n	8002964 <bmp280_read_float+0x88>
			*humidity = (float) fixed_humidity / 1024;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	4618      	mov	r0, r3
 800294c:	f7fe f952 	bl	8000bf4 <__aeabi_ui2f>
 8002950:	4603      	mov	r3, r0
 8002952:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe fa58 	bl	8000e0c <__aeabi_fdiv>
 800295c:	4603      	mov	r3, r0
 800295e:	461a      	mov	r2, r3
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	601a      	str	r2, [r3, #0]
		return true;
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <bmp280_read_float+0x8e>
	}

	return false;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3720      	adds	r7, #32
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	42c80000 	.word	0x42c80000

08002978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002978:	b5b0      	push	{r4, r5, r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800297e:	f000 fc3f 	bl	8003200 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002982:	f000 f881 	bl	8002a88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002986:	f000 f991 	bl	8002cac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800298a:	f000 f965 	bl	8002c58 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800298e:	f000 f939 	bl	8002c04 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002992:	f000 f8bb 	bl	8002b0c <MX_I2C1_Init>
  MX_TIM4_Init();
 8002996:	f000 f8e7 	bl	8002b68 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 800299a:	482e      	ldr	r0, [pc, #184]	; (8002a54 <main+0xdc>)
 800299c:	f002 fc40 	bl	8005220 <HAL_TIM_Base_Start_IT>

  ESP_Init("HUAWEI-B315-4735","RE7EF6GRR7L");
 80029a0:	492d      	ldr	r1, [pc, #180]	; (8002a58 <main+0xe0>)
 80029a2:	482e      	ldr	r0, [pc, #184]	; (8002a5c <main+0xe4>)
 80029a4:	f7fe fc88 	bl	80012b8 <ESP_Init>

  bmp280_init_default_params(&bmp280.params);
 80029a8:	482d      	ldr	r0, [pc, #180]	; (8002a60 <main+0xe8>)
 80029aa:	f7ff facb 	bl	8001f44 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 80029ae:	4b2d      	ldr	r3, [pc, #180]	; (8002a64 <main+0xec>)
 80029b0:	2276      	movs	r2, #118	; 0x76
 80029b2:	849a      	strh	r2, [r3, #36]	; 0x24
  bmp280.i2c = &hi2c1;
 80029b4:	4b2b      	ldr	r3, [pc, #172]	; (8002a64 <main+0xec>)
 80029b6:	4a2c      	ldr	r2, [pc, #176]	; (8002a68 <main+0xf0>)
 80029b8:	629a      	str	r2, [r3, #40]	; 0x28

  while (!bmp280_init(&bmp280, &bmp280.params)) {
 80029ba:	e01e      	b.n	80029fa <main+0x82>
    		size = sprintf((char *)Data, "BMP280 initialization failed\n");
 80029bc:	4a2b      	ldr	r2, [pc, #172]	; (8002a6c <main+0xf4>)
 80029be:	4b2c      	ldr	r3, [pc, #176]	; (8002a70 <main+0xf8>)
 80029c0:	4615      	mov	r5, r2
 80029c2:	461c      	mov	r4, r3
 80029c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029c6:	6028      	str	r0, [r5, #0]
 80029c8:	6069      	str	r1, [r5, #4]
 80029ca:	60aa      	str	r2, [r5, #8]
 80029cc:	60eb      	str	r3, [r5, #12]
 80029ce:	cc07      	ldmia	r4!, {r0, r1, r2}
 80029d0:	6128      	str	r0, [r5, #16]
 80029d2:	6169      	str	r1, [r5, #20]
 80029d4:	61aa      	str	r2, [r5, #24]
 80029d6:	8823      	ldrh	r3, [r4, #0]
 80029d8:	83ab      	strh	r3, [r5, #28]
 80029da:	231d      	movs	r3, #29
 80029dc:	b29a      	uxth	r2, r3
 80029de:	4b25      	ldr	r3, [pc, #148]	; (8002a74 <main+0xfc>)
 80029e0:	801a      	strh	r2, [r3, #0]
    		HAL_UART_Transmit(&huart2, Data, size, 1000);
 80029e2:	4b24      	ldr	r3, [pc, #144]	; (8002a74 <main+0xfc>)
 80029e4:	881a      	ldrh	r2, [r3, #0]
 80029e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ea:	4920      	ldr	r1, [pc, #128]	; (8002a6c <main+0xf4>)
 80029ec:	4822      	ldr	r0, [pc, #136]	; (8002a78 <main+0x100>)
 80029ee:	f003 f802 	bl	80059f6 <HAL_UART_Transmit>
    		HAL_Delay(2000);
 80029f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80029f6:	f000 fc65 	bl	80032c4 <HAL_Delay>
  while (!bmp280_init(&bmp280, &bmp280.params)) {
 80029fa:	4919      	ldr	r1, [pc, #100]	; (8002a60 <main+0xe8>)
 80029fc:	4819      	ldr	r0, [pc, #100]	; (8002a64 <main+0xec>)
 80029fe:	f7ff fc1b 	bl	8002238 <bmp280_init>
 8002a02:	4603      	mov	r3, r0
 8002a04:	f083 0301 	eor.w	r3, r3, #1
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1d6      	bne.n	80029bc <main+0x44>
    }
    bool bme280p = bmp280.id == BME280_CHIP_ID;
 8002a0e:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <main+0xec>)
 8002a10:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002a14:	2b60      	cmp	r3, #96	; 0x60
 8002a16:	bf0c      	ite	eq
 8002a18:	2301      	moveq	r3, #1
 8002a1a:	2300      	movne	r3, #0
 8002a1c:	73fb      	strb	r3, [r7, #15]
    size = sprintf((char *)Data, "BMP280: found %s\n", bme280p ? "BME280" : "BMP280");
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <main+0xb0>
 8002a24:	4b15      	ldr	r3, [pc, #84]	; (8002a7c <main+0x104>)
 8002a26:	e000      	b.n	8002a2a <main+0xb2>
 8002a28:	4b15      	ldr	r3, [pc, #84]	; (8002a80 <main+0x108>)
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4915      	ldr	r1, [pc, #84]	; (8002a84 <main+0x10c>)
 8002a2e:	480f      	ldr	r0, [pc, #60]	; (8002a6c <main+0xf4>)
 8002a30:	f004 f836 	bl	8006aa0 <siprintf>
 8002a34:	4603      	mov	r3, r0
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <main+0xfc>)
 8002a3a:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, Data, size, 1000);
 8002a3c:	4b0d      	ldr	r3, [pc, #52]	; (8002a74 <main+0xfc>)
 8002a3e:	881a      	ldrh	r2, [r3, #0]
 8002a40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a44:	4909      	ldr	r1, [pc, #36]	; (8002a6c <main+0xf4>)
 8002a46:	480c      	ldr	r0, [pc, #48]	; (8002a78 <main+0x100>)
 8002a48:	f002 ffd5 	bl	80059f6 <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  bmp280_read_float(&bmp280, &temperature, &pressure, &humidity);
	  Server_Start();
 8002a4c:	f7fe fdf4 	bl	8001638 <Server_Start>
 8002a50:	e7fc      	b.n	8002a4c <main+0xd4>
 8002a52:	bf00      	nop
 8002a54:	20000a58 	.word	0x20000a58
 8002a58:	0800862c 	.word	0x0800862c
 8002a5c:	08008638 	.word	0x08008638
 8002a60:	20000c70 	.word	0x20000c70
 8002a64:	20000c44 	.word	0x20000c44
 8002a68:	20000aa0 	.word	0x20000aa0
 8002a6c:	20000b40 	.word	0x20000b40
 8002a70:	0800864c 	.word	0x0800864c
 8002a74:	20000c40 	.word	0x20000c40
 8002a78:	20000c78 	.word	0x20000c78
 8002a7c:	0800866c 	.word	0x0800866c
 8002a80:	08008674 	.word	0x08008674
 8002a84:	0800867c 	.word	0x0800867c

08002a88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b090      	sub	sp, #64	; 0x40
 8002a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a8e:	f107 0318 	add.w	r3, r7, #24
 8002a92:	2228      	movs	r2, #40	; 0x28
 8002a94:	2100      	movs	r1, #0
 8002a96:	4618      	mov	r0, r3
 8002a98:	f003 fb76 	bl	8006188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a9c:	1d3b      	adds	r3, r7, #4
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	605a      	str	r2, [r3, #4]
 8002aa4:	609a      	str	r2, [r3, #8]
 8002aa6:	60da      	str	r2, [r3, #12]
 8002aa8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002aaa:	2302      	movs	r3, #2
 8002aac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ab2:	2310      	movs	r3, #16
 8002ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002aba:	2300      	movs	r3, #0
 8002abc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002abe:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ac4:	f107 0318 	add.w	r3, r7, #24
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f001 ff3d 	bl	8004948 <HAL_RCC_OscConfig>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002ad4:	f000 f9a8 	bl	8002e28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ad8:	230f      	movs	r3, #15
 8002ada:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002adc:	2302      	movs	r3, #2
 8002ade:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ae8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002aee:	1d3b      	adds	r3, r7, #4
 8002af0:	2102      	movs	r1, #2
 8002af2:	4618      	mov	r0, r3
 8002af4:	f002 f9a8 	bl	8004e48 <HAL_RCC_ClockConfig>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002afe:	f000 f993 	bl	8002e28 <Error_Handler>
  }
}
 8002b02:	bf00      	nop
 8002b04:	3740      	adds	r7, #64	; 0x40
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b10:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <MX_I2C1_Init+0x50>)
 8002b12:	4a13      	ldr	r2, [pc, #76]	; (8002b60 <MX_I2C1_Init+0x54>)
 8002b14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002b16:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <MX_I2C1_Init+0x50>)
 8002b18:	4a12      	ldr	r2, [pc, #72]	; (8002b64 <MX_I2C1_Init+0x58>)
 8002b1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b1c:	4b0f      	ldr	r3, [pc, #60]	; (8002b5c <MX_I2C1_Init+0x50>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002b22:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <MX_I2C1_Init+0x50>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b28:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <MX_I2C1_Init+0x50>)
 8002b2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b30:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <MX_I2C1_Init+0x50>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002b36:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <MX_I2C1_Init+0x50>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b3c:	4b07      	ldr	r3, [pc, #28]	; (8002b5c <MX_I2C1_Init+0x50>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b42:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <MX_I2C1_Init+0x50>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b48:	4804      	ldr	r0, [pc, #16]	; (8002b5c <MX_I2C1_Init+0x50>)
 8002b4a:	f000 ff0f 	bl	800396c <HAL_I2C_Init>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002b54:	f000 f968 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b58:	bf00      	nop
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	20000aa0 	.word	0x20000aa0
 8002b60:	40005400 	.word	0x40005400
 8002b64:	000186a0 	.word	0x000186a0

08002b68 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b6e:	f107 0308 	add.w	r3, r7, #8
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	605a      	str	r2, [r3, #4]
 8002b78:	609a      	str	r2, [r3, #8]
 8002b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b7c:	463b      	mov	r3, r7
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b84:	4b1d      	ldr	r3, [pc, #116]	; (8002bfc <MX_TIM4_Init+0x94>)
 8002b86:	4a1e      	ldr	r2, [pc, #120]	; (8002c00 <MX_TIM4_Init+0x98>)
 8002b88:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6399 ;
 8002b8a:	4b1c      	ldr	r3, [pc, #112]	; (8002bfc <MX_TIM4_Init+0x94>)
 8002b8c:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8002b90:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b92:	4b1a      	ldr	r3, [pc, #104]	; (8002bfc <MX_TIM4_Init+0x94>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999 ;
 8002b98:	4b18      	ldr	r3, [pc, #96]	; (8002bfc <MX_TIM4_Init+0x94>)
 8002b9a:	f242 720f 	movw	r2, #9999	; 0x270f
 8002b9e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ba0:	4b16      	ldr	r3, [pc, #88]	; (8002bfc <MX_TIM4_Init+0x94>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ba6:	4b15      	ldr	r3, [pc, #84]	; (8002bfc <MX_TIM4_Init+0x94>)
 8002ba8:	2280      	movs	r2, #128	; 0x80
 8002baa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002bac:	4813      	ldr	r0, [pc, #76]	; (8002bfc <MX_TIM4_Init+0x94>)
 8002bae:	f002 fae7 	bl	8005180 <HAL_TIM_Base_Init>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002bb8:	f000 f936 	bl	8002e28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002bc2:	f107 0308 	add.w	r3, r7, #8
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	480c      	ldr	r0, [pc, #48]	; (8002bfc <MX_TIM4_Init+0x94>)
 8002bca:	f002 fc83 	bl	80054d4 <HAL_TIM_ConfigClockSource>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002bd4:	f000 f928 	bl	8002e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002be0:	463b      	mov	r3, r7
 8002be2:	4619      	mov	r1, r3
 8002be4:	4805      	ldr	r0, [pc, #20]	; (8002bfc <MX_TIM4_Init+0x94>)
 8002be6:	f002 fe49 	bl	800587c <HAL_TIMEx_MasterConfigSynchronization>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002bf0:	f000 f91a 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002bf4:	bf00      	nop
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20000a58 	.word	0x20000a58
 8002c00:	40000800 	.word	0x40000800

08002c04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c08:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <MX_USART1_UART_Init+0x4c>)
 8002c0a:	4a12      	ldr	r2, [pc, #72]	; (8002c54 <MX_USART1_UART_Init+0x50>)
 8002c0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c0e:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <MX_USART1_UART_Init+0x4c>)
 8002c10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c16:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <MX_USART1_UART_Init+0x4c>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <MX_USART1_UART_Init+0x4c>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c22:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <MX_USART1_UART_Init+0x4c>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c28:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <MX_USART1_UART_Init+0x4c>)
 8002c2a:	220c      	movs	r2, #12
 8002c2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c2e:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <MX_USART1_UART_Init+0x4c>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <MX_USART1_UART_Init+0x4c>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c3a:	4805      	ldr	r0, [pc, #20]	; (8002c50 <MX_USART1_UART_Init+0x4c>)
 8002c3c:	f002 fe8e 	bl	800595c <HAL_UART_Init>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002c46:	f000 f8ef 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20000b00 	.word	0x20000b00
 8002c54:	40013800 	.word	0x40013800

08002c58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c5c:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <MX_USART2_UART_Init+0x4c>)
 8002c5e:	4a12      	ldr	r2, [pc, #72]	; (8002ca8 <MX_USART2_UART_Init+0x50>)
 8002c60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c62:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <MX_USART2_UART_Init+0x4c>)
 8002c64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <MX_USART2_UART_Init+0x4c>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <MX_USART2_UART_Init+0x4c>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c76:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <MX_USART2_UART_Init+0x4c>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c7c:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <MX_USART2_UART_Init+0x4c>)
 8002c7e:	220c      	movs	r2, #12
 8002c80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c82:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <MX_USART2_UART_Init+0x4c>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <MX_USART2_UART_Init+0x4c>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c8e:	4805      	ldr	r0, [pc, #20]	; (8002ca4 <MX_USART2_UART_Init+0x4c>)
 8002c90:	f002 fe64 	bl	800595c <HAL_UART_Init>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c9a:	f000 f8c5 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20000c78 	.word	0x20000c78
 8002ca8:	40004400 	.word	0x40004400

08002cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb2:	f107 0310 	add.w	r3, r7, #16
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	605a      	str	r2, [r3, #4]
 8002cbc:	609a      	str	r2, [r3, #8]
 8002cbe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cc0:	4b2d      	ldr	r3, [pc, #180]	; (8002d78 <MX_GPIO_Init+0xcc>)
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	4a2c      	ldr	r2, [pc, #176]	; (8002d78 <MX_GPIO_Init+0xcc>)
 8002cc6:	f043 0310 	orr.w	r3, r3, #16
 8002cca:	6193      	str	r3, [r2, #24]
 8002ccc:	4b2a      	ldr	r3, [pc, #168]	; (8002d78 <MX_GPIO_Init+0xcc>)
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cd8:	4b27      	ldr	r3, [pc, #156]	; (8002d78 <MX_GPIO_Init+0xcc>)
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	4a26      	ldr	r2, [pc, #152]	; (8002d78 <MX_GPIO_Init+0xcc>)
 8002cde:	f043 0320 	orr.w	r3, r3, #32
 8002ce2:	6193      	str	r3, [r2, #24]
 8002ce4:	4b24      	ldr	r3, [pc, #144]	; (8002d78 <MX_GPIO_Init+0xcc>)
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	f003 0320 	and.w	r3, r3, #32
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf0:	4b21      	ldr	r3, [pc, #132]	; (8002d78 <MX_GPIO_Init+0xcc>)
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	4a20      	ldr	r2, [pc, #128]	; (8002d78 <MX_GPIO_Init+0xcc>)
 8002cf6:	f043 0304 	orr.w	r3, r3, #4
 8002cfa:	6193      	str	r3, [r2, #24]
 8002cfc:	4b1e      	ldr	r3, [pc, #120]	; (8002d78 <MX_GPIO_Init+0xcc>)
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	607b      	str	r3, [r7, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d08:	4b1b      	ldr	r3, [pc, #108]	; (8002d78 <MX_GPIO_Init+0xcc>)
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	4a1a      	ldr	r2, [pc, #104]	; (8002d78 <MX_GPIO_Init+0xcc>)
 8002d0e:	f043 0308 	orr.w	r3, r3, #8
 8002d12:	6193      	str	r3, [r2, #24]
 8002d14:	4b18      	ldr	r3, [pc, #96]	; (8002d78 <MX_GPIO_Init+0xcc>)
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	f003 0308 	and.w	r3, r3, #8
 8002d1c:	603b      	str	r3, [r7, #0]
 8002d1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002d20:	2200      	movs	r2, #0
 8002d22:	2120      	movs	r1, #32
 8002d24:	4815      	ldr	r0, [pc, #84]	; (8002d7c <MX_GPIO_Init+0xd0>)
 8002d26:	f000 fdcd 	bl	80038c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002d2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d30:	4b13      	ldr	r3, [pc, #76]	; (8002d80 <MX_GPIO_Init+0xd4>)
 8002d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d34:	2300      	movs	r3, #0
 8002d36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d38:	f107 0310 	add.w	r3, r7, #16
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4811      	ldr	r0, [pc, #68]	; (8002d84 <MX_GPIO_Init+0xd8>)
 8002d40:	f000 fc66 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002d44:	2320      	movs	r3, #32
 8002d46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d50:	2302      	movs	r3, #2
 8002d52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002d54:	f107 0310 	add.w	r3, r7, #16
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4808      	ldr	r0, [pc, #32]	; (8002d7c <MX_GPIO_Init+0xd0>)
 8002d5c:	f000 fc58 	bl	8003610 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002d60:	2200      	movs	r2, #0
 8002d62:	2100      	movs	r1, #0
 8002d64:	2028      	movs	r0, #40	; 0x28
 8002d66:	f000 fba6 	bl	80034b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d6a:	2028      	movs	r0, #40	; 0x28
 8002d6c:	f000 fbbf 	bl	80034ee <HAL_NVIC_EnableIRQ>

}
 8002d70:	bf00      	nop
 8002d72:	3720      	adds	r7, #32
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	40010800 	.word	0x40010800
 8002d80:	10110000 	.word	0x10110000
 8002d84:	40011000 	.word	0x40011000

08002d88 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002d88:	b590      	push	{r4, r7, lr}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4){
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a1a      	ldr	r2, [pc, #104]	; (8002e00 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d12d      	bne.n	8002df6 <HAL_TIM_PeriodElapsedCallback+0x6e>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002d9a:	2120      	movs	r1, #32
 8002d9c:	4819      	ldr	r0, [pc, #100]	; (8002e04 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002d9e:	f000 fda9 	bl	80038f4 <HAL_GPIO_TogglePin>
		bmp280_read_float(&bmp280, &temperature, &pressure, &humidity);
 8002da2:	4b19      	ldr	r3, [pc, #100]	; (8002e08 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002da4:	4a19      	ldr	r2, [pc, #100]	; (8002e0c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002da6:	491a      	ldr	r1, [pc, #104]	; (8002e10 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002da8:	481a      	ldr	r0, [pc, #104]	; (8002e14 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002daa:	f7ff fd97 	bl	80028dc <bmp280_read_float>
		size = sprintf((char *)Data,"Temperature: %.2f C\n",temperature);
 8002dae:	4b18      	ldr	r3, [pc, #96]	; (8002e10 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fd fb38 	bl	8000428 <__aeabi_f2d>
 8002db8:	4603      	mov	r3, r0
 8002dba:	460c      	mov	r4, r1
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4623      	mov	r3, r4
 8002dc0:	4915      	ldr	r1, [pc, #84]	; (8002e18 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002dc2:	4816      	ldr	r0, [pc, #88]	; (8002e1c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002dc4:	f003 fe6c 	bl	8006aa0 <siprintf>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	4b14      	ldr	r3, [pc, #80]	; (8002e20 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002dce:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, Data, size, 1000);
 8002dd0:	4b13      	ldr	r3, [pc, #76]	; (8002e20 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002dd2:	881a      	ldrh	r2, [r3, #0]
 8002dd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dd8:	4910      	ldr	r1, [pc, #64]	; (8002e1c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002dda:	4812      	ldr	r0, [pc, #72]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002ddc:	f002 fe0b 	bl	80059f6 <HAL_UART_Transmit>
		SetTemperature(temperature);
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7fd fb1f 	bl	8000428 <__aeabi_f2d>
 8002dea:	4603      	mov	r3, r0
 8002dec:	460c      	mov	r4, r1
 8002dee:	4618      	mov	r0, r3
 8002df0:	4621      	mov	r1, r4
 8002df2:	f7fe fc93 	bl	800171c <SetTemperature>
	}
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd90      	pop	{r4, r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40000800 	.word	0x40000800
 8002e04:	40010800 	.word	0x40010800
 8002e08:	20000afc 	.word	0x20000afc
 8002e0c:	20000af8 	.word	0x20000af8
 8002e10:	20000af4 	.word	0x20000af4
 8002e14:	20000c44 	.word	0x20000c44
 8002e18:	08008690 	.word	0x08008690
 8002e1c:	20000b40 	.word	0x20000b40
 8002e20:	20000c40 	.word	0x20000c40
 8002e24:	20000c78 	.word	0x20000c78

08002e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002e2c:	bf00      	nop
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e3a:	4b15      	ldr	r3, [pc, #84]	; (8002e90 <HAL_MspInit+0x5c>)
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	4a14      	ldr	r2, [pc, #80]	; (8002e90 <HAL_MspInit+0x5c>)
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	6193      	str	r3, [r2, #24]
 8002e46:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <HAL_MspInit+0x5c>)
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e52:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <HAL_MspInit+0x5c>)
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	4a0e      	ldr	r2, [pc, #56]	; (8002e90 <HAL_MspInit+0x5c>)
 8002e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e5c:	61d3      	str	r3, [r2, #28]
 8002e5e:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <HAL_MspInit+0x5c>)
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e66:	607b      	str	r3, [r7, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e6a:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <HAL_MspInit+0x60>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	4a04      	ldr	r2, [pc, #16]	; (8002e94 <HAL_MspInit+0x60>)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e86:	bf00      	nop
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40010000 	.word	0x40010000

08002e98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08a      	sub	sp, #40	; 0x28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea0:	f107 0314 	add.w	r3, r7, #20
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	609a      	str	r2, [r3, #8]
 8002eac:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a1d      	ldr	r2, [pc, #116]	; (8002f28 <HAL_I2C_MspInit+0x90>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d132      	bne.n	8002f1e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eb8:	4b1c      	ldr	r3, [pc, #112]	; (8002f2c <HAL_I2C_MspInit+0x94>)
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	4a1b      	ldr	r2, [pc, #108]	; (8002f2c <HAL_I2C_MspInit+0x94>)
 8002ebe:	f043 0308 	orr.w	r3, r3, #8
 8002ec2:	6193      	str	r3, [r2, #24]
 8002ec4:	4b19      	ldr	r3, [pc, #100]	; (8002f2c <HAL_I2C_MspInit+0x94>)
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	613b      	str	r3, [r7, #16]
 8002ece:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ed0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ed6:	2312      	movs	r3, #18
 8002ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002eda:	2303      	movs	r3, #3
 8002edc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ede:	f107 0314 	add.w	r3, r7, #20
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4812      	ldr	r0, [pc, #72]	; (8002f30 <HAL_I2C_MspInit+0x98>)
 8002ee6:	f000 fb93 	bl	8003610 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002eea:	4b12      	ldr	r3, [pc, #72]	; (8002f34 <HAL_I2C_MspInit+0x9c>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	f043 0302 	orr.w	r3, r3, #2
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
 8002f00:	4a0c      	ldr	r2, [pc, #48]	; (8002f34 <HAL_I2C_MspInit+0x9c>)
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f06:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <HAL_I2C_MspInit+0x94>)
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	4a08      	ldr	r2, [pc, #32]	; (8002f2c <HAL_I2C_MspInit+0x94>)
 8002f0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f10:	61d3      	str	r3, [r2, #28]
 8002f12:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <HAL_I2C_MspInit+0x94>)
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f1e:	bf00      	nop
 8002f20:	3728      	adds	r7, #40	; 0x28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40005400 	.word	0x40005400
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40010c00 	.word	0x40010c00
 8002f34:	40010000 	.word	0x40010000

08002f38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a0d      	ldr	r2, [pc, #52]	; (8002f7c <HAL_TIM_Base_MspInit+0x44>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d113      	bne.n	8002f72 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f4a:	4b0d      	ldr	r3, [pc, #52]	; (8002f80 <HAL_TIM_Base_MspInit+0x48>)
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	4a0c      	ldr	r2, [pc, #48]	; (8002f80 <HAL_TIM_Base_MspInit+0x48>)
 8002f50:	f043 0304 	orr.w	r3, r3, #4
 8002f54:	61d3      	str	r3, [r2, #28]
 8002f56:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <HAL_TIM_Base_MspInit+0x48>)
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002f62:	2200      	movs	r2, #0
 8002f64:	2100      	movs	r1, #0
 8002f66:	201e      	movs	r0, #30
 8002f68:	f000 faa5 	bl	80034b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002f6c:	201e      	movs	r0, #30
 8002f6e:	f000 fabe 	bl	80034ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002f72:	bf00      	nop
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40000800 	.word	0x40000800
 8002f80:	40021000 	.word	0x40021000

08002f84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08a      	sub	sp, #40	; 0x28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f8c:	f107 0318 	add.w	r3, r7, #24
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a39      	ldr	r2, [pc, #228]	; (8003084 <HAL_UART_MspInit+0x100>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d13a      	bne.n	800301a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fa4:	4b38      	ldr	r3, [pc, #224]	; (8003088 <HAL_UART_MspInit+0x104>)
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	4a37      	ldr	r2, [pc, #220]	; (8003088 <HAL_UART_MspInit+0x104>)
 8002faa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fae:	6193      	str	r3, [r2, #24]
 8002fb0:	4b35      	ldr	r3, [pc, #212]	; (8003088 <HAL_UART_MspInit+0x104>)
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fb8:	617b      	str	r3, [r7, #20]
 8002fba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fbc:	4b32      	ldr	r3, [pc, #200]	; (8003088 <HAL_UART_MspInit+0x104>)
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	4a31      	ldr	r2, [pc, #196]	; (8003088 <HAL_UART_MspInit+0x104>)
 8002fc2:	f043 0304 	orr.w	r3, r3, #4
 8002fc6:	6193      	str	r3, [r2, #24]
 8002fc8:	4b2f      	ldr	r3, [pc, #188]	; (8003088 <HAL_UART_MspInit+0x104>)
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002fd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe2:	f107 0318 	add.w	r3, r7, #24
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4828      	ldr	r0, [pc, #160]	; (800308c <HAL_UART_MspInit+0x108>)
 8002fea:	f000 fb11 	bl	8003610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002fee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ff2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffc:	f107 0318 	add.w	r3, r7, #24
 8003000:	4619      	mov	r1, r3
 8003002:	4822      	ldr	r0, [pc, #136]	; (800308c <HAL_UART_MspInit+0x108>)
 8003004:	f000 fb04 	bl	8003610 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003008:	2200      	movs	r2, #0
 800300a:	2100      	movs	r1, #0
 800300c:	2025      	movs	r0, #37	; 0x25
 800300e:	f000 fa52 	bl	80034b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003012:	2025      	movs	r0, #37	; 0x25
 8003014:	f000 fa6b 	bl	80034ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003018:	e030      	b.n	800307c <HAL_UART_MspInit+0xf8>
  else if(huart->Instance==USART2)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a1c      	ldr	r2, [pc, #112]	; (8003090 <HAL_UART_MspInit+0x10c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d12b      	bne.n	800307c <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003024:	4b18      	ldr	r3, [pc, #96]	; (8003088 <HAL_UART_MspInit+0x104>)
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	4a17      	ldr	r2, [pc, #92]	; (8003088 <HAL_UART_MspInit+0x104>)
 800302a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800302e:	61d3      	str	r3, [r2, #28]
 8003030:	4b15      	ldr	r3, [pc, #84]	; (8003088 <HAL_UART_MspInit+0x104>)
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800303c:	4b12      	ldr	r3, [pc, #72]	; (8003088 <HAL_UART_MspInit+0x104>)
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	4a11      	ldr	r2, [pc, #68]	; (8003088 <HAL_UART_MspInit+0x104>)
 8003042:	f043 0304 	orr.w	r3, r3, #4
 8003046:	6193      	str	r3, [r2, #24]
 8003048:	4b0f      	ldr	r3, [pc, #60]	; (8003088 <HAL_UART_MspInit+0x104>)
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003054:	230c      	movs	r3, #12
 8003056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003058:	2302      	movs	r3, #2
 800305a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305c:	2302      	movs	r3, #2
 800305e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003060:	f107 0318 	add.w	r3, r7, #24
 8003064:	4619      	mov	r1, r3
 8003066:	4809      	ldr	r0, [pc, #36]	; (800308c <HAL_UART_MspInit+0x108>)
 8003068:	f000 fad2 	bl	8003610 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800306c:	2200      	movs	r2, #0
 800306e:	2100      	movs	r1, #0
 8003070:	2026      	movs	r0, #38	; 0x26
 8003072:	f000 fa20 	bl	80034b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003076:	2026      	movs	r0, #38	; 0x26
 8003078:	f000 fa39 	bl	80034ee <HAL_NVIC_EnableIRQ>
}
 800307c:	bf00      	nop
 800307e:	3728      	adds	r7, #40	; 0x28
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40013800 	.word	0x40013800
 8003088:	40021000 	.word	0x40021000
 800308c:	40010800 	.word	0x40010800
 8003090:	40004400 	.word	0x40004400

08003094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003098:	bf00      	nop
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr

080030a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030a4:	e7fe      	b.n	80030a4 <HardFault_Handler+0x4>

080030a6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030a6:	b480      	push	{r7}
 80030a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030aa:	e7fe      	b.n	80030aa <MemManage_Handler+0x4>

080030ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030b0:	e7fe      	b.n	80030b0 <BusFault_Handler+0x4>

080030b2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030b2:	b480      	push	{r7}
 80030b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030b6:	e7fe      	b.n	80030b6 <UsageFault_Handler+0x4>

080030b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030bc:	bf00      	nop
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr

080030c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030c8:	bf00      	nop
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr

080030d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030d4:	bf00      	nop
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr

080030dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030e0:	f000 f8d4 	bl	800328c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030e4:	bf00      	nop
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80030ec:	4802      	ldr	r0, [pc, #8]	; (80030f8 <TIM4_IRQHandler+0x10>)
 80030ee:	f002 f8e9 	bl	80052c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80030f2:	bf00      	nop
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	20000a58 	.word	0x20000a58

080030fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8003100:	4803      	ldr	r0, [pc, #12]	; (8003110 <USART1_IRQHandler+0x14>)
 8003102:	f7fe fe75 	bl	8001df0 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003106:	4802      	ldr	r0, [pc, #8]	; (8003110 <USART1_IRQHandler+0x14>)
 8003108:	f002 fd08 	bl	8005b1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800310c:	bf00      	nop
 800310e:	bd80      	pop	{r7, pc}
 8003110:	20000b00 	.word	0x20000b00

08003114 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 8003118:	4803      	ldr	r0, [pc, #12]	; (8003128 <USART2_IRQHandler+0x14>)
 800311a:	f7fe fe69 	bl	8001df0 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800311e:	4802      	ldr	r0, [pc, #8]	; (8003128 <USART2_IRQHandler+0x14>)
 8003120:	f002 fcfc 	bl	8005b1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003124:	bf00      	nop
 8003126:	bd80      	pop	{r7, pc}
 8003128:	20000c78 	.word	0x20000c78

0800312c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003130:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003134:	f000 fbf8 	bl	8003928 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003138:	bf00      	nop
 800313a:	bd80      	pop	{r7, pc}

0800313c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003144:	4a14      	ldr	r2, [pc, #80]	; (8003198 <_sbrk+0x5c>)
 8003146:	4b15      	ldr	r3, [pc, #84]	; (800319c <_sbrk+0x60>)
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003150:	4b13      	ldr	r3, [pc, #76]	; (80031a0 <_sbrk+0x64>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d102      	bne.n	800315e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003158:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <_sbrk+0x64>)
 800315a:	4a12      	ldr	r2, [pc, #72]	; (80031a4 <_sbrk+0x68>)
 800315c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800315e:	4b10      	ldr	r3, [pc, #64]	; (80031a0 <_sbrk+0x64>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4413      	add	r3, r2
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	429a      	cmp	r2, r3
 800316a:	d207      	bcs.n	800317c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800316c:	f002 ffe2 	bl	8006134 <__errno>
 8003170:	4602      	mov	r2, r0
 8003172:	230c      	movs	r3, #12
 8003174:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003176:	f04f 33ff 	mov.w	r3, #4294967295
 800317a:	e009      	b.n	8003190 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800317c:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <_sbrk+0x64>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003182:	4b07      	ldr	r3, [pc, #28]	; (80031a0 <_sbrk+0x64>)
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4413      	add	r3, r2
 800318a:	4a05      	ldr	r2, [pc, #20]	; (80031a0 <_sbrk+0x64>)
 800318c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800318e:	68fb      	ldr	r3, [r7, #12]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	20005000 	.word	0x20005000
 800319c:	00000400 	.word	0x00000400
 80031a0:	20000a20 	.word	0x20000a20
 80031a4:	20000cc0 	.word	0x20000cc0

080031a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031ac:	bf00      	nop
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr

080031b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80031b4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80031b6:	e003      	b.n	80031c0 <LoopCopyDataInit>

080031b8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80031b8:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80031ba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80031bc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80031be:	3104      	adds	r1, #4

080031c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80031c0:	480a      	ldr	r0, [pc, #40]	; (80031ec <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80031c2:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80031c4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80031c6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80031c8:	d3f6      	bcc.n	80031b8 <CopyDataInit>
  ldr r2, =_sbss
 80031ca:	4a0a      	ldr	r2, [pc, #40]	; (80031f4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80031cc:	e002      	b.n	80031d4 <LoopFillZerobss>

080031ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80031ce:	2300      	movs	r3, #0
  str r3, [r2], #4
 80031d0:	f842 3b04 	str.w	r3, [r2], #4

080031d4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80031d4:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80031d6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80031d8:	d3f9      	bcc.n	80031ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80031da:	f7ff ffe5 	bl	80031a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031de:	f002 ffaf 	bl	8006140 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031e2:	f7ff fbc9 	bl	8002978 <main>
  bx lr
 80031e6:	4770      	bx	lr
  ldr r3, =_sidata
 80031e8:	08008940 	.word	0x08008940
  ldr r0, =_sdata
 80031ec:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80031f0:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 80031f4:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 80031f8:	20000cc0 	.word	0x20000cc0

080031fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031fc:	e7fe      	b.n	80031fc <ADC1_2_IRQHandler>
	...

08003200 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003204:	4b08      	ldr	r3, [pc, #32]	; (8003228 <HAL_Init+0x28>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a07      	ldr	r2, [pc, #28]	; (8003228 <HAL_Init+0x28>)
 800320a:	f043 0310 	orr.w	r3, r3, #16
 800320e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003210:	2003      	movs	r0, #3
 8003212:	f000 f945 	bl	80034a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003216:	2000      	movs	r0, #0
 8003218:	f000 f808 	bl	800322c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800321c:	f7ff fe0a 	bl	8002e34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40022000 	.word	0x40022000

0800322c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003234:	4b12      	ldr	r3, [pc, #72]	; (8003280 <HAL_InitTick+0x54>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	4b12      	ldr	r3, [pc, #72]	; (8003284 <HAL_InitTick+0x58>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	4619      	mov	r1, r3
 800323e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003242:	fbb3 f3f1 	udiv	r3, r3, r1
 8003246:	fbb2 f3f3 	udiv	r3, r2, r3
 800324a:	4618      	mov	r0, r3
 800324c:	f000 f95d 	bl	800350a <HAL_SYSTICK_Config>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e00e      	b.n	8003278 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b0f      	cmp	r3, #15
 800325e:	d80a      	bhi.n	8003276 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003260:	2200      	movs	r2, #0
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	f04f 30ff 	mov.w	r0, #4294967295
 8003268:	f000 f925 	bl	80034b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800326c:	4a06      	ldr	r2, [pc, #24]	; (8003288 <HAL_InitTick+0x5c>)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	e000      	b.n	8003278 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
}
 8003278:	4618      	mov	r0, r3
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20000008 	.word	0x20000008
 8003284:	20000010 	.word	0x20000010
 8003288:	2000000c 	.word	0x2000000c

0800328c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <HAL_IncTick+0x1c>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	461a      	mov	r2, r3
 8003296:	4b05      	ldr	r3, [pc, #20]	; (80032ac <HAL_IncTick+0x20>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4413      	add	r3, r2
 800329c:	4a03      	ldr	r2, [pc, #12]	; (80032ac <HAL_IncTick+0x20>)
 800329e:	6013      	str	r3, [r2, #0]
}
 80032a0:	bf00      	nop
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr
 80032a8:	20000010 	.word	0x20000010
 80032ac:	20000cb8 	.word	0x20000cb8

080032b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  return uwTick;
 80032b4:	4b02      	ldr	r3, [pc, #8]	; (80032c0 <HAL_GetTick+0x10>)
 80032b6:	681b      	ldr	r3, [r3, #0]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr
 80032c0:	20000cb8 	.word	0x20000cb8

080032c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032cc:	f7ff fff0 	bl	80032b0 <HAL_GetTick>
 80032d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032dc:	d005      	beq.n	80032ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032de:	4b09      	ldr	r3, [pc, #36]	; (8003304 <HAL_Delay+0x40>)
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	461a      	mov	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4413      	add	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032ea:	bf00      	nop
 80032ec:	f7ff ffe0 	bl	80032b0 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d8f7      	bhi.n	80032ec <HAL_Delay+0x28>
  {
  }
}
 80032fc:	bf00      	nop
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	20000010 	.word	0x20000010

08003308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003318:	4b0c      	ldr	r3, [pc, #48]	; (800334c <__NVIC_SetPriorityGrouping+0x44>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003324:	4013      	ands	r3, r2
 8003326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003330:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800333a:	4a04      	ldr	r2, [pc, #16]	; (800334c <__NVIC_SetPriorityGrouping+0x44>)
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	60d3      	str	r3, [r2, #12]
}
 8003340:	bf00      	nop
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	bc80      	pop	{r7}
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	e000ed00 	.word	0xe000ed00

08003350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003354:	4b04      	ldr	r3, [pc, #16]	; (8003368 <__NVIC_GetPriorityGrouping+0x18>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	0a1b      	lsrs	r3, r3, #8
 800335a:	f003 0307 	and.w	r3, r3, #7
}
 800335e:	4618      	mov	r0, r3
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	e000ed00 	.word	0xe000ed00

0800336c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337a:	2b00      	cmp	r3, #0
 800337c:	db0b      	blt.n	8003396 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800337e:	79fb      	ldrb	r3, [r7, #7]
 8003380:	f003 021f 	and.w	r2, r3, #31
 8003384:	4906      	ldr	r1, [pc, #24]	; (80033a0 <__NVIC_EnableIRQ+0x34>)
 8003386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338a:	095b      	lsrs	r3, r3, #5
 800338c:	2001      	movs	r0, #1
 800338e:	fa00 f202 	lsl.w	r2, r0, r2
 8003392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr
 80033a0:	e000e100 	.word	0xe000e100

080033a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	6039      	str	r1, [r7, #0]
 80033ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	db0a      	blt.n	80033ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	490c      	ldr	r1, [pc, #48]	; (80033f0 <__NVIC_SetPriority+0x4c>)
 80033be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c2:	0112      	lsls	r2, r2, #4
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	440b      	add	r3, r1
 80033c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033cc:	e00a      	b.n	80033e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	4908      	ldr	r1, [pc, #32]	; (80033f4 <__NVIC_SetPriority+0x50>)
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	3b04      	subs	r3, #4
 80033dc:	0112      	lsls	r2, r2, #4
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	440b      	add	r3, r1
 80033e2:	761a      	strb	r2, [r3, #24]
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc80      	pop	{r7}
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	e000e100 	.word	0xe000e100
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b089      	sub	sp, #36	; 0x24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f1c3 0307 	rsb	r3, r3, #7
 8003412:	2b04      	cmp	r3, #4
 8003414:	bf28      	it	cs
 8003416:	2304      	movcs	r3, #4
 8003418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	3304      	adds	r3, #4
 800341e:	2b06      	cmp	r3, #6
 8003420:	d902      	bls.n	8003428 <NVIC_EncodePriority+0x30>
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	3b03      	subs	r3, #3
 8003426:	e000      	b.n	800342a <NVIC_EncodePriority+0x32>
 8003428:	2300      	movs	r3, #0
 800342a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800342c:	f04f 32ff 	mov.w	r2, #4294967295
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	43da      	mvns	r2, r3
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	401a      	ands	r2, r3
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003440:	f04f 31ff 	mov.w	r1, #4294967295
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	fa01 f303 	lsl.w	r3, r1, r3
 800344a:	43d9      	mvns	r1, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003450:	4313      	orrs	r3, r2
         );
}
 8003452:	4618      	mov	r0, r3
 8003454:	3724      	adds	r7, #36	; 0x24
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr

0800345c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3b01      	subs	r3, #1
 8003468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800346c:	d301      	bcc.n	8003472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800346e:	2301      	movs	r3, #1
 8003470:	e00f      	b.n	8003492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003472:	4a0a      	ldr	r2, [pc, #40]	; (800349c <SysTick_Config+0x40>)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3b01      	subs	r3, #1
 8003478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800347a:	210f      	movs	r1, #15
 800347c:	f04f 30ff 	mov.w	r0, #4294967295
 8003480:	f7ff ff90 	bl	80033a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003484:	4b05      	ldr	r3, [pc, #20]	; (800349c <SysTick_Config+0x40>)
 8003486:	2200      	movs	r2, #0
 8003488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800348a:	4b04      	ldr	r3, [pc, #16]	; (800349c <SysTick_Config+0x40>)
 800348c:	2207      	movs	r2, #7
 800348e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	e000e010 	.word	0xe000e010

080034a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff ff2d 	bl	8003308 <__NVIC_SetPriorityGrouping>
}
 80034ae:	bf00      	nop
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b086      	sub	sp, #24
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	4603      	mov	r3, r0
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	607a      	str	r2, [r7, #4]
 80034c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034c8:	f7ff ff42 	bl	8003350 <__NVIC_GetPriorityGrouping>
 80034cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	68b9      	ldr	r1, [r7, #8]
 80034d2:	6978      	ldr	r0, [r7, #20]
 80034d4:	f7ff ff90 	bl	80033f8 <NVIC_EncodePriority>
 80034d8:	4602      	mov	r2, r0
 80034da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034de:	4611      	mov	r1, r2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff ff5f 	bl	80033a4 <__NVIC_SetPriority>
}
 80034e6:	bf00      	nop
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	4603      	mov	r3, r0
 80034f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff ff35 	bl	800336c <__NVIC_EnableIRQ>
}
 8003502:	bf00      	nop
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b082      	sub	sp, #8
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7ff ffa2 	bl	800345c <SysTick_Config>
 8003518:	4603      	mov	r3, r0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
	...

08003524 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800352c:	2300      	movs	r3, #0
 800352e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003536:	2b02      	cmp	r3, #2
 8003538:	d005      	beq.n	8003546 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2204      	movs	r2, #4
 800353e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	73fb      	strb	r3, [r7, #15]
 8003544:	e051      	b.n	80035ea <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 020e 	bic.w	r2, r2, #14
 8003554:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0201 	bic.w	r2, r2, #1
 8003564:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a22      	ldr	r2, [pc, #136]	; (80035f4 <HAL_DMA_Abort_IT+0xd0>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d029      	beq.n	80035c4 <HAL_DMA_Abort_IT+0xa0>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a20      	ldr	r2, [pc, #128]	; (80035f8 <HAL_DMA_Abort_IT+0xd4>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d022      	beq.n	80035c0 <HAL_DMA_Abort_IT+0x9c>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a1f      	ldr	r2, [pc, #124]	; (80035fc <HAL_DMA_Abort_IT+0xd8>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d01a      	beq.n	80035ba <HAL_DMA_Abort_IT+0x96>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a1d      	ldr	r2, [pc, #116]	; (8003600 <HAL_DMA_Abort_IT+0xdc>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d012      	beq.n	80035b4 <HAL_DMA_Abort_IT+0x90>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a1c      	ldr	r2, [pc, #112]	; (8003604 <HAL_DMA_Abort_IT+0xe0>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d00a      	beq.n	80035ae <HAL_DMA_Abort_IT+0x8a>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a1a      	ldr	r2, [pc, #104]	; (8003608 <HAL_DMA_Abort_IT+0xe4>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d102      	bne.n	80035a8 <HAL_DMA_Abort_IT+0x84>
 80035a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80035a6:	e00e      	b.n	80035c6 <HAL_DMA_Abort_IT+0xa2>
 80035a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035ac:	e00b      	b.n	80035c6 <HAL_DMA_Abort_IT+0xa2>
 80035ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035b2:	e008      	b.n	80035c6 <HAL_DMA_Abort_IT+0xa2>
 80035b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035b8:	e005      	b.n	80035c6 <HAL_DMA_Abort_IT+0xa2>
 80035ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035be:	e002      	b.n	80035c6 <HAL_DMA_Abort_IT+0xa2>
 80035c0:	2310      	movs	r3, #16
 80035c2:	e000      	b.n	80035c6 <HAL_DMA_Abort_IT+0xa2>
 80035c4:	2301      	movs	r3, #1
 80035c6:	4a11      	ldr	r2, [pc, #68]	; (800360c <HAL_DMA_Abort_IT+0xe8>)
 80035c8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	4798      	blx	r3
    } 
  }
  return status;
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40020008 	.word	0x40020008
 80035f8:	4002001c 	.word	0x4002001c
 80035fc:	40020030 	.word	0x40020030
 8003600:	40020044 	.word	0x40020044
 8003604:	40020058 	.word	0x40020058
 8003608:	4002006c 	.word	0x4002006c
 800360c:	40020000 	.word	0x40020000

08003610 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003610:	b480      	push	{r7}
 8003612:	b08b      	sub	sp, #44	; 0x2c
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800361a:	2300      	movs	r3, #0
 800361c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800361e:	2300      	movs	r3, #0
 8003620:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003622:	e127      	b.n	8003874 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003624:	2201      	movs	r2, #1
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	69fa      	ldr	r2, [r7, #28]
 8003634:	4013      	ands	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	429a      	cmp	r2, r3
 800363e:	f040 8116 	bne.w	800386e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2b12      	cmp	r3, #18
 8003648:	d034      	beq.n	80036b4 <HAL_GPIO_Init+0xa4>
 800364a:	2b12      	cmp	r3, #18
 800364c:	d80d      	bhi.n	800366a <HAL_GPIO_Init+0x5a>
 800364e:	2b02      	cmp	r3, #2
 8003650:	d02b      	beq.n	80036aa <HAL_GPIO_Init+0x9a>
 8003652:	2b02      	cmp	r3, #2
 8003654:	d804      	bhi.n	8003660 <HAL_GPIO_Init+0x50>
 8003656:	2b00      	cmp	r3, #0
 8003658:	d031      	beq.n	80036be <HAL_GPIO_Init+0xae>
 800365a:	2b01      	cmp	r3, #1
 800365c:	d01c      	beq.n	8003698 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800365e:	e048      	b.n	80036f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003660:	2b03      	cmp	r3, #3
 8003662:	d043      	beq.n	80036ec <HAL_GPIO_Init+0xdc>
 8003664:	2b11      	cmp	r3, #17
 8003666:	d01b      	beq.n	80036a0 <HAL_GPIO_Init+0x90>
          break;
 8003668:	e043      	b.n	80036f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800366a:	4a89      	ldr	r2, [pc, #548]	; (8003890 <HAL_GPIO_Init+0x280>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d026      	beq.n	80036be <HAL_GPIO_Init+0xae>
 8003670:	4a87      	ldr	r2, [pc, #540]	; (8003890 <HAL_GPIO_Init+0x280>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d806      	bhi.n	8003684 <HAL_GPIO_Init+0x74>
 8003676:	4a87      	ldr	r2, [pc, #540]	; (8003894 <HAL_GPIO_Init+0x284>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d020      	beq.n	80036be <HAL_GPIO_Init+0xae>
 800367c:	4a86      	ldr	r2, [pc, #536]	; (8003898 <HAL_GPIO_Init+0x288>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d01d      	beq.n	80036be <HAL_GPIO_Init+0xae>
          break;
 8003682:	e036      	b.n	80036f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003684:	4a85      	ldr	r2, [pc, #532]	; (800389c <HAL_GPIO_Init+0x28c>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d019      	beq.n	80036be <HAL_GPIO_Init+0xae>
 800368a:	4a85      	ldr	r2, [pc, #532]	; (80038a0 <HAL_GPIO_Init+0x290>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d016      	beq.n	80036be <HAL_GPIO_Init+0xae>
 8003690:	4a84      	ldr	r2, [pc, #528]	; (80038a4 <HAL_GPIO_Init+0x294>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d013      	beq.n	80036be <HAL_GPIO_Init+0xae>
          break;
 8003696:	e02c      	b.n	80036f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	623b      	str	r3, [r7, #32]
          break;
 800369e:	e028      	b.n	80036f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	3304      	adds	r3, #4
 80036a6:	623b      	str	r3, [r7, #32]
          break;
 80036a8:	e023      	b.n	80036f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	3308      	adds	r3, #8
 80036b0:	623b      	str	r3, [r7, #32]
          break;
 80036b2:	e01e      	b.n	80036f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	330c      	adds	r3, #12
 80036ba:	623b      	str	r3, [r7, #32]
          break;
 80036bc:	e019      	b.n	80036f2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d102      	bne.n	80036cc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80036c6:	2304      	movs	r3, #4
 80036c8:	623b      	str	r3, [r7, #32]
          break;
 80036ca:	e012      	b.n	80036f2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d105      	bne.n	80036e0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036d4:	2308      	movs	r3, #8
 80036d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69fa      	ldr	r2, [r7, #28]
 80036dc:	611a      	str	r2, [r3, #16]
          break;
 80036de:	e008      	b.n	80036f2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036e0:	2308      	movs	r3, #8
 80036e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	69fa      	ldr	r2, [r7, #28]
 80036e8:	615a      	str	r2, [r3, #20]
          break;
 80036ea:	e002      	b.n	80036f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80036ec:	2300      	movs	r3, #0
 80036ee:	623b      	str	r3, [r7, #32]
          break;
 80036f0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	2bff      	cmp	r3, #255	; 0xff
 80036f6:	d801      	bhi.n	80036fc <HAL_GPIO_Init+0xec>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	e001      	b.n	8003700 <HAL_GPIO_Init+0xf0>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3304      	adds	r3, #4
 8003700:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	2bff      	cmp	r3, #255	; 0xff
 8003706:	d802      	bhi.n	800370e <HAL_GPIO_Init+0xfe>
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	e002      	b.n	8003714 <HAL_GPIO_Init+0x104>
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	3b08      	subs	r3, #8
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	210f      	movs	r1, #15
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	fa01 f303 	lsl.w	r3, r1, r3
 8003722:	43db      	mvns	r3, r3
 8003724:	401a      	ands	r2, r3
 8003726:	6a39      	ldr	r1, [r7, #32]
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	fa01 f303 	lsl.w	r3, r1, r3
 800372e:	431a      	orrs	r2, r3
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 8096 	beq.w	800386e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003742:	4b59      	ldr	r3, [pc, #356]	; (80038a8 <HAL_GPIO_Init+0x298>)
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	4a58      	ldr	r2, [pc, #352]	; (80038a8 <HAL_GPIO_Init+0x298>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	6193      	str	r3, [r2, #24]
 800374e:	4b56      	ldr	r3, [pc, #344]	; (80038a8 <HAL_GPIO_Init+0x298>)
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	60bb      	str	r3, [r7, #8]
 8003758:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800375a:	4a54      	ldr	r2, [pc, #336]	; (80038ac <HAL_GPIO_Init+0x29c>)
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	089b      	lsrs	r3, r3, #2
 8003760:	3302      	adds	r3, #2
 8003762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003766:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	220f      	movs	r2, #15
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43db      	mvns	r3, r3
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4013      	ands	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a4b      	ldr	r2, [pc, #300]	; (80038b0 <HAL_GPIO_Init+0x2a0>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d013      	beq.n	80037ae <HAL_GPIO_Init+0x19e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a4a      	ldr	r2, [pc, #296]	; (80038b4 <HAL_GPIO_Init+0x2a4>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d00d      	beq.n	80037aa <HAL_GPIO_Init+0x19a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a49      	ldr	r2, [pc, #292]	; (80038b8 <HAL_GPIO_Init+0x2a8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d007      	beq.n	80037a6 <HAL_GPIO_Init+0x196>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a48      	ldr	r2, [pc, #288]	; (80038bc <HAL_GPIO_Init+0x2ac>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d101      	bne.n	80037a2 <HAL_GPIO_Init+0x192>
 800379e:	2303      	movs	r3, #3
 80037a0:	e006      	b.n	80037b0 <HAL_GPIO_Init+0x1a0>
 80037a2:	2304      	movs	r3, #4
 80037a4:	e004      	b.n	80037b0 <HAL_GPIO_Init+0x1a0>
 80037a6:	2302      	movs	r3, #2
 80037a8:	e002      	b.n	80037b0 <HAL_GPIO_Init+0x1a0>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <HAL_GPIO_Init+0x1a0>
 80037ae:	2300      	movs	r3, #0
 80037b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b2:	f002 0203 	and.w	r2, r2, #3
 80037b6:	0092      	lsls	r2, r2, #2
 80037b8:	4093      	lsls	r3, r2
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	4313      	orrs	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80037c0:	493a      	ldr	r1, [pc, #232]	; (80038ac <HAL_GPIO_Init+0x29c>)
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	089b      	lsrs	r3, r3, #2
 80037c6:	3302      	adds	r3, #2
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d006      	beq.n	80037e8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80037da:	4b39      	ldr	r3, [pc, #228]	; (80038c0 <HAL_GPIO_Init+0x2b0>)
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	4938      	ldr	r1, [pc, #224]	; (80038c0 <HAL_GPIO_Init+0x2b0>)
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	600b      	str	r3, [r1, #0]
 80037e6:	e006      	b.n	80037f6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80037e8:	4b35      	ldr	r3, [pc, #212]	; (80038c0 <HAL_GPIO_Init+0x2b0>)
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	43db      	mvns	r3, r3
 80037f0:	4933      	ldr	r1, [pc, #204]	; (80038c0 <HAL_GPIO_Init+0x2b0>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d006      	beq.n	8003810 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003802:	4b2f      	ldr	r3, [pc, #188]	; (80038c0 <HAL_GPIO_Init+0x2b0>)
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	492e      	ldr	r1, [pc, #184]	; (80038c0 <HAL_GPIO_Init+0x2b0>)
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	4313      	orrs	r3, r2
 800380c:	604b      	str	r3, [r1, #4]
 800380e:	e006      	b.n	800381e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003810:	4b2b      	ldr	r3, [pc, #172]	; (80038c0 <HAL_GPIO_Init+0x2b0>)
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	43db      	mvns	r3, r3
 8003818:	4929      	ldr	r1, [pc, #164]	; (80038c0 <HAL_GPIO_Init+0x2b0>)
 800381a:	4013      	ands	r3, r2
 800381c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d006      	beq.n	8003838 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800382a:	4b25      	ldr	r3, [pc, #148]	; (80038c0 <HAL_GPIO_Init+0x2b0>)
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	4924      	ldr	r1, [pc, #144]	; (80038c0 <HAL_GPIO_Init+0x2b0>)
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	4313      	orrs	r3, r2
 8003834:	608b      	str	r3, [r1, #8]
 8003836:	e006      	b.n	8003846 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003838:	4b21      	ldr	r3, [pc, #132]	; (80038c0 <HAL_GPIO_Init+0x2b0>)
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	43db      	mvns	r3, r3
 8003840:	491f      	ldr	r1, [pc, #124]	; (80038c0 <HAL_GPIO_Init+0x2b0>)
 8003842:	4013      	ands	r3, r2
 8003844:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d006      	beq.n	8003860 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003852:	4b1b      	ldr	r3, [pc, #108]	; (80038c0 <HAL_GPIO_Init+0x2b0>)
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	491a      	ldr	r1, [pc, #104]	; (80038c0 <HAL_GPIO_Init+0x2b0>)
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	4313      	orrs	r3, r2
 800385c:	60cb      	str	r3, [r1, #12]
 800385e:	e006      	b.n	800386e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003860:	4b17      	ldr	r3, [pc, #92]	; (80038c0 <HAL_GPIO_Init+0x2b0>)
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	43db      	mvns	r3, r3
 8003868:	4915      	ldr	r1, [pc, #84]	; (80038c0 <HAL_GPIO_Init+0x2b0>)
 800386a:	4013      	ands	r3, r2
 800386c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	3301      	adds	r3, #1
 8003872:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	fa22 f303 	lsr.w	r3, r2, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	f47f aed0 	bne.w	8003624 <HAL_GPIO_Init+0x14>
  }
}
 8003884:	bf00      	nop
 8003886:	372c      	adds	r7, #44	; 0x2c
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	10210000 	.word	0x10210000
 8003894:	10110000 	.word	0x10110000
 8003898:	10120000 	.word	0x10120000
 800389c:	10310000 	.word	0x10310000
 80038a0:	10320000 	.word	0x10320000
 80038a4:	10220000 	.word	0x10220000
 80038a8:	40021000 	.word	0x40021000
 80038ac:	40010000 	.word	0x40010000
 80038b0:	40010800 	.word	0x40010800
 80038b4:	40010c00 	.word	0x40010c00
 80038b8:	40011000 	.word	0x40011000
 80038bc:	40011400 	.word	0x40011400
 80038c0:	40010400 	.word	0x40010400

080038c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	460b      	mov	r3, r1
 80038ce:	807b      	strh	r3, [r7, #2]
 80038d0:	4613      	mov	r3, r2
 80038d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038d4:	787b      	ldrb	r3, [r7, #1]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038da:	887a      	ldrh	r2, [r7, #2]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80038e0:	e003      	b.n	80038ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038e2:	887b      	ldrh	r3, [r7, #2]
 80038e4:	041a      	lsls	r2, r3, #16
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	611a      	str	r2, [r3, #16]
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr

080038f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003906:	887a      	ldrh	r2, [r7, #2]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4013      	ands	r3, r2
 800390c:	041a      	lsls	r2, r3, #16
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	43d9      	mvns	r1, r3
 8003912:	887b      	ldrh	r3, [r7, #2]
 8003914:	400b      	ands	r3, r1
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	611a      	str	r2, [r3, #16]
}
 800391c:	bf00      	nop
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr
	...

08003928 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	4603      	mov	r3, r0
 8003930:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003932:	4b08      	ldr	r3, [pc, #32]	; (8003954 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003934:	695a      	ldr	r2, [r3, #20]
 8003936:	88fb      	ldrh	r3, [r7, #6]
 8003938:	4013      	ands	r3, r2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d006      	beq.n	800394c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800393e:	4a05      	ldr	r2, [pc, #20]	; (8003954 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003940:	88fb      	ldrh	r3, [r7, #6]
 8003942:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003944:	88fb      	ldrh	r3, [r7, #6]
 8003946:	4618      	mov	r0, r3
 8003948:	f000 f806 	bl	8003958 <HAL_GPIO_EXTI_Callback>
  }
}
 800394c:	bf00      	nop
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40010400 	.word	0x40010400

08003958 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr

0800396c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e11f      	b.n	8003bbe <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7ff fa80 	bl	8002e98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2224      	movs	r2, #36	; 0x24
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0201 	bic.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039d0:	f001 fb90 	bl	80050f4 <HAL_RCC_GetPCLK1Freq>
 80039d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	4a7b      	ldr	r2, [pc, #492]	; (8003bc8 <HAL_I2C_Init+0x25c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d807      	bhi.n	80039f0 <HAL_I2C_Init+0x84>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4a7a      	ldr	r2, [pc, #488]	; (8003bcc <HAL_I2C_Init+0x260>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	bf94      	ite	ls
 80039e8:	2301      	movls	r3, #1
 80039ea:	2300      	movhi	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	e006      	b.n	80039fe <HAL_I2C_Init+0x92>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4a77      	ldr	r2, [pc, #476]	; (8003bd0 <HAL_I2C_Init+0x264>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	bf94      	ite	ls
 80039f8:	2301      	movls	r3, #1
 80039fa:	2300      	movhi	r3, #0
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e0db      	b.n	8003bbe <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	4a72      	ldr	r2, [pc, #456]	; (8003bd4 <HAL_I2C_Init+0x268>)
 8003a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0e:	0c9b      	lsrs	r3, r3, #18
 8003a10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	4a64      	ldr	r2, [pc, #400]	; (8003bc8 <HAL_I2C_Init+0x25c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d802      	bhi.n	8003a40 <HAL_I2C_Init+0xd4>
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	e009      	b.n	8003a54 <HAL_I2C_Init+0xe8>
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a46:	fb02 f303 	mul.w	r3, r2, r3
 8003a4a:	4a63      	ldr	r2, [pc, #396]	; (8003bd8 <HAL_I2C_Init+0x26c>)
 8003a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a50:	099b      	lsrs	r3, r3, #6
 8003a52:	3301      	adds	r3, #1
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6812      	ldr	r2, [r2, #0]
 8003a58:	430b      	orrs	r3, r1
 8003a5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	4956      	ldr	r1, [pc, #344]	; (8003bc8 <HAL_I2C_Init+0x25c>)
 8003a70:	428b      	cmp	r3, r1
 8003a72:	d80d      	bhi.n	8003a90 <HAL_I2C_Init+0x124>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	1e59      	subs	r1, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a82:	3301      	adds	r3, #1
 8003a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a88:	2b04      	cmp	r3, #4
 8003a8a:	bf38      	it	cc
 8003a8c:	2304      	movcc	r3, #4
 8003a8e:	e04f      	b.n	8003b30 <HAL_I2C_Init+0x1c4>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d111      	bne.n	8003abc <HAL_I2C_Init+0x150>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	1e58      	subs	r0, r3, #1
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6859      	ldr	r1, [r3, #4]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	440b      	add	r3, r1
 8003aa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aaa:	3301      	adds	r3, #1
 8003aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	bf0c      	ite	eq
 8003ab4:	2301      	moveq	r3, #1
 8003ab6:	2300      	movne	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	e012      	b.n	8003ae2 <HAL_I2C_Init+0x176>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	1e58      	subs	r0, r3, #1
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6859      	ldr	r1, [r3, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	0099      	lsls	r1, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	bf0c      	ite	eq
 8003adc:	2301      	moveq	r3, #1
 8003ade:	2300      	movne	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_I2C_Init+0x17e>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e022      	b.n	8003b30 <HAL_I2C_Init+0x1c4>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10e      	bne.n	8003b10 <HAL_I2C_Init+0x1a4>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	1e58      	subs	r0, r3, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6859      	ldr	r1, [r3, #4]
 8003afa:	460b      	mov	r3, r1
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	440b      	add	r3, r1
 8003b00:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b04:	3301      	adds	r3, #1
 8003b06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b0e:	e00f      	b.n	8003b30 <HAL_I2C_Init+0x1c4>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	1e58      	subs	r0, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6859      	ldr	r1, [r3, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	0099      	lsls	r1, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b26:	3301      	adds	r3, #1
 8003b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	6809      	ldr	r1, [r1, #0]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69da      	ldr	r2, [r3, #28]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6911      	ldr	r1, [r2, #16]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	68d2      	ldr	r2, [r2, #12]
 8003b6a:	4311      	orrs	r1, r2
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6812      	ldr	r2, [r2, #0]
 8003b70:	430b      	orrs	r3, r1
 8003b72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695a      	ldr	r2, [r3, #20]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0201 	orr.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	000186a0 	.word	0x000186a0
 8003bcc:	001e847f 	.word	0x001e847f
 8003bd0:	003d08ff 	.word	0x003d08ff
 8003bd4:	431bde83 	.word	0x431bde83
 8003bd8:	10624dd3 	.word	0x10624dd3

08003bdc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af02      	add	r7, sp, #8
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	4608      	mov	r0, r1
 8003be6:	4611      	mov	r1, r2
 8003be8:	461a      	mov	r2, r3
 8003bea:	4603      	mov	r3, r0
 8003bec:	817b      	strh	r3, [r7, #10]
 8003bee:	460b      	mov	r3, r1
 8003bf0:	813b      	strh	r3, [r7, #8]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bf6:	f7ff fb5b 	bl	80032b0 <HAL_GetTick>
 8003bfa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	f040 80d9 	bne.w	8003dbc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	2319      	movs	r3, #25
 8003c10:	2201      	movs	r2, #1
 8003c12:	496d      	ldr	r1, [pc, #436]	; (8003dc8 <HAL_I2C_Mem_Write+0x1ec>)
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 fcbb 	bl	8004590 <I2C_WaitOnFlagUntilTimeout>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003c20:	2302      	movs	r3, #2
 8003c22:	e0cc      	b.n	8003dbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_I2C_Mem_Write+0x56>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e0c5      	b.n	8003dbe <HAL_I2C_Mem_Write+0x1e2>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d007      	beq.n	8003c58 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0201 	orr.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2221      	movs	r2, #33	; 0x21
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2240      	movs	r2, #64	; 0x40
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a3a      	ldr	r2, [r7, #32]
 8003c82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4a4d      	ldr	r2, [pc, #308]	; (8003dcc <HAL_I2C_Mem_Write+0x1f0>)
 8003c98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c9a:	88f8      	ldrh	r0, [r7, #6]
 8003c9c:	893a      	ldrh	r2, [r7, #8]
 8003c9e:	8979      	ldrh	r1, [r7, #10]
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	9301      	str	r3, [sp, #4]
 8003ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	4603      	mov	r3, r0
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 faf2 	bl	8004294 <I2C_RequestMemoryWrite>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d052      	beq.n	8003d5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e081      	b.n	8003dbe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 fd3c 	bl	800473c <I2C_WaitOnTXEFlagUntilTimeout>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00d      	beq.n	8003ce6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d107      	bne.n	8003ce2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e06b      	b.n	8003dbe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	781a      	ldrb	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d11b      	bne.n	8003d5c <HAL_I2C_Mem_Write+0x180>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d017      	beq.n	8003d5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	781a      	ldrb	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1aa      	bne.n	8003cba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 fd28 	bl	80047be <I2C_WaitOnBTFFlagUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00d      	beq.n	8003d90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d107      	bne.n	8003d8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e016      	b.n	8003dbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	e000      	b.n	8003dbe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003dbc:	2302      	movs	r3, #2
  }
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	00100002 	.word	0x00100002
 8003dcc:	ffff0000 	.word	0xffff0000

08003dd0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b08c      	sub	sp, #48	; 0x30
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	4608      	mov	r0, r1
 8003dda:	4611      	mov	r1, r2
 8003ddc:	461a      	mov	r2, r3
 8003dde:	4603      	mov	r3, r0
 8003de0:	817b      	strh	r3, [r7, #10]
 8003de2:	460b      	mov	r3, r1
 8003de4:	813b      	strh	r3, [r7, #8]
 8003de6:	4613      	mov	r3, r2
 8003de8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003dea:	2300      	movs	r3, #0
 8003dec:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dee:	f7ff fa5f 	bl	80032b0 <HAL_GetTick>
 8003df2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b20      	cmp	r3, #32
 8003dfe:	f040 823d 	bne.w	800427c <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	2319      	movs	r3, #25
 8003e08:	2201      	movs	r2, #1
 8003e0a:	4981      	ldr	r1, [pc, #516]	; (8004010 <HAL_I2C_Mem_Read+0x240>)
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 fbbf 	bl	8004590 <I2C_WaitOnFlagUntilTimeout>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003e18:	2302      	movs	r3, #2
 8003e1a:	e230      	b.n	800427e <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d101      	bne.n	8003e2a <HAL_I2C_Mem_Read+0x5a>
 8003e26:	2302      	movs	r3, #2
 8003e28:	e229      	b.n	800427e <HAL_I2C_Mem_Read+0x4ae>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d007      	beq.n	8003e50 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0201 	orr.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2222      	movs	r2, #34	; 0x22
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2240      	movs	r2, #64	; 0x40
 8003e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003e80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4a61      	ldr	r2, [pc, #388]	; (8004014 <HAL_I2C_Mem_Read+0x244>)
 8003e90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e92:	88f8      	ldrh	r0, [r7, #6]
 8003e94:	893a      	ldrh	r2, [r7, #8]
 8003e96:	8979      	ldrh	r1, [r7, #10]
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	9301      	str	r3, [sp, #4]
 8003e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 fa8c 	bl	80043c0 <I2C_RequestMemoryRead>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e1e5      	b.n	800427e <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d113      	bne.n	8003ee2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61fb      	str	r3, [r7, #28]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	61fb      	str	r3, [r7, #28]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	61fb      	str	r3, [r7, #28]
 8003ece:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	e1b9      	b.n	8004256 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d11d      	bne.n	8003f26 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ef8:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003efa:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003efc:	2300      	movs	r3, #0
 8003efe:	61bb      	str	r3, [r7, #24]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	61bb      	str	r3, [r7, #24]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	61bb      	str	r3, [r7, #24]
 8003f10:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f20:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f22:	b662      	cpsie	i
 8003f24:	e197      	b.n	8004256 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d11d      	bne.n	8003f6a <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f3c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f3e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f64:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f66:	b662      	cpsie	i
 8003f68:	e175      	b.n	8004256 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f78:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	613b      	str	r3, [r7, #16]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	613b      	str	r3, [r7, #16]
 8003f8e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003f90:	e161      	b.n	8004256 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f96:	2b03      	cmp	r3, #3
 8003f98:	f200 811a 	bhi.w	80041d0 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d123      	bne.n	8003fec <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 fc49 	bl	8004840 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e162      	b.n	800427e <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691a      	ldr	r2, [r3, #16]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	1c5a      	adds	r2, r3, #1
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fea:	e134      	b.n	8004256 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d150      	bne.n	8004096 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	4906      	ldr	r1, [pc, #24]	; (8004018 <HAL_I2C_Mem_Read+0x248>)
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 fac6 	bl	8004590 <I2C_WaitOnFlagUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d008      	beq.n	800401c <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e137      	b.n	800427e <HAL_I2C_Mem_Read+0x4ae>
 800400e:	bf00      	nop
 8004010:	00100002 	.word	0x00100002
 8004014:	ffff0000 	.word	0xffff0000
 8004018:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800401c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800402c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	691a      	ldr	r2, [r3, #16]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	b2d2      	uxtb	r2, r2
 800403a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	1c5a      	adds	r2, r3, #1
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800404a:	3b01      	subs	r3, #1
 800404c:	b29a      	uxth	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004056:	b29b      	uxth	r3, r3
 8004058:	3b01      	subs	r3, #1
 800405a:	b29a      	uxth	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004060:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	691a      	ldr	r2, [r3, #16]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800407e:	3b01      	subs	r3, #1
 8004080:	b29a      	uxth	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408a:	b29b      	uxth	r3, r3
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004094:	e0df      	b.n	8004256 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409c:	2200      	movs	r2, #0
 800409e:	497a      	ldr	r1, [pc, #488]	; (8004288 <HAL_I2C_Mem_Read+0x4b8>)
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 fa75 	bl	8004590 <I2C_WaitOnFlagUntilTimeout>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e0e6      	b.n	800427e <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80040c0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	691a      	ldr	r2, [r3, #16]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	b2d2      	uxtb	r2, r2
 80040ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	1c5a      	adds	r2, r3, #1
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80040f4:	4b65      	ldr	r3, [pc, #404]	; (800428c <HAL_I2C_Mem_Read+0x4bc>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	08db      	lsrs	r3, r3, #3
 80040fa:	4a65      	ldr	r2, [pc, #404]	; (8004290 <HAL_I2C_Mem_Read+0x4c0>)
 80040fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004100:	0a1a      	lsrs	r2, r3, #8
 8004102:	4613      	mov	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	00da      	lsls	r2, r3, #3
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800410e:	6a3b      	ldr	r3, [r7, #32]
 8004110:	3b01      	subs	r3, #1
 8004112:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d117      	bne.n	800414a <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2220      	movs	r2, #32
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004134:	f043 0220 	orr.w	r2, r3, #32
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800413c:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e099      	b.n	800427e <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b04      	cmp	r3, #4
 8004156:	d1da      	bne.n	800410e <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004166:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691a      	ldr	r2, [r3, #16]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	b2d2      	uxtb	r2, r2
 8004174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004184:	3b01      	subs	r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004190:	b29b      	uxth	r3, r3
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	855a      	strh	r2, [r3, #42]	; 0x2a
 800419a:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	691a      	ldr	r2, [r3, #16]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	1c5a      	adds	r2, r3, #1
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	3b01      	subs	r3, #1
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041ce:	e042      	b.n	8004256 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 fb33 	bl	8004840 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e04c      	b.n	800427e <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	691a      	ldr	r2, [r3, #16]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	b2d2      	uxtb	r2, r2
 80041f0:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	1c5a      	adds	r2, r3, #1
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b04      	cmp	r3, #4
 8004222:	d118      	bne.n	8004256 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691a      	ldr	r2, [r3, #16]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800425a:	2b00      	cmp	r3, #0
 800425c:	f47f ae99 	bne.w	8003f92 <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004278:	2300      	movs	r3, #0
 800427a:	e000      	b.n	800427e <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 800427c:	2302      	movs	r3, #2
  }
}
 800427e:	4618      	mov	r0, r3
 8004280:	3728      	adds	r7, #40	; 0x28
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	00010004 	.word	0x00010004
 800428c:	20000008 	.word	0x20000008
 8004290:	14f8b589 	.word	0x14f8b589

08004294 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b088      	sub	sp, #32
 8004298:	af02      	add	r7, sp, #8
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	4608      	mov	r0, r1
 800429e:	4611      	mov	r1, r2
 80042a0:	461a      	mov	r2, r3
 80042a2:	4603      	mov	r3, r0
 80042a4:	817b      	strh	r3, [r7, #10]
 80042a6:	460b      	mov	r3, r1
 80042a8:	813b      	strh	r3, [r7, #8]
 80042aa:	4613      	mov	r3, r2
 80042ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 f960 	bl	8004590 <I2C_WaitOnFlagUntilTimeout>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00d      	beq.n	80042f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e4:	d103      	bne.n	80042ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e05f      	b.n	80043b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042f2:	897b      	ldrh	r3, [r7, #10]
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	461a      	mov	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004300:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	6a3a      	ldr	r2, [r7, #32]
 8004306:	492d      	ldr	r1, [pc, #180]	; (80043bc <I2C_RequestMemoryWrite+0x128>)
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 f998 	bl	800463e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e04c      	b.n	80043b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004318:	2300      	movs	r3, #0
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	617b      	str	r3, [r7, #20]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800432e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004330:	6a39      	ldr	r1, [r7, #32]
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 fa02 	bl	800473c <I2C_WaitOnTXEFlagUntilTimeout>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00d      	beq.n	800435a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	2b04      	cmp	r3, #4
 8004344:	d107      	bne.n	8004356 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004354:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e02b      	b.n	80043b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800435a:	88fb      	ldrh	r3, [r7, #6]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d105      	bne.n	800436c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004360:	893b      	ldrh	r3, [r7, #8]
 8004362:	b2da      	uxtb	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	611a      	str	r2, [r3, #16]
 800436a:	e021      	b.n	80043b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800436c:	893b      	ldrh	r3, [r7, #8]
 800436e:	0a1b      	lsrs	r3, r3, #8
 8004370:	b29b      	uxth	r3, r3
 8004372:	b2da      	uxtb	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800437a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800437c:	6a39      	ldr	r1, [r7, #32]
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 f9dc 	bl	800473c <I2C_WaitOnTXEFlagUntilTimeout>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00d      	beq.n	80043a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	2b04      	cmp	r3, #4
 8004390:	d107      	bne.n	80043a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e005      	b.n	80043b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043a6:	893b      	ldrh	r3, [r7, #8]
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3718      	adds	r7, #24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	00010002 	.word	0x00010002

080043c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b088      	sub	sp, #32
 80043c4:	af02      	add	r7, sp, #8
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	4608      	mov	r0, r1
 80043ca:	4611      	mov	r1, r2
 80043cc:	461a      	mov	r2, r3
 80043ce:	4603      	mov	r3, r0
 80043d0:	817b      	strh	r3, [r7, #10]
 80043d2:	460b      	mov	r3, r1
 80043d4:	813b      	strh	r3, [r7, #8]
 80043d6:	4613      	mov	r3, r2
 80043d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	2200      	movs	r2, #0
 8004402:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 f8c2 	bl	8004590 <I2C_WaitOnFlagUntilTimeout>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00d      	beq.n	800442e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004420:	d103      	bne.n	800442a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004428:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e0aa      	b.n	8004584 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800442e:	897b      	ldrh	r3, [r7, #10]
 8004430:	b2db      	uxtb	r3, r3
 8004432:	461a      	mov	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800443c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	6a3a      	ldr	r2, [r7, #32]
 8004442:	4952      	ldr	r1, [pc, #328]	; (800458c <I2C_RequestMemoryRead+0x1cc>)
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f000 f8fa 	bl	800463e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e097      	b.n	8004584 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004454:	2300      	movs	r3, #0
 8004456:	617b      	str	r3, [r7, #20]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	617b      	str	r3, [r7, #20]
 8004468:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800446a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446c:	6a39      	ldr	r1, [r7, #32]
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 f964 	bl	800473c <I2C_WaitOnTXEFlagUntilTimeout>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00d      	beq.n	8004496 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	2b04      	cmp	r3, #4
 8004480:	d107      	bne.n	8004492 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004490:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e076      	b.n	8004584 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004496:	88fb      	ldrh	r3, [r7, #6]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d105      	bne.n	80044a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800449c:	893b      	ldrh	r3, [r7, #8]
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	611a      	str	r2, [r3, #16]
 80044a6:	e021      	b.n	80044ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044a8:	893b      	ldrh	r3, [r7, #8]
 80044aa:	0a1b      	lsrs	r3, r3, #8
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b8:	6a39      	ldr	r1, [r7, #32]
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 f93e 	bl	800473c <I2C_WaitOnTXEFlagUntilTimeout>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00d      	beq.n	80044e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d107      	bne.n	80044de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e050      	b.n	8004584 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044e2:	893b      	ldrh	r3, [r7, #8]
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ee:	6a39      	ldr	r1, [r7, #32]
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 f923 	bl	800473c <I2C_WaitOnTXEFlagUntilTimeout>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00d      	beq.n	8004518 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004500:	2b04      	cmp	r3, #4
 8004502:	d107      	bne.n	8004514 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004512:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e035      	b.n	8004584 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004526:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	2200      	movs	r2, #0
 8004530:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 f82b 	bl	8004590 <I2C_WaitOnFlagUntilTimeout>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00d      	beq.n	800455c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800454e:	d103      	bne.n	8004558 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004556:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e013      	b.n	8004584 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800455c:	897b      	ldrh	r3, [r7, #10]
 800455e:	b2db      	uxtb	r3, r3
 8004560:	f043 0301 	orr.w	r3, r3, #1
 8004564:	b2da      	uxtb	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	6a3a      	ldr	r2, [r7, #32]
 8004570:	4906      	ldr	r1, [pc, #24]	; (800458c <I2C_RequestMemoryRead+0x1cc>)
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 f863 	bl	800463e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e000      	b.n	8004584 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3718      	adds	r7, #24
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	00010002 	.word	0x00010002

08004590 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	603b      	str	r3, [r7, #0]
 800459c:	4613      	mov	r3, r2
 800459e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045a0:	e025      	b.n	80045ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a8:	d021      	beq.n	80045ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045aa:	f7fe fe81 	bl	80032b0 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d302      	bcc.n	80045c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d116      	bne.n	80045ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2220      	movs	r2, #32
 80045ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	f043 0220 	orr.w	r2, r3, #32
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e023      	b.n	8004636 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	0c1b      	lsrs	r3, r3, #16
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d10d      	bne.n	8004614 <I2C_WaitOnFlagUntilTimeout+0x84>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	43da      	mvns	r2, r3
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	4013      	ands	r3, r2
 8004604:	b29b      	uxth	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	bf0c      	ite	eq
 800460a:	2301      	moveq	r3, #1
 800460c:	2300      	movne	r3, #0
 800460e:	b2db      	uxtb	r3, r3
 8004610:	461a      	mov	r2, r3
 8004612:	e00c      	b.n	800462e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	43da      	mvns	r2, r3
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	4013      	ands	r3, r2
 8004620:	b29b      	uxth	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	bf0c      	ite	eq
 8004626:	2301      	moveq	r3, #1
 8004628:	2300      	movne	r3, #0
 800462a:	b2db      	uxtb	r3, r3
 800462c:	461a      	mov	r2, r3
 800462e:	79fb      	ldrb	r3, [r7, #7]
 8004630:	429a      	cmp	r2, r3
 8004632:	d0b6      	beq.n	80045a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b084      	sub	sp, #16
 8004642:	af00      	add	r7, sp, #0
 8004644:	60f8      	str	r0, [r7, #12]
 8004646:	60b9      	str	r1, [r7, #8]
 8004648:	607a      	str	r2, [r7, #4]
 800464a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800464c:	e051      	b.n	80046f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800465c:	d123      	bne.n	80046a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800466c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004676:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2220      	movs	r2, #32
 8004682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	f043 0204 	orr.w	r2, r3, #4
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e046      	b.n	8004734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ac:	d021      	beq.n	80046f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ae:	f7fe fdff 	bl	80032b0 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d302      	bcc.n	80046c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d116      	bne.n	80046f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2220      	movs	r2, #32
 80046ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	f043 0220 	orr.w	r2, r3, #32
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e020      	b.n	8004734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	0c1b      	lsrs	r3, r3, #16
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d10c      	bne.n	8004716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	43da      	mvns	r2, r3
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	4013      	ands	r3, r2
 8004708:	b29b      	uxth	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	bf14      	ite	ne
 800470e:	2301      	movne	r3, #1
 8004710:	2300      	moveq	r3, #0
 8004712:	b2db      	uxtb	r3, r3
 8004714:	e00b      	b.n	800472e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	43da      	mvns	r2, r3
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	4013      	ands	r3, r2
 8004722:	b29b      	uxth	r3, r3
 8004724:	2b00      	cmp	r3, #0
 8004726:	bf14      	ite	ne
 8004728:	2301      	movne	r3, #1
 800472a:	2300      	moveq	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d18d      	bne.n	800464e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004748:	e02d      	b.n	80047a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 f8ce 	bl	80048ec <I2C_IsAcknowledgeFailed>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e02d      	b.n	80047b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004760:	d021      	beq.n	80047a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004762:	f7fe fda5 	bl	80032b0 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	429a      	cmp	r2, r3
 8004770:	d302      	bcc.n	8004778 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d116      	bne.n	80047a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2220      	movs	r2, #32
 8004782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	f043 0220 	orr.w	r2, r3, #32
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e007      	b.n	80047b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b0:	2b80      	cmp	r3, #128	; 0x80
 80047b2:	d1ca      	bne.n	800474a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b084      	sub	sp, #16
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	60f8      	str	r0, [r7, #12]
 80047c6:	60b9      	str	r1, [r7, #8]
 80047c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047ca:	e02d      	b.n	8004828 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 f88d 	bl	80048ec <I2C_IsAcknowledgeFailed>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e02d      	b.n	8004838 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e2:	d021      	beq.n	8004828 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e4:	f7fe fd64 	bl	80032b0 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d302      	bcc.n	80047fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d116      	bne.n	8004828 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2220      	movs	r2, #32
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004814:	f043 0220 	orr.w	r2, r3, #32
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e007      	b.n	8004838 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	f003 0304 	and.w	r3, r3, #4
 8004832:	2b04      	cmp	r3, #4
 8004834:	d1ca      	bne.n	80047cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800484c:	e042      	b.n	80048d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	f003 0310 	and.w	r3, r3, #16
 8004858:	2b10      	cmp	r3, #16
 800485a:	d119      	bne.n	8004890 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f06f 0210 	mvn.w	r2, #16
 8004864:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2220      	movs	r2, #32
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e029      	b.n	80048e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004890:	f7fe fd0e 	bl	80032b0 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	429a      	cmp	r2, r3
 800489e:	d302      	bcc.n	80048a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d116      	bne.n	80048d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2220      	movs	r2, #32
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c0:	f043 0220 	orr.w	r2, r3, #32
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e007      	b.n	80048e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048de:	2b40      	cmp	r3, #64	; 0x40
 80048e0:	d1b5      	bne.n	800484e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004902:	d11b      	bne.n	800493c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800490c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2220      	movs	r2, #32
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004928:	f043 0204 	orr.w	r2, r3, #4
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e000      	b.n	800493e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	bc80      	pop	{r7}
 8004946:	4770      	bx	lr

08004948 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e26c      	b.n	8004e34 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 8087 	beq.w	8004a76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004968:	4b92      	ldr	r3, [pc, #584]	; (8004bb4 <HAL_RCC_OscConfig+0x26c>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f003 030c 	and.w	r3, r3, #12
 8004970:	2b04      	cmp	r3, #4
 8004972:	d00c      	beq.n	800498e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004974:	4b8f      	ldr	r3, [pc, #572]	; (8004bb4 <HAL_RCC_OscConfig+0x26c>)
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f003 030c 	and.w	r3, r3, #12
 800497c:	2b08      	cmp	r3, #8
 800497e:	d112      	bne.n	80049a6 <HAL_RCC_OscConfig+0x5e>
 8004980:	4b8c      	ldr	r3, [pc, #560]	; (8004bb4 <HAL_RCC_OscConfig+0x26c>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800498c:	d10b      	bne.n	80049a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800498e:	4b89      	ldr	r3, [pc, #548]	; (8004bb4 <HAL_RCC_OscConfig+0x26c>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d06c      	beq.n	8004a74 <HAL_RCC_OscConfig+0x12c>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d168      	bne.n	8004a74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e246      	b.n	8004e34 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ae:	d106      	bne.n	80049be <HAL_RCC_OscConfig+0x76>
 80049b0:	4b80      	ldr	r3, [pc, #512]	; (8004bb4 <HAL_RCC_OscConfig+0x26c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a7f      	ldr	r2, [pc, #508]	; (8004bb4 <HAL_RCC_OscConfig+0x26c>)
 80049b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	e02e      	b.n	8004a1c <HAL_RCC_OscConfig+0xd4>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10c      	bne.n	80049e0 <HAL_RCC_OscConfig+0x98>
 80049c6:	4b7b      	ldr	r3, [pc, #492]	; (8004bb4 <HAL_RCC_OscConfig+0x26c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a7a      	ldr	r2, [pc, #488]	; (8004bb4 <HAL_RCC_OscConfig+0x26c>)
 80049cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049d0:	6013      	str	r3, [r2, #0]
 80049d2:	4b78      	ldr	r3, [pc, #480]	; (8004bb4 <HAL_RCC_OscConfig+0x26c>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a77      	ldr	r2, [pc, #476]	; (8004bb4 <HAL_RCC_OscConfig+0x26c>)
 80049d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049dc:	6013      	str	r3, [r2, #0]
 80049de:	e01d      	b.n	8004a1c <HAL_RCC_OscConfig+0xd4>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049e8:	d10c      	bne.n	8004a04 <HAL_RCC_OscConfig+0xbc>
 80049ea:	4b72      	ldr	r3, [pc, #456]	; (8004bb4 <HAL_RCC_OscConfig+0x26c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a71      	ldr	r2, [pc, #452]	; (8004bb4 <HAL_RCC_OscConfig+0x26c>)
 80049f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	4b6f      	ldr	r3, [pc, #444]	; (8004bb4 <HAL_RCC_OscConfig+0x26c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a6e      	ldr	r2, [pc, #440]	; (8004bb4 <HAL_RCC_OscConfig+0x26c>)
 80049fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a00:	6013      	str	r3, [r2, #0]
 8004a02:	e00b      	b.n	8004a1c <HAL_RCC_OscConfig+0xd4>
 8004a04:	4b6b      	ldr	r3, [pc, #428]	; (8004bb4 <HAL_RCC_OscConfig+0x26c>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a6a      	ldr	r2, [pc, #424]	; (8004bb4 <HAL_RCC_OscConfig+0x26c>)
 8004a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a0e:	6013      	str	r3, [r2, #0]
 8004a10:	4b68      	ldr	r3, [pc, #416]	; (8004bb4 <HAL_RCC_OscConfig+0x26c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a67      	ldr	r2, [pc, #412]	; (8004bb4 <HAL_RCC_OscConfig+0x26c>)
 8004a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d013      	beq.n	8004a4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a24:	f7fe fc44 	bl	80032b0 <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a2c:	f7fe fc40 	bl	80032b0 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b64      	cmp	r3, #100	; 0x64
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e1fa      	b.n	8004e34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a3e:	4b5d      	ldr	r3, [pc, #372]	; (8004bb4 <HAL_RCC_OscConfig+0x26c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0f0      	beq.n	8004a2c <HAL_RCC_OscConfig+0xe4>
 8004a4a:	e014      	b.n	8004a76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4c:	f7fe fc30 	bl	80032b0 <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a54:	f7fe fc2c 	bl	80032b0 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b64      	cmp	r3, #100	; 0x64
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e1e6      	b.n	8004e34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a66:	4b53      	ldr	r3, [pc, #332]	; (8004bb4 <HAL_RCC_OscConfig+0x26c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1f0      	bne.n	8004a54 <HAL_RCC_OscConfig+0x10c>
 8004a72:	e000      	b.n	8004a76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d063      	beq.n	8004b4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a82:	4b4c      	ldr	r3, [pc, #304]	; (8004bb4 <HAL_RCC_OscConfig+0x26c>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f003 030c 	and.w	r3, r3, #12
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00b      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004a8e:	4b49      	ldr	r3, [pc, #292]	; (8004bb4 <HAL_RCC_OscConfig+0x26c>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f003 030c 	and.w	r3, r3, #12
 8004a96:	2b08      	cmp	r3, #8
 8004a98:	d11c      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x18c>
 8004a9a:	4b46      	ldr	r3, [pc, #280]	; (8004bb4 <HAL_RCC_OscConfig+0x26c>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d116      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aa6:	4b43      	ldr	r3, [pc, #268]	; (8004bb4 <HAL_RCC_OscConfig+0x26c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d005      	beq.n	8004abe <HAL_RCC_OscConfig+0x176>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d001      	beq.n	8004abe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e1ba      	b.n	8004e34 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004abe:	4b3d      	ldr	r3, [pc, #244]	; (8004bb4 <HAL_RCC_OscConfig+0x26c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	4939      	ldr	r1, [pc, #228]	; (8004bb4 <HAL_RCC_OscConfig+0x26c>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ad2:	e03a      	b.n	8004b4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d020      	beq.n	8004b1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004adc:	4b36      	ldr	r3, [pc, #216]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 8004ade:	2201      	movs	r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae2:	f7fe fbe5 	bl	80032b0 <HAL_GetTick>
 8004ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ae8:	e008      	b.n	8004afc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aea:	f7fe fbe1 	bl	80032b0 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d901      	bls.n	8004afc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e19b      	b.n	8004e34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004afc:	4b2d      	ldr	r3, [pc, #180]	; (8004bb4 <HAL_RCC_OscConfig+0x26c>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d0f0      	beq.n	8004aea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b08:	4b2a      	ldr	r3, [pc, #168]	; (8004bb4 <HAL_RCC_OscConfig+0x26c>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	00db      	lsls	r3, r3, #3
 8004b16:	4927      	ldr	r1, [pc, #156]	; (8004bb4 <HAL_RCC_OscConfig+0x26c>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	600b      	str	r3, [r1, #0]
 8004b1c:	e015      	b.n	8004b4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b1e:	4b26      	ldr	r3, [pc, #152]	; (8004bb8 <HAL_RCC_OscConfig+0x270>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b24:	f7fe fbc4 	bl	80032b0 <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b2c:	f7fe fbc0 	bl	80032b0 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e17a      	b.n	8004e34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b3e:	4b1d      	ldr	r3, [pc, #116]	; (8004bb4 <HAL_RCC_OscConfig+0x26c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1f0      	bne.n	8004b2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0308 	and.w	r3, r3, #8
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d03a      	beq.n	8004bcc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d019      	beq.n	8004b92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b5e:	4b17      	ldr	r3, [pc, #92]	; (8004bbc <HAL_RCC_OscConfig+0x274>)
 8004b60:	2201      	movs	r2, #1
 8004b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b64:	f7fe fba4 	bl	80032b0 <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b6c:	f7fe fba0 	bl	80032b0 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e15a      	b.n	8004e34 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b7e:	4b0d      	ldr	r3, [pc, #52]	; (8004bb4 <HAL_RCC_OscConfig+0x26c>)
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d0f0      	beq.n	8004b6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004b8a:	2001      	movs	r0, #1
 8004b8c:	f000 fada 	bl	8005144 <RCC_Delay>
 8004b90:	e01c      	b.n	8004bcc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b92:	4b0a      	ldr	r3, [pc, #40]	; (8004bbc <HAL_RCC_OscConfig+0x274>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b98:	f7fe fb8a 	bl	80032b0 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b9e:	e00f      	b.n	8004bc0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ba0:	f7fe fb86 	bl	80032b0 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d908      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e140      	b.n	8004e34 <HAL_RCC_OscConfig+0x4ec>
 8004bb2:	bf00      	nop
 8004bb4:	40021000 	.word	0x40021000
 8004bb8:	42420000 	.word	0x42420000
 8004bbc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bc0:	4b9e      	ldr	r3, [pc, #632]	; (8004e3c <HAL_RCC_OscConfig+0x4f4>)
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1e9      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 80a6 	beq.w	8004d26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bde:	4b97      	ldr	r3, [pc, #604]	; (8004e3c <HAL_RCC_OscConfig+0x4f4>)
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10d      	bne.n	8004c06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bea:	4b94      	ldr	r3, [pc, #592]	; (8004e3c <HAL_RCC_OscConfig+0x4f4>)
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	4a93      	ldr	r2, [pc, #588]	; (8004e3c <HAL_RCC_OscConfig+0x4f4>)
 8004bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bf4:	61d3      	str	r3, [r2, #28]
 8004bf6:	4b91      	ldr	r3, [pc, #580]	; (8004e3c <HAL_RCC_OscConfig+0x4f4>)
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bfe:	60bb      	str	r3, [r7, #8]
 8004c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c02:	2301      	movs	r3, #1
 8004c04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c06:	4b8e      	ldr	r3, [pc, #568]	; (8004e40 <HAL_RCC_OscConfig+0x4f8>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d118      	bne.n	8004c44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c12:	4b8b      	ldr	r3, [pc, #556]	; (8004e40 <HAL_RCC_OscConfig+0x4f8>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a8a      	ldr	r2, [pc, #552]	; (8004e40 <HAL_RCC_OscConfig+0x4f8>)
 8004c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c1e:	f7fe fb47 	bl	80032b0 <HAL_GetTick>
 8004c22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c24:	e008      	b.n	8004c38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c26:	f7fe fb43 	bl	80032b0 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b64      	cmp	r3, #100	; 0x64
 8004c32:	d901      	bls.n	8004c38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e0fd      	b.n	8004e34 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c38:	4b81      	ldr	r3, [pc, #516]	; (8004e40 <HAL_RCC_OscConfig+0x4f8>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0f0      	beq.n	8004c26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d106      	bne.n	8004c5a <HAL_RCC_OscConfig+0x312>
 8004c4c:	4b7b      	ldr	r3, [pc, #492]	; (8004e3c <HAL_RCC_OscConfig+0x4f4>)
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	4a7a      	ldr	r2, [pc, #488]	; (8004e3c <HAL_RCC_OscConfig+0x4f4>)
 8004c52:	f043 0301 	orr.w	r3, r3, #1
 8004c56:	6213      	str	r3, [r2, #32]
 8004c58:	e02d      	b.n	8004cb6 <HAL_RCC_OscConfig+0x36e>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10c      	bne.n	8004c7c <HAL_RCC_OscConfig+0x334>
 8004c62:	4b76      	ldr	r3, [pc, #472]	; (8004e3c <HAL_RCC_OscConfig+0x4f4>)
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	4a75      	ldr	r2, [pc, #468]	; (8004e3c <HAL_RCC_OscConfig+0x4f4>)
 8004c68:	f023 0301 	bic.w	r3, r3, #1
 8004c6c:	6213      	str	r3, [r2, #32]
 8004c6e:	4b73      	ldr	r3, [pc, #460]	; (8004e3c <HAL_RCC_OscConfig+0x4f4>)
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	4a72      	ldr	r2, [pc, #456]	; (8004e3c <HAL_RCC_OscConfig+0x4f4>)
 8004c74:	f023 0304 	bic.w	r3, r3, #4
 8004c78:	6213      	str	r3, [r2, #32]
 8004c7a:	e01c      	b.n	8004cb6 <HAL_RCC_OscConfig+0x36e>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	2b05      	cmp	r3, #5
 8004c82:	d10c      	bne.n	8004c9e <HAL_RCC_OscConfig+0x356>
 8004c84:	4b6d      	ldr	r3, [pc, #436]	; (8004e3c <HAL_RCC_OscConfig+0x4f4>)
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	4a6c      	ldr	r2, [pc, #432]	; (8004e3c <HAL_RCC_OscConfig+0x4f4>)
 8004c8a:	f043 0304 	orr.w	r3, r3, #4
 8004c8e:	6213      	str	r3, [r2, #32]
 8004c90:	4b6a      	ldr	r3, [pc, #424]	; (8004e3c <HAL_RCC_OscConfig+0x4f4>)
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	4a69      	ldr	r2, [pc, #420]	; (8004e3c <HAL_RCC_OscConfig+0x4f4>)
 8004c96:	f043 0301 	orr.w	r3, r3, #1
 8004c9a:	6213      	str	r3, [r2, #32]
 8004c9c:	e00b      	b.n	8004cb6 <HAL_RCC_OscConfig+0x36e>
 8004c9e:	4b67      	ldr	r3, [pc, #412]	; (8004e3c <HAL_RCC_OscConfig+0x4f4>)
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	4a66      	ldr	r2, [pc, #408]	; (8004e3c <HAL_RCC_OscConfig+0x4f4>)
 8004ca4:	f023 0301 	bic.w	r3, r3, #1
 8004ca8:	6213      	str	r3, [r2, #32]
 8004caa:	4b64      	ldr	r3, [pc, #400]	; (8004e3c <HAL_RCC_OscConfig+0x4f4>)
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	4a63      	ldr	r2, [pc, #396]	; (8004e3c <HAL_RCC_OscConfig+0x4f4>)
 8004cb0:	f023 0304 	bic.w	r3, r3, #4
 8004cb4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d015      	beq.n	8004cea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cbe:	f7fe faf7 	bl	80032b0 <HAL_GetTick>
 8004cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cc4:	e00a      	b.n	8004cdc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cc6:	f7fe faf3 	bl	80032b0 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e0ab      	b.n	8004e34 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cdc:	4b57      	ldr	r3, [pc, #348]	; (8004e3c <HAL_RCC_OscConfig+0x4f4>)
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0ee      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x37e>
 8004ce8:	e014      	b.n	8004d14 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cea:	f7fe fae1 	bl	80032b0 <HAL_GetTick>
 8004cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cf0:	e00a      	b.n	8004d08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cf2:	f7fe fadd 	bl	80032b0 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d901      	bls.n	8004d08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e095      	b.n	8004e34 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d08:	4b4c      	ldr	r3, [pc, #304]	; (8004e3c <HAL_RCC_OscConfig+0x4f4>)
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1ee      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d14:	7dfb      	ldrb	r3, [r7, #23]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d105      	bne.n	8004d26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d1a:	4b48      	ldr	r3, [pc, #288]	; (8004e3c <HAL_RCC_OscConfig+0x4f4>)
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	4a47      	ldr	r2, [pc, #284]	; (8004e3c <HAL_RCC_OscConfig+0x4f4>)
 8004d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 8081 	beq.w	8004e32 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d30:	4b42      	ldr	r3, [pc, #264]	; (8004e3c <HAL_RCC_OscConfig+0x4f4>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f003 030c 	and.w	r3, r3, #12
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d061      	beq.n	8004e00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	69db      	ldr	r3, [r3, #28]
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d146      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d44:	4b3f      	ldr	r3, [pc, #252]	; (8004e44 <HAL_RCC_OscConfig+0x4fc>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d4a:	f7fe fab1 	bl	80032b0 <HAL_GetTick>
 8004d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d50:	e008      	b.n	8004d64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d52:	f7fe faad 	bl	80032b0 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e067      	b.n	8004e34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d64:	4b35      	ldr	r3, [pc, #212]	; (8004e3c <HAL_RCC_OscConfig+0x4f4>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1f0      	bne.n	8004d52 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d78:	d108      	bne.n	8004d8c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d7a:	4b30      	ldr	r3, [pc, #192]	; (8004e3c <HAL_RCC_OscConfig+0x4f4>)
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	492d      	ldr	r1, [pc, #180]	; (8004e3c <HAL_RCC_OscConfig+0x4f4>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d8c:	4b2b      	ldr	r3, [pc, #172]	; (8004e3c <HAL_RCC_OscConfig+0x4f4>)
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a19      	ldr	r1, [r3, #32]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9c:	430b      	orrs	r3, r1
 8004d9e:	4927      	ldr	r1, [pc, #156]	; (8004e3c <HAL_RCC_OscConfig+0x4f4>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004da4:	4b27      	ldr	r3, [pc, #156]	; (8004e44 <HAL_RCC_OscConfig+0x4fc>)
 8004da6:	2201      	movs	r2, #1
 8004da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004daa:	f7fe fa81 	bl	80032b0 <HAL_GetTick>
 8004dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004db0:	e008      	b.n	8004dc4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db2:	f7fe fa7d 	bl	80032b0 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e037      	b.n	8004e34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004dc4:	4b1d      	ldr	r3, [pc, #116]	; (8004e3c <HAL_RCC_OscConfig+0x4f4>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0f0      	beq.n	8004db2 <HAL_RCC_OscConfig+0x46a>
 8004dd0:	e02f      	b.n	8004e32 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dd2:	4b1c      	ldr	r3, [pc, #112]	; (8004e44 <HAL_RCC_OscConfig+0x4fc>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd8:	f7fe fa6a 	bl	80032b0 <HAL_GetTick>
 8004ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de0:	f7fe fa66 	bl	80032b0 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e020      	b.n	8004e34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004df2:	4b12      	ldr	r3, [pc, #72]	; (8004e3c <HAL_RCC_OscConfig+0x4f4>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1f0      	bne.n	8004de0 <HAL_RCC_OscConfig+0x498>
 8004dfe:	e018      	b.n	8004e32 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d101      	bne.n	8004e0c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e013      	b.n	8004e34 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e0c:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <HAL_RCC_OscConfig+0x4f4>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d106      	bne.n	8004e2e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d001      	beq.n	8004e32 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e000      	b.n	8004e34 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3718      	adds	r7, #24
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	40021000 	.word	0x40021000
 8004e40:	40007000 	.word	0x40007000
 8004e44:	42420060 	.word	0x42420060

08004e48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e0d0      	b.n	8004ffe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e5c:	4b6a      	ldr	r3, [pc, #424]	; (8005008 <HAL_RCC_ClockConfig+0x1c0>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0307 	and.w	r3, r3, #7
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d910      	bls.n	8004e8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e6a:	4b67      	ldr	r3, [pc, #412]	; (8005008 <HAL_RCC_ClockConfig+0x1c0>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f023 0207 	bic.w	r2, r3, #7
 8004e72:	4965      	ldr	r1, [pc, #404]	; (8005008 <HAL_RCC_ClockConfig+0x1c0>)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e7a:	4b63      	ldr	r3, [pc, #396]	; (8005008 <HAL_RCC_ClockConfig+0x1c0>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0307 	and.w	r3, r3, #7
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d001      	beq.n	8004e8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e0b8      	b.n	8004ffe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d020      	beq.n	8004eda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d005      	beq.n	8004eb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ea4:	4b59      	ldr	r3, [pc, #356]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	4a58      	ldr	r2, [pc, #352]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004eaa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004eae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0308 	and.w	r3, r3, #8
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d005      	beq.n	8004ec8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ebc:	4b53      	ldr	r3, [pc, #332]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	4a52      	ldr	r2, [pc, #328]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004ec2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004ec6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ec8:	4b50      	ldr	r3, [pc, #320]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	494d      	ldr	r1, [pc, #308]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d040      	beq.n	8004f68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d107      	bne.n	8004efe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eee:	4b47      	ldr	r3, [pc, #284]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d115      	bne.n	8004f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e07f      	b.n	8004ffe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d107      	bne.n	8004f16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f06:	4b41      	ldr	r3, [pc, #260]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d109      	bne.n	8004f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e073      	b.n	8004ffe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f16:	4b3d      	ldr	r3, [pc, #244]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e06b      	b.n	8004ffe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f26:	4b39      	ldr	r3, [pc, #228]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f023 0203 	bic.w	r2, r3, #3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	4936      	ldr	r1, [pc, #216]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f38:	f7fe f9ba 	bl	80032b0 <HAL_GetTick>
 8004f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f3e:	e00a      	b.n	8004f56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f40:	f7fe f9b6 	bl	80032b0 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e053      	b.n	8004ffe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f56:	4b2d      	ldr	r3, [pc, #180]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f003 020c 	and.w	r2, r3, #12
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d1eb      	bne.n	8004f40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f68:	4b27      	ldr	r3, [pc, #156]	; (8005008 <HAL_RCC_ClockConfig+0x1c0>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0307 	and.w	r3, r3, #7
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d210      	bcs.n	8004f98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f76:	4b24      	ldr	r3, [pc, #144]	; (8005008 <HAL_RCC_ClockConfig+0x1c0>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f023 0207 	bic.w	r2, r3, #7
 8004f7e:	4922      	ldr	r1, [pc, #136]	; (8005008 <HAL_RCC_ClockConfig+0x1c0>)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f86:	4b20      	ldr	r3, [pc, #128]	; (8005008 <HAL_RCC_ClockConfig+0x1c0>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0307 	and.w	r3, r3, #7
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d001      	beq.n	8004f98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e032      	b.n	8004ffe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d008      	beq.n	8004fb6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fa4:	4b19      	ldr	r3, [pc, #100]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	4916      	ldr	r1, [pc, #88]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0308 	and.w	r3, r3, #8
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d009      	beq.n	8004fd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004fc2:	4b12      	ldr	r3, [pc, #72]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	490e      	ldr	r1, [pc, #56]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004fd6:	f000 f821 	bl	800501c <HAL_RCC_GetSysClockFreq>
 8004fda:	4601      	mov	r1, r0
 8004fdc:	4b0b      	ldr	r3, [pc, #44]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	091b      	lsrs	r3, r3, #4
 8004fe2:	f003 030f 	and.w	r3, r3, #15
 8004fe6:	4a0a      	ldr	r2, [pc, #40]	; (8005010 <HAL_RCC_ClockConfig+0x1c8>)
 8004fe8:	5cd3      	ldrb	r3, [r2, r3]
 8004fea:	fa21 f303 	lsr.w	r3, r1, r3
 8004fee:	4a09      	ldr	r2, [pc, #36]	; (8005014 <HAL_RCC_ClockConfig+0x1cc>)
 8004ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ff2:	4b09      	ldr	r3, [pc, #36]	; (8005018 <HAL_RCC_ClockConfig+0x1d0>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7fe f918 	bl	800322c <HAL_InitTick>

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	40022000 	.word	0x40022000
 800500c:	40021000 	.word	0x40021000
 8005010:	080086bc 	.word	0x080086bc
 8005014:	20000008 	.word	0x20000008
 8005018:	2000000c 	.word	0x2000000c

0800501c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800501c:	b490      	push	{r4, r7}
 800501e:	b08a      	sub	sp, #40	; 0x28
 8005020:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005022:	4b2a      	ldr	r3, [pc, #168]	; (80050cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8005024:	1d3c      	adds	r4, r7, #4
 8005026:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005028:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800502c:	4b28      	ldr	r3, [pc, #160]	; (80050d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005032:	2300      	movs	r3, #0
 8005034:	61fb      	str	r3, [r7, #28]
 8005036:	2300      	movs	r3, #0
 8005038:	61bb      	str	r3, [r7, #24]
 800503a:	2300      	movs	r3, #0
 800503c:	627b      	str	r3, [r7, #36]	; 0x24
 800503e:	2300      	movs	r3, #0
 8005040:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005042:	2300      	movs	r3, #0
 8005044:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005046:	4b23      	ldr	r3, [pc, #140]	; (80050d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	f003 030c 	and.w	r3, r3, #12
 8005052:	2b04      	cmp	r3, #4
 8005054:	d002      	beq.n	800505c <HAL_RCC_GetSysClockFreq+0x40>
 8005056:	2b08      	cmp	r3, #8
 8005058:	d003      	beq.n	8005062 <HAL_RCC_GetSysClockFreq+0x46>
 800505a:	e02d      	b.n	80050b8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800505c:	4b1e      	ldr	r3, [pc, #120]	; (80050d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800505e:	623b      	str	r3, [r7, #32]
      break;
 8005060:	e02d      	b.n	80050be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	0c9b      	lsrs	r3, r3, #18
 8005066:	f003 030f 	and.w	r3, r3, #15
 800506a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800506e:	4413      	add	r3, r2
 8005070:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005074:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d013      	beq.n	80050a8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005080:	4b14      	ldr	r3, [pc, #80]	; (80050d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	0c5b      	lsrs	r3, r3, #17
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800508e:	4413      	add	r3, r2
 8005090:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005094:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	4a0f      	ldr	r2, [pc, #60]	; (80050d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800509a:	fb02 f203 	mul.w	r2, r2, r3
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24
 80050a6:	e004      	b.n	80050b2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	4a0c      	ldr	r2, [pc, #48]	; (80050dc <HAL_RCC_GetSysClockFreq+0xc0>)
 80050ac:	fb02 f303 	mul.w	r3, r2, r3
 80050b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	623b      	str	r3, [r7, #32]
      break;
 80050b6:	e002      	b.n	80050be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80050b8:	4b07      	ldr	r3, [pc, #28]	; (80050d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80050ba:	623b      	str	r3, [r7, #32]
      break;
 80050bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050be:	6a3b      	ldr	r3, [r7, #32]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3728      	adds	r7, #40	; 0x28
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bc90      	pop	{r4, r7}
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	080086a8 	.word	0x080086a8
 80050d0:	080086b8 	.word	0x080086b8
 80050d4:	40021000 	.word	0x40021000
 80050d8:	007a1200 	.word	0x007a1200
 80050dc:	003d0900 	.word	0x003d0900

080050e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050e0:	b480      	push	{r7}
 80050e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050e4:	4b02      	ldr	r3, [pc, #8]	; (80050f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80050e6:	681b      	ldr	r3, [r3, #0]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bc80      	pop	{r7}
 80050ee:	4770      	bx	lr
 80050f0:	20000008 	.word	0x20000008

080050f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050f8:	f7ff fff2 	bl	80050e0 <HAL_RCC_GetHCLKFreq>
 80050fc:	4601      	mov	r1, r0
 80050fe:	4b05      	ldr	r3, [pc, #20]	; (8005114 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	0a1b      	lsrs	r3, r3, #8
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	4a03      	ldr	r2, [pc, #12]	; (8005118 <HAL_RCC_GetPCLK1Freq+0x24>)
 800510a:	5cd3      	ldrb	r3, [r2, r3]
 800510c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005110:	4618      	mov	r0, r3
 8005112:	bd80      	pop	{r7, pc}
 8005114:	40021000 	.word	0x40021000
 8005118:	080086cc 	.word	0x080086cc

0800511c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005120:	f7ff ffde 	bl	80050e0 <HAL_RCC_GetHCLKFreq>
 8005124:	4601      	mov	r1, r0
 8005126:	4b05      	ldr	r3, [pc, #20]	; (800513c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	0adb      	lsrs	r3, r3, #11
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	4a03      	ldr	r2, [pc, #12]	; (8005140 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005132:	5cd3      	ldrb	r3, [r2, r3]
 8005134:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005138:	4618      	mov	r0, r3
 800513a:	bd80      	pop	{r7, pc}
 800513c:	40021000 	.word	0x40021000
 8005140:	080086cc 	.word	0x080086cc

08005144 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800514c:	4b0a      	ldr	r3, [pc, #40]	; (8005178 <RCC_Delay+0x34>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a0a      	ldr	r2, [pc, #40]	; (800517c <RCC_Delay+0x38>)
 8005152:	fba2 2303 	umull	r2, r3, r2, r3
 8005156:	0a5b      	lsrs	r3, r3, #9
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	fb02 f303 	mul.w	r3, r2, r3
 800515e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005160:	bf00      	nop
  }
  while (Delay --);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	1e5a      	subs	r2, r3, #1
 8005166:	60fa      	str	r2, [r7, #12]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1f9      	bne.n	8005160 <RCC_Delay+0x1c>
}
 800516c:	bf00      	nop
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	bc80      	pop	{r7}
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	20000008 	.word	0x20000008
 800517c:	10624dd3 	.word	0x10624dd3

08005180 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e041      	b.n	8005216 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7fd fec6 	bl	8002f38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3304      	adds	r3, #4
 80051bc:	4619      	mov	r1, r3
 80051be:	4610      	mov	r0, r2
 80051c0:	f000 fa64 	bl	800568c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
	...

08005220 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b01      	cmp	r3, #1
 8005232:	d001      	beq.n	8005238 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e03a      	b.n	80052ae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68da      	ldr	r2, [r3, #12]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f042 0201 	orr.w	r2, r2, #1
 800524e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a18      	ldr	r2, [pc, #96]	; (80052b8 <HAL_TIM_Base_Start_IT+0x98>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d00e      	beq.n	8005278 <HAL_TIM_Base_Start_IT+0x58>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005262:	d009      	beq.n	8005278 <HAL_TIM_Base_Start_IT+0x58>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a14      	ldr	r2, [pc, #80]	; (80052bc <HAL_TIM_Base_Start_IT+0x9c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d004      	beq.n	8005278 <HAL_TIM_Base_Start_IT+0x58>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a13      	ldr	r2, [pc, #76]	; (80052c0 <HAL_TIM_Base_Start_IT+0xa0>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d111      	bne.n	800529c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f003 0307 	and.w	r3, r3, #7
 8005282:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2b06      	cmp	r3, #6
 8005288:	d010      	beq.n	80052ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f042 0201 	orr.w	r2, r2, #1
 8005298:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800529a:	e007      	b.n	80052ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0201 	orr.w	r2, r2, #1
 80052aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bc80      	pop	{r7}
 80052b6:	4770      	bx	lr
 80052b8:	40012c00 	.word	0x40012c00
 80052bc:	40000400 	.word	0x40000400
 80052c0:	40000800 	.word	0x40000800

080052c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d122      	bne.n	8005320 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d11b      	bne.n	8005320 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f06f 0202 	mvn.w	r2, #2
 80052f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	f003 0303 	and.w	r3, r3, #3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f9a4 	bl	8005654 <HAL_TIM_IC_CaptureCallback>
 800530c:	e005      	b.n	800531a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f997 	bl	8005642 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f9a6 	bl	8005666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	f003 0304 	and.w	r3, r3, #4
 800532a:	2b04      	cmp	r3, #4
 800532c:	d122      	bne.n	8005374 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f003 0304 	and.w	r3, r3, #4
 8005338:	2b04      	cmp	r3, #4
 800533a:	d11b      	bne.n	8005374 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f06f 0204 	mvn.w	r2, #4
 8005344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2202      	movs	r2, #2
 800534a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f97a 	bl	8005654 <HAL_TIM_IC_CaptureCallback>
 8005360:	e005      	b.n	800536e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f96d 	bl	8005642 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f97c 	bl	8005666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	f003 0308 	and.w	r3, r3, #8
 800537e:	2b08      	cmp	r3, #8
 8005380:	d122      	bne.n	80053c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	f003 0308 	and.w	r3, r3, #8
 800538c:	2b08      	cmp	r3, #8
 800538e:	d11b      	bne.n	80053c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f06f 0208 	mvn.w	r2, #8
 8005398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2204      	movs	r2, #4
 800539e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	f003 0303 	and.w	r3, r3, #3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f950 	bl	8005654 <HAL_TIM_IC_CaptureCallback>
 80053b4:	e005      	b.n	80053c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f943 	bl	8005642 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f952 	bl	8005666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f003 0310 	and.w	r3, r3, #16
 80053d2:	2b10      	cmp	r3, #16
 80053d4:	d122      	bne.n	800541c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	f003 0310 	and.w	r3, r3, #16
 80053e0:	2b10      	cmp	r3, #16
 80053e2:	d11b      	bne.n	800541c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f06f 0210 	mvn.w	r2, #16
 80053ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2208      	movs	r2, #8
 80053f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d003      	beq.n	800540a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f926 	bl	8005654 <HAL_TIM_IC_CaptureCallback>
 8005408:	e005      	b.n	8005416 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f919 	bl	8005642 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 f928 	bl	8005666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b01      	cmp	r3, #1
 8005428:	d10e      	bne.n	8005448 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	2b01      	cmp	r3, #1
 8005436:	d107      	bne.n	8005448 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f06f 0201 	mvn.w	r2, #1
 8005440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f7fd fca0 	bl	8002d88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005452:	2b80      	cmp	r3, #128	; 0x80
 8005454:	d10e      	bne.n	8005474 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005460:	2b80      	cmp	r3, #128	; 0x80
 8005462:	d107      	bne.n	8005474 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800546c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 fa6b 	bl	800594a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547e:	2b40      	cmp	r3, #64	; 0x40
 8005480:	d10e      	bne.n	80054a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548c:	2b40      	cmp	r3, #64	; 0x40
 800548e:	d107      	bne.n	80054a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f8ec 	bl	8005678 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	f003 0320 	and.w	r3, r3, #32
 80054aa:	2b20      	cmp	r3, #32
 80054ac:	d10e      	bne.n	80054cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f003 0320 	and.w	r3, r3, #32
 80054b8:	2b20      	cmp	r3, #32
 80054ba:	d107      	bne.n	80054cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f06f 0220 	mvn.w	r2, #32
 80054c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fa36 	bl	8005938 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054cc:	bf00      	nop
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d101      	bne.n	80054ec <HAL_TIM_ConfigClockSource+0x18>
 80054e8:	2302      	movs	r3, #2
 80054ea:	e0a6      	b.n	800563a <HAL_TIM_ConfigClockSource+0x166>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800550a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005512:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b40      	cmp	r3, #64	; 0x40
 8005522:	d067      	beq.n	80055f4 <HAL_TIM_ConfigClockSource+0x120>
 8005524:	2b40      	cmp	r3, #64	; 0x40
 8005526:	d80b      	bhi.n	8005540 <HAL_TIM_ConfigClockSource+0x6c>
 8005528:	2b10      	cmp	r3, #16
 800552a:	d073      	beq.n	8005614 <HAL_TIM_ConfigClockSource+0x140>
 800552c:	2b10      	cmp	r3, #16
 800552e:	d802      	bhi.n	8005536 <HAL_TIM_ConfigClockSource+0x62>
 8005530:	2b00      	cmp	r3, #0
 8005532:	d06f      	beq.n	8005614 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005534:	e078      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005536:	2b20      	cmp	r3, #32
 8005538:	d06c      	beq.n	8005614 <HAL_TIM_ConfigClockSource+0x140>
 800553a:	2b30      	cmp	r3, #48	; 0x30
 800553c:	d06a      	beq.n	8005614 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800553e:	e073      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005540:	2b70      	cmp	r3, #112	; 0x70
 8005542:	d00d      	beq.n	8005560 <HAL_TIM_ConfigClockSource+0x8c>
 8005544:	2b70      	cmp	r3, #112	; 0x70
 8005546:	d804      	bhi.n	8005552 <HAL_TIM_ConfigClockSource+0x7e>
 8005548:	2b50      	cmp	r3, #80	; 0x50
 800554a:	d033      	beq.n	80055b4 <HAL_TIM_ConfigClockSource+0xe0>
 800554c:	2b60      	cmp	r3, #96	; 0x60
 800554e:	d041      	beq.n	80055d4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005550:	e06a      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005556:	d066      	beq.n	8005626 <HAL_TIM_ConfigClockSource+0x152>
 8005558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800555c:	d017      	beq.n	800558e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800555e:	e063      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6818      	ldr	r0, [r3, #0]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	6899      	ldr	r1, [r3, #8]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f000 f965 	bl	800583e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005582:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	609a      	str	r2, [r3, #8]
      break;
 800558c:	e04c      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6818      	ldr	r0, [r3, #0]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	6899      	ldr	r1, [r3, #8]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f000 f94e 	bl	800583e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055b0:	609a      	str	r2, [r3, #8]
      break;
 80055b2:	e039      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6818      	ldr	r0, [r3, #0]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	6859      	ldr	r1, [r3, #4]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	461a      	mov	r2, r3
 80055c2:	f000 f8c5 	bl	8005750 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2150      	movs	r1, #80	; 0x50
 80055cc:	4618      	mov	r0, r3
 80055ce:	f000 f91c 	bl	800580a <TIM_ITRx_SetConfig>
      break;
 80055d2:	e029      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6818      	ldr	r0, [r3, #0]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	6859      	ldr	r1, [r3, #4]
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	461a      	mov	r2, r3
 80055e2:	f000 f8e3 	bl	80057ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2160      	movs	r1, #96	; 0x60
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 f90c 	bl	800580a <TIM_ITRx_SetConfig>
      break;
 80055f2:	e019      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6818      	ldr	r0, [r3, #0]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	6859      	ldr	r1, [r3, #4]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	461a      	mov	r2, r3
 8005602:	f000 f8a5 	bl	8005750 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2140      	movs	r1, #64	; 0x40
 800560c:	4618      	mov	r0, r3
 800560e:	f000 f8fc 	bl	800580a <TIM_ITRx_SetConfig>
      break;
 8005612:	e009      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4619      	mov	r1, r3
 800561e:	4610      	mov	r0, r2
 8005620:	f000 f8f3 	bl	800580a <TIM_ITRx_SetConfig>
        break;
 8005624:	e000      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005626:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800564a:	bf00      	nop
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	bc80      	pop	{r7}
 8005652:	4770      	bx	lr

08005654 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	bc80      	pop	{r7}
 8005664:	4770      	bx	lr

08005666 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005666:	b480      	push	{r7}
 8005668:	b083      	sub	sp, #12
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800566e:	bf00      	nop
 8005670:	370c      	adds	r7, #12
 8005672:	46bd      	mov	sp, r7
 8005674:	bc80      	pop	{r7}
 8005676:	4770      	bx	lr

08005678 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	bc80      	pop	{r7}
 8005688:	4770      	bx	lr
	...

0800568c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a29      	ldr	r2, [pc, #164]	; (8005744 <TIM_Base_SetConfig+0xb8>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d00b      	beq.n	80056bc <TIM_Base_SetConfig+0x30>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056aa:	d007      	beq.n	80056bc <TIM_Base_SetConfig+0x30>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a26      	ldr	r2, [pc, #152]	; (8005748 <TIM_Base_SetConfig+0xbc>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d003      	beq.n	80056bc <TIM_Base_SetConfig+0x30>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a25      	ldr	r2, [pc, #148]	; (800574c <TIM_Base_SetConfig+0xc0>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d108      	bne.n	80056ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a1c      	ldr	r2, [pc, #112]	; (8005744 <TIM_Base_SetConfig+0xb8>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00b      	beq.n	80056ee <TIM_Base_SetConfig+0x62>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056dc:	d007      	beq.n	80056ee <TIM_Base_SetConfig+0x62>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a19      	ldr	r2, [pc, #100]	; (8005748 <TIM_Base_SetConfig+0xbc>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d003      	beq.n	80056ee <TIM_Base_SetConfig+0x62>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a18      	ldr	r2, [pc, #96]	; (800574c <TIM_Base_SetConfig+0xc0>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d108      	bne.n	8005700 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	4313      	orrs	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a07      	ldr	r2, [pc, #28]	; (8005744 <TIM_Base_SetConfig+0xb8>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d103      	bne.n	8005734 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	691a      	ldr	r2, [r3, #16]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	615a      	str	r2, [r3, #20]
}
 800573a:	bf00      	nop
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	bc80      	pop	{r7}
 8005742:	4770      	bx	lr
 8005744:	40012c00 	.word	0x40012c00
 8005748:	40000400 	.word	0x40000400
 800574c:	40000800 	.word	0x40000800

08005750 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005750:	b480      	push	{r7}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	f023 0201 	bic.w	r2, r3, #1
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800577a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	011b      	lsls	r3, r3, #4
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	4313      	orrs	r3, r2
 8005784:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f023 030a 	bic.w	r3, r3, #10
 800578c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	4313      	orrs	r3, r2
 8005794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	621a      	str	r2, [r3, #32]
}
 80057a2:	bf00      	nop
 80057a4:	371c      	adds	r7, #28
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bc80      	pop	{r7}
 80057aa:	4770      	bx	lr

080057ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b087      	sub	sp, #28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	f023 0210 	bic.w	r2, r3, #16
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	031b      	lsls	r3, r3, #12
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	4313      	orrs	r3, r2
 80057e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	011b      	lsls	r3, r3, #4
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	621a      	str	r2, [r3, #32]
}
 8005800:	bf00      	nop
 8005802:	371c      	adds	r7, #28
 8005804:	46bd      	mov	sp, r7
 8005806:	bc80      	pop	{r7}
 8005808:	4770      	bx	lr

0800580a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800580a:	b480      	push	{r7}
 800580c:	b085      	sub	sp, #20
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005820:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4313      	orrs	r3, r2
 8005828:	f043 0307 	orr.w	r3, r3, #7
 800582c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	609a      	str	r2, [r3, #8]
}
 8005834:	bf00      	nop
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	bc80      	pop	{r7}
 800583c:	4770      	bx	lr

0800583e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800583e:	b480      	push	{r7}
 8005840:	b087      	sub	sp, #28
 8005842:	af00      	add	r7, sp, #0
 8005844:	60f8      	str	r0, [r7, #12]
 8005846:	60b9      	str	r1, [r7, #8]
 8005848:	607a      	str	r2, [r7, #4]
 800584a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005858:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	021a      	lsls	r2, r3, #8
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	431a      	orrs	r2, r3
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	4313      	orrs	r3, r2
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	4313      	orrs	r3, r2
 800586a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	609a      	str	r2, [r3, #8]
}
 8005872:	bf00      	nop
 8005874:	371c      	adds	r7, #28
 8005876:	46bd      	mov	sp, r7
 8005878:	bc80      	pop	{r7}
 800587a:	4770      	bx	lr

0800587c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800588c:	2b01      	cmp	r3, #1
 800588e:	d101      	bne.n	8005894 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005890:	2302      	movs	r3, #2
 8005892:	e046      	b.n	8005922 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a16      	ldr	r2, [pc, #88]	; (800592c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d00e      	beq.n	80058f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058e0:	d009      	beq.n	80058f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a12      	ldr	r2, [pc, #72]	; (8005930 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d004      	beq.n	80058f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a10      	ldr	r2, [pc, #64]	; (8005934 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d10c      	bne.n	8005910 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	4313      	orrs	r3, r2
 8005906:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	bc80      	pop	{r7}
 800592a:	4770      	bx	lr
 800592c:	40012c00 	.word	0x40012c00
 8005930:	40000400 	.word	0x40000400
 8005934:	40000800 	.word	0x40000800

08005938 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	bc80      	pop	{r7}
 8005948:	4770      	bx	lr

0800594a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800594a:	b480      	push	{r7}
 800594c:	b083      	sub	sp, #12
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005952:	bf00      	nop
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	bc80      	pop	{r7}
 800595a:	4770      	bx	lr

0800595c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e03f      	b.n	80059ee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d106      	bne.n	8005988 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7fd fafe 	bl	8002f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2224      	movs	r2, #36	; 0x24
 800598c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68da      	ldr	r2, [r3, #12]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800599e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 fb39 	bl	8006018 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	691a      	ldr	r2, [r3, #16]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	695a      	ldr	r2, [r3, #20]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68da      	ldr	r2, [r3, #12]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2220      	movs	r2, #32
 80059e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2220      	movs	r2, #32
 80059e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3708      	adds	r7, #8
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b08a      	sub	sp, #40	; 0x28
 80059fa:	af02      	add	r7, sp, #8
 80059fc:	60f8      	str	r0, [r7, #12]
 80059fe:	60b9      	str	r1, [r7, #8]
 8005a00:	603b      	str	r3, [r7, #0]
 8005a02:	4613      	mov	r3, r2
 8005a04:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a06:	2300      	movs	r3, #0
 8005a08:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b20      	cmp	r3, #32
 8005a14:	d17c      	bne.n	8005b10 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <HAL_UART_Transmit+0x2c>
 8005a1c:	88fb      	ldrh	r3, [r7, #6]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e075      	b.n	8005b12 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d101      	bne.n	8005a34 <HAL_UART_Transmit+0x3e>
 8005a30:	2302      	movs	r3, #2
 8005a32:	e06e      	b.n	8005b12 <HAL_UART_Transmit+0x11c>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2221      	movs	r2, #33	; 0x21
 8005a46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005a4a:	f7fd fc31 	bl	80032b0 <HAL_GetTick>
 8005a4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	88fa      	ldrh	r2, [r7, #6]
 8005a54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	88fa      	ldrh	r2, [r7, #6]
 8005a5a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a64:	d108      	bne.n	8005a78 <HAL_UART_Transmit+0x82>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d104      	bne.n	8005a78 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	61bb      	str	r3, [r7, #24]
 8005a76:	e003      	b.n	8005a80 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005a88:	e02a      	b.n	8005ae0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2200      	movs	r2, #0
 8005a92:	2180      	movs	r1, #128	; 0x80
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 f95c 	bl	8005d52 <UART_WaitOnFlagUntilTimeout>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d001      	beq.n	8005aa4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e036      	b.n	8005b12 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10b      	bne.n	8005ac2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ab8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	3302      	adds	r3, #2
 8005abe:	61bb      	str	r3, [r7, #24]
 8005ac0:	e007      	b.n	8005ad2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	781a      	ldrb	r2, [r3, #0]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1cf      	bne.n	8005a8a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	9300      	str	r3, [sp, #0]
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2200      	movs	r2, #0
 8005af2:	2140      	movs	r1, #64	; 0x40
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f000 f92c 	bl	8005d52 <UART_WaitOnFlagUntilTimeout>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d001      	beq.n	8005b04 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e006      	b.n	8005b12 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2220      	movs	r2, #32
 8005b08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	e000      	b.n	8005b12 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b10:	2302      	movs	r3, #2
  }
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3720      	adds	r7, #32
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
	...

08005b1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b088      	sub	sp, #32
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	f003 030f 	and.w	r3, r3, #15
 8005b4a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10d      	bne.n	8005b6e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	f003 0320 	and.w	r3, r3, #32
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d008      	beq.n	8005b6e <HAL_UART_IRQHandler+0x52>
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	f003 0320 	and.w	r3, r3, #32
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f9d5 	bl	8005f16 <UART_Receive_IT>
      return;
 8005b6c:	e0d1      	b.n	8005d12 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f000 80b0 	beq.w	8005cd6 <HAL_UART_IRQHandler+0x1ba>
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d105      	bne.n	8005b8c <HAL_UART_IRQHandler+0x70>
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f000 80a5 	beq.w	8005cd6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00a      	beq.n	8005bac <HAL_UART_IRQHandler+0x90>
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d005      	beq.n	8005bac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba4:	f043 0201 	orr.w	r2, r3, #1
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	f003 0304 	and.w	r3, r3, #4
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00a      	beq.n	8005bcc <HAL_UART_IRQHandler+0xb0>
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d005      	beq.n	8005bcc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc4:	f043 0202 	orr.w	r2, r3, #2
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00a      	beq.n	8005bec <HAL_UART_IRQHandler+0xd0>
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d005      	beq.n	8005bec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be4:	f043 0204 	orr.w	r2, r3, #4
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	f003 0308 	and.w	r3, r3, #8
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00f      	beq.n	8005c16 <HAL_UART_IRQHandler+0xfa>
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	f003 0320 	and.w	r3, r3, #32
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d104      	bne.n	8005c0a <HAL_UART_IRQHandler+0xee>
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d005      	beq.n	8005c16 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c0e:	f043 0208 	orr.w	r2, r3, #8
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d078      	beq.n	8005d10 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	f003 0320 	and.w	r3, r3, #32
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d007      	beq.n	8005c38 <HAL_UART_IRQHandler+0x11c>
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	f003 0320 	and.w	r3, r3, #32
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d002      	beq.n	8005c38 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f96f 	bl	8005f16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	bf14      	ite	ne
 8005c46:	2301      	movne	r3, #1
 8005c48:	2300      	moveq	r3, #0
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c52:	f003 0308 	and.w	r3, r3, #8
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d102      	bne.n	8005c60 <HAL_UART_IRQHandler+0x144>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d031      	beq.n	8005cc4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 f8c0 	bl	8005de6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d023      	beq.n	8005cbc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	695a      	ldr	r2, [r3, #20]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c82:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d013      	beq.n	8005cb4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c90:	4a21      	ldr	r2, [pc, #132]	; (8005d18 <HAL_UART_IRQHandler+0x1fc>)
 8005c92:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7fd fc43 	bl	8003524 <HAL_DMA_Abort_IT>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d016      	beq.n	8005cd2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005cae:	4610      	mov	r0, r2
 8005cb0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb2:	e00e      	b.n	8005cd2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 f843 	bl	8005d40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cba:	e00a      	b.n	8005cd2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 f83f 	bl	8005d40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc2:	e006      	b.n	8005cd2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 f83b 	bl	8005d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005cd0:	e01e      	b.n	8005d10 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cd2:	bf00      	nop
    return;
 8005cd4:	e01c      	b.n	8005d10 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d008      	beq.n	8005cf2 <HAL_UART_IRQHandler+0x1d6>
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d003      	beq.n	8005cf2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f8ac 	bl	8005e48 <UART_Transmit_IT>
    return;
 8005cf0:	e00f      	b.n	8005d12 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00a      	beq.n	8005d12 <HAL_UART_IRQHandler+0x1f6>
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d005      	beq.n	8005d12 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f8ed 	bl	8005ee6 <UART_EndTransmit_IT>
    return;
 8005d0c:	bf00      	nop
 8005d0e:	e000      	b.n	8005d12 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005d10:	bf00      	nop
  }
}
 8005d12:	3720      	adds	r7, #32
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	08005e21 	.word	0x08005e21

08005d1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bc80      	pop	{r7}
 8005d2c:	4770      	bx	lr

08005d2e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b083      	sub	sp, #12
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005d36:	bf00      	nop
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bc80      	pop	{r7}
 8005d3e:	4770      	bx	lr

08005d40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bc80      	pop	{r7}
 8005d50:	4770      	bx	lr

08005d52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b084      	sub	sp, #16
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	60f8      	str	r0, [r7, #12]
 8005d5a:	60b9      	str	r1, [r7, #8]
 8005d5c:	603b      	str	r3, [r7, #0]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d62:	e02c      	b.n	8005dbe <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6a:	d028      	beq.n	8005dbe <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d007      	beq.n	8005d82 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d72:	f7fd fa9d 	bl	80032b0 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d21d      	bcs.n	8005dbe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68da      	ldr	r2, [r3, #12]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d90:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	695a      	ldr	r2, [r3, #20]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 0201 	bic.w	r2, r2, #1
 8005da0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2220      	movs	r2, #32
 8005da6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2220      	movs	r2, #32
 8005dae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e00f      	b.n	8005dde <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	bf0c      	ite	eq
 8005dce:	2301      	moveq	r3, #1
 8005dd0:	2300      	movne	r3, #0
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	79fb      	ldrb	r3, [r7, #7]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d0c3      	beq.n	8005d64 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b083      	sub	sp, #12
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68da      	ldr	r2, [r3, #12]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005dfc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	695a      	ldr	r2, [r3, #20]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0201 	bic.w	r2, r2, #1
 8005e0c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2220      	movs	r2, #32
 8005e12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005e16:	bf00      	nop
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bc80      	pop	{r7}
 8005e1e:	4770      	bx	lr

08005e20 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f7ff ff80 	bl	8005d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e40:	bf00      	nop
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b21      	cmp	r3, #33	; 0x21
 8005e5a:	d13e      	bne.n	8005eda <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e64:	d114      	bne.n	8005e90 <UART_Transmit_IT+0x48>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d110      	bne.n	8005e90 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	881b      	ldrh	r3, [r3, #0]
 8005e78:	461a      	mov	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e82:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	1c9a      	adds	r2, r3, #2
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	621a      	str	r2, [r3, #32]
 8005e8e:	e008      	b.n	8005ea2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	1c59      	adds	r1, r3, #1
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	6211      	str	r1, [r2, #32]
 8005e9a:	781a      	ldrb	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	4619      	mov	r1, r3
 8005eb0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10f      	bne.n	8005ed6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68da      	ldr	r2, [r3, #12]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ec4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68da      	ldr	r2, [r3, #12]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ed4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	e000      	b.n	8005edc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005eda:	2302      	movs	r3, #2
  }
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3714      	adds	r7, #20
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bc80      	pop	{r7}
 8005ee4:	4770      	bx	lr

08005ee6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b082      	sub	sp, #8
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68da      	ldr	r2, [r3, #12]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005efc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f7ff ff08 	bl	8005d1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3708      	adds	r7, #8
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b084      	sub	sp, #16
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b22      	cmp	r3, #34	; 0x22
 8005f28:	d170      	bne.n	800600c <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f32:	d117      	bne.n	8005f64 <UART_Receive_IT+0x4e>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d113      	bne.n	8005f64 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f44:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5c:	1c9a      	adds	r2, r3, #2
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	629a      	str	r2, [r3, #40]	; 0x28
 8005f62:	e026      	b.n	8005fb2 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f68:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f76:	d007      	beq.n	8005f88 <UART_Receive_IT+0x72>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10a      	bne.n	8005f96 <UART_Receive_IT+0x80>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d106      	bne.n	8005f96 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	701a      	strb	r2, [r3, #0]
 8005f94:	e008      	b.n	8005fa8 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fac:	1c5a      	adds	r2, r3, #1
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d120      	bne.n	8006008 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68da      	ldr	r2, [r3, #12]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 0220 	bic.w	r2, r2, #32
 8005fd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68da      	ldr	r2, [r3, #12]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fe4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	695a      	ldr	r2, [r3, #20]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 0201 	bic.w	r2, r2, #1
 8005ff4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7ff fe95 	bl	8005d2e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006004:	2300      	movs	r3, #0
 8006006:	e002      	b.n	800600e <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8006008:	2300      	movs	r3, #0
 800600a:	e000      	b.n	800600e <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800600c:	2302      	movs	r3, #2
  }
}
 800600e:	4618      	mov	r0, r3
 8006010:	3710      	adds	r7, #16
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
	...

08006018 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	689a      	ldr	r2, [r3, #8]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	431a      	orrs	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	4313      	orrs	r3, r2
 8006046:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006052:	f023 030c 	bic.w	r3, r3, #12
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	6812      	ldr	r2, [r2, #0]
 800605a:	68b9      	ldr	r1, [r7, #8]
 800605c:	430b      	orrs	r3, r1
 800605e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	699a      	ldr	r2, [r3, #24]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	430a      	orrs	r2, r1
 8006074:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a2c      	ldr	r2, [pc, #176]	; (800612c <UART_SetConfig+0x114>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d103      	bne.n	8006088 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006080:	f7ff f84c 	bl	800511c <HAL_RCC_GetPCLK2Freq>
 8006084:	60f8      	str	r0, [r7, #12]
 8006086:	e002      	b.n	800608e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006088:	f7ff f834 	bl	80050f4 <HAL_RCC_GetPCLK1Freq>
 800608c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	4613      	mov	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4413      	add	r3, r2
 8006096:	009a      	lsls	r2, r3, #2
 8006098:	441a      	add	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060a4:	4a22      	ldr	r2, [pc, #136]	; (8006130 <UART_SetConfig+0x118>)
 80060a6:	fba2 2303 	umull	r2, r3, r2, r3
 80060aa:	095b      	lsrs	r3, r3, #5
 80060ac:	0119      	lsls	r1, r3, #4
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	4613      	mov	r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4413      	add	r3, r2
 80060b6:	009a      	lsls	r2, r3, #2
 80060b8:	441a      	add	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80060c4:	4b1a      	ldr	r3, [pc, #104]	; (8006130 <UART_SetConfig+0x118>)
 80060c6:	fba3 0302 	umull	r0, r3, r3, r2
 80060ca:	095b      	lsrs	r3, r3, #5
 80060cc:	2064      	movs	r0, #100	; 0x64
 80060ce:	fb00 f303 	mul.w	r3, r0, r3
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	011b      	lsls	r3, r3, #4
 80060d6:	3332      	adds	r3, #50	; 0x32
 80060d8:	4a15      	ldr	r2, [pc, #84]	; (8006130 <UART_SetConfig+0x118>)
 80060da:	fba2 2303 	umull	r2, r3, r2, r3
 80060de:	095b      	lsrs	r3, r3, #5
 80060e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060e4:	4419      	add	r1, r3
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	4613      	mov	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	009a      	lsls	r2, r3, #2
 80060f0:	441a      	add	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80060fc:	4b0c      	ldr	r3, [pc, #48]	; (8006130 <UART_SetConfig+0x118>)
 80060fe:	fba3 0302 	umull	r0, r3, r3, r2
 8006102:	095b      	lsrs	r3, r3, #5
 8006104:	2064      	movs	r0, #100	; 0x64
 8006106:	fb00 f303 	mul.w	r3, r0, r3
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	011b      	lsls	r3, r3, #4
 800610e:	3332      	adds	r3, #50	; 0x32
 8006110:	4a07      	ldr	r2, [pc, #28]	; (8006130 <UART_SetConfig+0x118>)
 8006112:	fba2 2303 	umull	r2, r3, r2, r3
 8006116:	095b      	lsrs	r3, r3, #5
 8006118:	f003 020f 	and.w	r2, r3, #15
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	440a      	add	r2, r1
 8006122:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006124:	bf00      	nop
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	40013800 	.word	0x40013800
 8006130:	51eb851f 	.word	0x51eb851f

08006134 <__errno>:
 8006134:	4b01      	ldr	r3, [pc, #4]	; (800613c <__errno+0x8>)
 8006136:	6818      	ldr	r0, [r3, #0]
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	20000014 	.word	0x20000014

08006140 <__libc_init_array>:
 8006140:	b570      	push	{r4, r5, r6, lr}
 8006142:	2500      	movs	r5, #0
 8006144:	4e0c      	ldr	r6, [pc, #48]	; (8006178 <__libc_init_array+0x38>)
 8006146:	4c0d      	ldr	r4, [pc, #52]	; (800617c <__libc_init_array+0x3c>)
 8006148:	1ba4      	subs	r4, r4, r6
 800614a:	10a4      	asrs	r4, r4, #2
 800614c:	42a5      	cmp	r5, r4
 800614e:	d109      	bne.n	8006164 <__libc_init_array+0x24>
 8006150:	f002 f8a4 	bl	800829c <_init>
 8006154:	2500      	movs	r5, #0
 8006156:	4e0a      	ldr	r6, [pc, #40]	; (8006180 <__libc_init_array+0x40>)
 8006158:	4c0a      	ldr	r4, [pc, #40]	; (8006184 <__libc_init_array+0x44>)
 800615a:	1ba4      	subs	r4, r4, r6
 800615c:	10a4      	asrs	r4, r4, #2
 800615e:	42a5      	cmp	r5, r4
 8006160:	d105      	bne.n	800616e <__libc_init_array+0x2e>
 8006162:	bd70      	pop	{r4, r5, r6, pc}
 8006164:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006168:	4798      	blx	r3
 800616a:	3501      	adds	r5, #1
 800616c:	e7ee      	b.n	800614c <__libc_init_array+0xc>
 800616e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006172:	4798      	blx	r3
 8006174:	3501      	adds	r5, #1
 8006176:	e7f2      	b.n	800615e <__libc_init_array+0x1e>
 8006178:	08008938 	.word	0x08008938
 800617c:	08008938 	.word	0x08008938
 8006180:	08008938 	.word	0x08008938
 8006184:	0800893c 	.word	0x0800893c

08006188 <memset>:
 8006188:	4603      	mov	r3, r0
 800618a:	4402      	add	r2, r0
 800618c:	4293      	cmp	r3, r2
 800618e:	d100      	bne.n	8006192 <memset+0xa>
 8006190:	4770      	bx	lr
 8006192:	f803 1b01 	strb.w	r1, [r3], #1
 8006196:	e7f9      	b.n	800618c <memset+0x4>

08006198 <__cvt>:
 8006198:	2b00      	cmp	r3, #0
 800619a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800619e:	461e      	mov	r6, r3
 80061a0:	bfbb      	ittet	lt
 80061a2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80061a6:	461e      	movlt	r6, r3
 80061a8:	2300      	movge	r3, #0
 80061aa:	232d      	movlt	r3, #45	; 0x2d
 80061ac:	b088      	sub	sp, #32
 80061ae:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80061b0:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80061b4:	f027 0720 	bic.w	r7, r7, #32
 80061b8:	2f46      	cmp	r7, #70	; 0x46
 80061ba:	4614      	mov	r4, r2
 80061bc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80061be:	700b      	strb	r3, [r1, #0]
 80061c0:	d004      	beq.n	80061cc <__cvt+0x34>
 80061c2:	2f45      	cmp	r7, #69	; 0x45
 80061c4:	d100      	bne.n	80061c8 <__cvt+0x30>
 80061c6:	3501      	adds	r5, #1
 80061c8:	2302      	movs	r3, #2
 80061ca:	e000      	b.n	80061ce <__cvt+0x36>
 80061cc:	2303      	movs	r3, #3
 80061ce:	aa07      	add	r2, sp, #28
 80061d0:	9204      	str	r2, [sp, #16]
 80061d2:	aa06      	add	r2, sp, #24
 80061d4:	e9cd a202 	strd	sl, r2, [sp, #8]
 80061d8:	e9cd 3500 	strd	r3, r5, [sp]
 80061dc:	4622      	mov	r2, r4
 80061de:	4633      	mov	r3, r6
 80061e0:	f000 fd1e 	bl	8006c20 <_dtoa_r>
 80061e4:	2f47      	cmp	r7, #71	; 0x47
 80061e6:	4680      	mov	r8, r0
 80061e8:	d102      	bne.n	80061f0 <__cvt+0x58>
 80061ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80061ec:	07db      	lsls	r3, r3, #31
 80061ee:	d526      	bpl.n	800623e <__cvt+0xa6>
 80061f0:	2f46      	cmp	r7, #70	; 0x46
 80061f2:	eb08 0905 	add.w	r9, r8, r5
 80061f6:	d111      	bne.n	800621c <__cvt+0x84>
 80061f8:	f898 3000 	ldrb.w	r3, [r8]
 80061fc:	2b30      	cmp	r3, #48	; 0x30
 80061fe:	d10a      	bne.n	8006216 <__cvt+0x7e>
 8006200:	2200      	movs	r2, #0
 8006202:	2300      	movs	r3, #0
 8006204:	4620      	mov	r0, r4
 8006206:	4631      	mov	r1, r6
 8006208:	f7fa fbce 	bl	80009a8 <__aeabi_dcmpeq>
 800620c:	b918      	cbnz	r0, 8006216 <__cvt+0x7e>
 800620e:	f1c5 0501 	rsb	r5, r5, #1
 8006212:	f8ca 5000 	str.w	r5, [sl]
 8006216:	f8da 3000 	ldr.w	r3, [sl]
 800621a:	4499      	add	r9, r3
 800621c:	2200      	movs	r2, #0
 800621e:	2300      	movs	r3, #0
 8006220:	4620      	mov	r0, r4
 8006222:	4631      	mov	r1, r6
 8006224:	f7fa fbc0 	bl	80009a8 <__aeabi_dcmpeq>
 8006228:	b938      	cbnz	r0, 800623a <__cvt+0xa2>
 800622a:	2230      	movs	r2, #48	; 0x30
 800622c:	9b07      	ldr	r3, [sp, #28]
 800622e:	454b      	cmp	r3, r9
 8006230:	d205      	bcs.n	800623e <__cvt+0xa6>
 8006232:	1c59      	adds	r1, r3, #1
 8006234:	9107      	str	r1, [sp, #28]
 8006236:	701a      	strb	r2, [r3, #0]
 8006238:	e7f8      	b.n	800622c <__cvt+0x94>
 800623a:	f8cd 901c 	str.w	r9, [sp, #28]
 800623e:	4640      	mov	r0, r8
 8006240:	9b07      	ldr	r3, [sp, #28]
 8006242:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006244:	eba3 0308 	sub.w	r3, r3, r8
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	b008      	add	sp, #32
 800624c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006250 <__exponent>:
 8006250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006252:	2900      	cmp	r1, #0
 8006254:	bfb4      	ite	lt
 8006256:	232d      	movlt	r3, #45	; 0x2d
 8006258:	232b      	movge	r3, #43	; 0x2b
 800625a:	4604      	mov	r4, r0
 800625c:	bfb8      	it	lt
 800625e:	4249      	neglt	r1, r1
 8006260:	2909      	cmp	r1, #9
 8006262:	f804 2b02 	strb.w	r2, [r4], #2
 8006266:	7043      	strb	r3, [r0, #1]
 8006268:	dd21      	ble.n	80062ae <__exponent+0x5e>
 800626a:	f10d 0307 	add.w	r3, sp, #7
 800626e:	461f      	mov	r7, r3
 8006270:	260a      	movs	r6, #10
 8006272:	fb91 f5f6 	sdiv	r5, r1, r6
 8006276:	fb06 1115 	mls	r1, r6, r5, r1
 800627a:	2d09      	cmp	r5, #9
 800627c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8006280:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006284:	f103 32ff 	add.w	r2, r3, #4294967295
 8006288:	4629      	mov	r1, r5
 800628a:	dc09      	bgt.n	80062a0 <__exponent+0x50>
 800628c:	3130      	adds	r1, #48	; 0x30
 800628e:	3b02      	subs	r3, #2
 8006290:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006294:	42bb      	cmp	r3, r7
 8006296:	4622      	mov	r2, r4
 8006298:	d304      	bcc.n	80062a4 <__exponent+0x54>
 800629a:	1a10      	subs	r0, r2, r0
 800629c:	b003      	add	sp, #12
 800629e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062a0:	4613      	mov	r3, r2
 80062a2:	e7e6      	b.n	8006272 <__exponent+0x22>
 80062a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062a8:	f804 2b01 	strb.w	r2, [r4], #1
 80062ac:	e7f2      	b.n	8006294 <__exponent+0x44>
 80062ae:	2330      	movs	r3, #48	; 0x30
 80062b0:	4419      	add	r1, r3
 80062b2:	7083      	strb	r3, [r0, #2]
 80062b4:	1d02      	adds	r2, r0, #4
 80062b6:	70c1      	strb	r1, [r0, #3]
 80062b8:	e7ef      	b.n	800629a <__exponent+0x4a>
	...

080062bc <_printf_float>:
 80062bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c0:	b091      	sub	sp, #68	; 0x44
 80062c2:	460c      	mov	r4, r1
 80062c4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80062c6:	4693      	mov	fp, r2
 80062c8:	461e      	mov	r6, r3
 80062ca:	4605      	mov	r5, r0
 80062cc:	f001 fa5c 	bl	8007788 <_localeconv_r>
 80062d0:	6803      	ldr	r3, [r0, #0]
 80062d2:	4618      	mov	r0, r3
 80062d4:	9309      	str	r3, [sp, #36]	; 0x24
 80062d6:	f7f9 ff3b 	bl	8000150 <strlen>
 80062da:	2300      	movs	r3, #0
 80062dc:	930e      	str	r3, [sp, #56]	; 0x38
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	900a      	str	r0, [sp, #40]	; 0x28
 80062e2:	3307      	adds	r3, #7
 80062e4:	f023 0307 	bic.w	r3, r3, #7
 80062e8:	f103 0208 	add.w	r2, r3, #8
 80062ec:	f894 8018 	ldrb.w	r8, [r4, #24]
 80062f0:	f8d4 a000 	ldr.w	sl, [r4]
 80062f4:	603a      	str	r2, [r7, #0]
 80062f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80062fe:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8006302:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006306:	930b      	str	r3, [sp, #44]	; 0x2c
 8006308:	f04f 32ff 	mov.w	r2, #4294967295
 800630c:	4ba6      	ldr	r3, [pc, #664]	; (80065a8 <_printf_float+0x2ec>)
 800630e:	4638      	mov	r0, r7
 8006310:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006312:	f7fa fb7b 	bl	8000a0c <__aeabi_dcmpun>
 8006316:	bb68      	cbnz	r0, 8006374 <_printf_float+0xb8>
 8006318:	f04f 32ff 	mov.w	r2, #4294967295
 800631c:	4ba2      	ldr	r3, [pc, #648]	; (80065a8 <_printf_float+0x2ec>)
 800631e:	4638      	mov	r0, r7
 8006320:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006322:	f7fa fb55 	bl	80009d0 <__aeabi_dcmple>
 8006326:	bb28      	cbnz	r0, 8006374 <_printf_float+0xb8>
 8006328:	2200      	movs	r2, #0
 800632a:	2300      	movs	r3, #0
 800632c:	4638      	mov	r0, r7
 800632e:	4649      	mov	r1, r9
 8006330:	f7fa fb44 	bl	80009bc <__aeabi_dcmplt>
 8006334:	b110      	cbz	r0, 800633c <_printf_float+0x80>
 8006336:	232d      	movs	r3, #45	; 0x2d
 8006338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800633c:	4f9b      	ldr	r7, [pc, #620]	; (80065ac <_printf_float+0x2f0>)
 800633e:	4b9c      	ldr	r3, [pc, #624]	; (80065b0 <_printf_float+0x2f4>)
 8006340:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006344:	bf98      	it	ls
 8006346:	461f      	movls	r7, r3
 8006348:	2303      	movs	r3, #3
 800634a:	f04f 0900 	mov.w	r9, #0
 800634e:	6123      	str	r3, [r4, #16]
 8006350:	f02a 0304 	bic.w	r3, sl, #4
 8006354:	6023      	str	r3, [r4, #0]
 8006356:	9600      	str	r6, [sp, #0]
 8006358:	465b      	mov	r3, fp
 800635a:	aa0f      	add	r2, sp, #60	; 0x3c
 800635c:	4621      	mov	r1, r4
 800635e:	4628      	mov	r0, r5
 8006360:	f000 f9e2 	bl	8006728 <_printf_common>
 8006364:	3001      	adds	r0, #1
 8006366:	f040 8090 	bne.w	800648a <_printf_float+0x1ce>
 800636a:	f04f 30ff 	mov.w	r0, #4294967295
 800636e:	b011      	add	sp, #68	; 0x44
 8006370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006374:	463a      	mov	r2, r7
 8006376:	464b      	mov	r3, r9
 8006378:	4638      	mov	r0, r7
 800637a:	4649      	mov	r1, r9
 800637c:	f7fa fb46 	bl	8000a0c <__aeabi_dcmpun>
 8006380:	b110      	cbz	r0, 8006388 <_printf_float+0xcc>
 8006382:	4f8c      	ldr	r7, [pc, #560]	; (80065b4 <_printf_float+0x2f8>)
 8006384:	4b8c      	ldr	r3, [pc, #560]	; (80065b8 <_printf_float+0x2fc>)
 8006386:	e7db      	b.n	8006340 <_printf_float+0x84>
 8006388:	6863      	ldr	r3, [r4, #4]
 800638a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800638e:	1c59      	adds	r1, r3, #1
 8006390:	a80d      	add	r0, sp, #52	; 0x34
 8006392:	a90e      	add	r1, sp, #56	; 0x38
 8006394:	d140      	bne.n	8006418 <_printf_float+0x15c>
 8006396:	2306      	movs	r3, #6
 8006398:	6063      	str	r3, [r4, #4]
 800639a:	f04f 0c00 	mov.w	ip, #0
 800639e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80063a2:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80063a6:	6863      	ldr	r3, [r4, #4]
 80063a8:	6022      	str	r2, [r4, #0]
 80063aa:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	463a      	mov	r2, r7
 80063b2:	464b      	mov	r3, r9
 80063b4:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80063b8:	4628      	mov	r0, r5
 80063ba:	f7ff feed 	bl	8006198 <__cvt>
 80063be:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80063c2:	2b47      	cmp	r3, #71	; 0x47
 80063c4:	4607      	mov	r7, r0
 80063c6:	d109      	bne.n	80063dc <_printf_float+0x120>
 80063c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063ca:	1cd8      	adds	r0, r3, #3
 80063cc:	db02      	blt.n	80063d4 <_printf_float+0x118>
 80063ce:	6862      	ldr	r2, [r4, #4]
 80063d0:	4293      	cmp	r3, r2
 80063d2:	dd47      	ble.n	8006464 <_printf_float+0x1a8>
 80063d4:	f1a8 0802 	sub.w	r8, r8, #2
 80063d8:	fa5f f888 	uxtb.w	r8, r8
 80063dc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80063e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80063e2:	d824      	bhi.n	800642e <_printf_float+0x172>
 80063e4:	3901      	subs	r1, #1
 80063e6:	4642      	mov	r2, r8
 80063e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80063ec:	910d      	str	r1, [sp, #52]	; 0x34
 80063ee:	f7ff ff2f 	bl	8006250 <__exponent>
 80063f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063f4:	4681      	mov	r9, r0
 80063f6:	1813      	adds	r3, r2, r0
 80063f8:	2a01      	cmp	r2, #1
 80063fa:	6123      	str	r3, [r4, #16]
 80063fc:	dc02      	bgt.n	8006404 <_printf_float+0x148>
 80063fe:	6822      	ldr	r2, [r4, #0]
 8006400:	07d1      	lsls	r1, r2, #31
 8006402:	d501      	bpl.n	8006408 <_printf_float+0x14c>
 8006404:	3301      	adds	r3, #1
 8006406:	6123      	str	r3, [r4, #16]
 8006408:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800640c:	2b00      	cmp	r3, #0
 800640e:	d0a2      	beq.n	8006356 <_printf_float+0x9a>
 8006410:	232d      	movs	r3, #45	; 0x2d
 8006412:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006416:	e79e      	b.n	8006356 <_printf_float+0x9a>
 8006418:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800641c:	f000 816e 	beq.w	80066fc <_printf_float+0x440>
 8006420:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006424:	d1b9      	bne.n	800639a <_printf_float+0xde>
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1b7      	bne.n	800639a <_printf_float+0xde>
 800642a:	2301      	movs	r3, #1
 800642c:	e7b4      	b.n	8006398 <_printf_float+0xdc>
 800642e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8006432:	d119      	bne.n	8006468 <_printf_float+0x1ac>
 8006434:	2900      	cmp	r1, #0
 8006436:	6863      	ldr	r3, [r4, #4]
 8006438:	dd0c      	ble.n	8006454 <_printf_float+0x198>
 800643a:	6121      	str	r1, [r4, #16]
 800643c:	b913      	cbnz	r3, 8006444 <_printf_float+0x188>
 800643e:	6822      	ldr	r2, [r4, #0]
 8006440:	07d2      	lsls	r2, r2, #31
 8006442:	d502      	bpl.n	800644a <_printf_float+0x18e>
 8006444:	3301      	adds	r3, #1
 8006446:	440b      	add	r3, r1
 8006448:	6123      	str	r3, [r4, #16]
 800644a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800644c:	f04f 0900 	mov.w	r9, #0
 8006450:	65a3      	str	r3, [r4, #88]	; 0x58
 8006452:	e7d9      	b.n	8006408 <_printf_float+0x14c>
 8006454:	b913      	cbnz	r3, 800645c <_printf_float+0x1a0>
 8006456:	6822      	ldr	r2, [r4, #0]
 8006458:	07d0      	lsls	r0, r2, #31
 800645a:	d501      	bpl.n	8006460 <_printf_float+0x1a4>
 800645c:	3302      	adds	r3, #2
 800645e:	e7f3      	b.n	8006448 <_printf_float+0x18c>
 8006460:	2301      	movs	r3, #1
 8006462:	e7f1      	b.n	8006448 <_printf_float+0x18c>
 8006464:	f04f 0867 	mov.w	r8, #103	; 0x67
 8006468:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800646c:	4293      	cmp	r3, r2
 800646e:	db05      	blt.n	800647c <_printf_float+0x1c0>
 8006470:	6822      	ldr	r2, [r4, #0]
 8006472:	6123      	str	r3, [r4, #16]
 8006474:	07d1      	lsls	r1, r2, #31
 8006476:	d5e8      	bpl.n	800644a <_printf_float+0x18e>
 8006478:	3301      	adds	r3, #1
 800647a:	e7e5      	b.n	8006448 <_printf_float+0x18c>
 800647c:	2b00      	cmp	r3, #0
 800647e:	bfcc      	ite	gt
 8006480:	2301      	movgt	r3, #1
 8006482:	f1c3 0302 	rsble	r3, r3, #2
 8006486:	4413      	add	r3, r2
 8006488:	e7de      	b.n	8006448 <_printf_float+0x18c>
 800648a:	6823      	ldr	r3, [r4, #0]
 800648c:	055a      	lsls	r2, r3, #21
 800648e:	d407      	bmi.n	80064a0 <_printf_float+0x1e4>
 8006490:	6923      	ldr	r3, [r4, #16]
 8006492:	463a      	mov	r2, r7
 8006494:	4659      	mov	r1, fp
 8006496:	4628      	mov	r0, r5
 8006498:	47b0      	blx	r6
 800649a:	3001      	adds	r0, #1
 800649c:	d129      	bne.n	80064f2 <_printf_float+0x236>
 800649e:	e764      	b.n	800636a <_printf_float+0xae>
 80064a0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80064a4:	f240 80d7 	bls.w	8006656 <_printf_float+0x39a>
 80064a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80064ac:	2200      	movs	r2, #0
 80064ae:	2300      	movs	r3, #0
 80064b0:	f7fa fa7a 	bl	80009a8 <__aeabi_dcmpeq>
 80064b4:	b388      	cbz	r0, 800651a <_printf_float+0x25e>
 80064b6:	2301      	movs	r3, #1
 80064b8:	4a40      	ldr	r2, [pc, #256]	; (80065bc <_printf_float+0x300>)
 80064ba:	4659      	mov	r1, fp
 80064bc:	4628      	mov	r0, r5
 80064be:	47b0      	blx	r6
 80064c0:	3001      	adds	r0, #1
 80064c2:	f43f af52 	beq.w	800636a <_printf_float+0xae>
 80064c6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80064ca:	429a      	cmp	r2, r3
 80064cc:	db02      	blt.n	80064d4 <_printf_float+0x218>
 80064ce:	6823      	ldr	r3, [r4, #0]
 80064d0:	07d8      	lsls	r0, r3, #31
 80064d2:	d50e      	bpl.n	80064f2 <_printf_float+0x236>
 80064d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064d8:	4659      	mov	r1, fp
 80064da:	4628      	mov	r0, r5
 80064dc:	47b0      	blx	r6
 80064de:	3001      	adds	r0, #1
 80064e0:	f43f af43 	beq.w	800636a <_printf_float+0xae>
 80064e4:	2700      	movs	r7, #0
 80064e6:	f104 081a 	add.w	r8, r4, #26
 80064ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064ec:	3b01      	subs	r3, #1
 80064ee:	42bb      	cmp	r3, r7
 80064f0:	dc09      	bgt.n	8006506 <_printf_float+0x24a>
 80064f2:	6823      	ldr	r3, [r4, #0]
 80064f4:	079f      	lsls	r7, r3, #30
 80064f6:	f100 80fd 	bmi.w	80066f4 <_printf_float+0x438>
 80064fa:	68e0      	ldr	r0, [r4, #12]
 80064fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064fe:	4298      	cmp	r0, r3
 8006500:	bfb8      	it	lt
 8006502:	4618      	movlt	r0, r3
 8006504:	e733      	b.n	800636e <_printf_float+0xb2>
 8006506:	2301      	movs	r3, #1
 8006508:	4642      	mov	r2, r8
 800650a:	4659      	mov	r1, fp
 800650c:	4628      	mov	r0, r5
 800650e:	47b0      	blx	r6
 8006510:	3001      	adds	r0, #1
 8006512:	f43f af2a 	beq.w	800636a <_printf_float+0xae>
 8006516:	3701      	adds	r7, #1
 8006518:	e7e7      	b.n	80064ea <_printf_float+0x22e>
 800651a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800651c:	2b00      	cmp	r3, #0
 800651e:	dc2b      	bgt.n	8006578 <_printf_float+0x2bc>
 8006520:	2301      	movs	r3, #1
 8006522:	4a26      	ldr	r2, [pc, #152]	; (80065bc <_printf_float+0x300>)
 8006524:	4659      	mov	r1, fp
 8006526:	4628      	mov	r0, r5
 8006528:	47b0      	blx	r6
 800652a:	3001      	adds	r0, #1
 800652c:	f43f af1d 	beq.w	800636a <_printf_float+0xae>
 8006530:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006532:	b923      	cbnz	r3, 800653e <_printf_float+0x282>
 8006534:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006536:	b913      	cbnz	r3, 800653e <_printf_float+0x282>
 8006538:	6823      	ldr	r3, [r4, #0]
 800653a:	07d9      	lsls	r1, r3, #31
 800653c:	d5d9      	bpl.n	80064f2 <_printf_float+0x236>
 800653e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006542:	4659      	mov	r1, fp
 8006544:	4628      	mov	r0, r5
 8006546:	47b0      	blx	r6
 8006548:	3001      	adds	r0, #1
 800654a:	f43f af0e 	beq.w	800636a <_printf_float+0xae>
 800654e:	f04f 0800 	mov.w	r8, #0
 8006552:	f104 091a 	add.w	r9, r4, #26
 8006556:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006558:	425b      	negs	r3, r3
 800655a:	4543      	cmp	r3, r8
 800655c:	dc01      	bgt.n	8006562 <_printf_float+0x2a6>
 800655e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006560:	e797      	b.n	8006492 <_printf_float+0x1d6>
 8006562:	2301      	movs	r3, #1
 8006564:	464a      	mov	r2, r9
 8006566:	4659      	mov	r1, fp
 8006568:	4628      	mov	r0, r5
 800656a:	47b0      	blx	r6
 800656c:	3001      	adds	r0, #1
 800656e:	f43f aefc 	beq.w	800636a <_printf_float+0xae>
 8006572:	f108 0801 	add.w	r8, r8, #1
 8006576:	e7ee      	b.n	8006556 <_printf_float+0x29a>
 8006578:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800657a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800657c:	429a      	cmp	r2, r3
 800657e:	bfa8      	it	ge
 8006580:	461a      	movge	r2, r3
 8006582:	2a00      	cmp	r2, #0
 8006584:	4690      	mov	r8, r2
 8006586:	dd07      	ble.n	8006598 <_printf_float+0x2dc>
 8006588:	4613      	mov	r3, r2
 800658a:	4659      	mov	r1, fp
 800658c:	463a      	mov	r2, r7
 800658e:	4628      	mov	r0, r5
 8006590:	47b0      	blx	r6
 8006592:	3001      	adds	r0, #1
 8006594:	f43f aee9 	beq.w	800636a <_printf_float+0xae>
 8006598:	f104 031a 	add.w	r3, r4, #26
 800659c:	f04f 0a00 	mov.w	sl, #0
 80065a0:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80065a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80065a6:	e015      	b.n	80065d4 <_printf_float+0x318>
 80065a8:	7fefffff 	.word	0x7fefffff
 80065ac:	080086d8 	.word	0x080086d8
 80065b0:	080086d4 	.word	0x080086d4
 80065b4:	080086e0 	.word	0x080086e0
 80065b8:	080086dc 	.word	0x080086dc
 80065bc:	080086e4 	.word	0x080086e4
 80065c0:	2301      	movs	r3, #1
 80065c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80065c4:	4659      	mov	r1, fp
 80065c6:	4628      	mov	r0, r5
 80065c8:	47b0      	blx	r6
 80065ca:	3001      	adds	r0, #1
 80065cc:	f43f aecd 	beq.w	800636a <_printf_float+0xae>
 80065d0:	f10a 0a01 	add.w	sl, sl, #1
 80065d4:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80065d8:	eba9 0308 	sub.w	r3, r9, r8
 80065dc:	4553      	cmp	r3, sl
 80065de:	dcef      	bgt.n	80065c0 <_printf_float+0x304>
 80065e0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80065e4:	429a      	cmp	r2, r3
 80065e6:	444f      	add	r7, r9
 80065e8:	db14      	blt.n	8006614 <_printf_float+0x358>
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	07da      	lsls	r2, r3, #31
 80065ee:	d411      	bmi.n	8006614 <_printf_float+0x358>
 80065f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065f2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80065f4:	eba3 0209 	sub.w	r2, r3, r9
 80065f8:	eba3 0901 	sub.w	r9, r3, r1
 80065fc:	4591      	cmp	r9, r2
 80065fe:	bfa8      	it	ge
 8006600:	4691      	movge	r9, r2
 8006602:	f1b9 0f00 	cmp.w	r9, #0
 8006606:	dc0d      	bgt.n	8006624 <_printf_float+0x368>
 8006608:	2700      	movs	r7, #0
 800660a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800660e:	f104 081a 	add.w	r8, r4, #26
 8006612:	e018      	b.n	8006646 <_printf_float+0x38a>
 8006614:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006618:	4659      	mov	r1, fp
 800661a:	4628      	mov	r0, r5
 800661c:	47b0      	blx	r6
 800661e:	3001      	adds	r0, #1
 8006620:	d1e6      	bne.n	80065f0 <_printf_float+0x334>
 8006622:	e6a2      	b.n	800636a <_printf_float+0xae>
 8006624:	464b      	mov	r3, r9
 8006626:	463a      	mov	r2, r7
 8006628:	4659      	mov	r1, fp
 800662a:	4628      	mov	r0, r5
 800662c:	47b0      	blx	r6
 800662e:	3001      	adds	r0, #1
 8006630:	d1ea      	bne.n	8006608 <_printf_float+0x34c>
 8006632:	e69a      	b.n	800636a <_printf_float+0xae>
 8006634:	2301      	movs	r3, #1
 8006636:	4642      	mov	r2, r8
 8006638:	4659      	mov	r1, fp
 800663a:	4628      	mov	r0, r5
 800663c:	47b0      	blx	r6
 800663e:	3001      	adds	r0, #1
 8006640:	f43f ae93 	beq.w	800636a <_printf_float+0xae>
 8006644:	3701      	adds	r7, #1
 8006646:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800664a:	1a9b      	subs	r3, r3, r2
 800664c:	eba3 0309 	sub.w	r3, r3, r9
 8006650:	42bb      	cmp	r3, r7
 8006652:	dcef      	bgt.n	8006634 <_printf_float+0x378>
 8006654:	e74d      	b.n	80064f2 <_printf_float+0x236>
 8006656:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006658:	2a01      	cmp	r2, #1
 800665a:	dc01      	bgt.n	8006660 <_printf_float+0x3a4>
 800665c:	07db      	lsls	r3, r3, #31
 800665e:	d538      	bpl.n	80066d2 <_printf_float+0x416>
 8006660:	2301      	movs	r3, #1
 8006662:	463a      	mov	r2, r7
 8006664:	4659      	mov	r1, fp
 8006666:	4628      	mov	r0, r5
 8006668:	47b0      	blx	r6
 800666a:	3001      	adds	r0, #1
 800666c:	f43f ae7d 	beq.w	800636a <_printf_float+0xae>
 8006670:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006674:	4659      	mov	r1, fp
 8006676:	4628      	mov	r0, r5
 8006678:	47b0      	blx	r6
 800667a:	3001      	adds	r0, #1
 800667c:	f107 0701 	add.w	r7, r7, #1
 8006680:	f43f ae73 	beq.w	800636a <_printf_float+0xae>
 8006684:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006688:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800668a:	2200      	movs	r2, #0
 800668c:	f103 38ff 	add.w	r8, r3, #4294967295
 8006690:	2300      	movs	r3, #0
 8006692:	f7fa f989 	bl	80009a8 <__aeabi_dcmpeq>
 8006696:	b9c0      	cbnz	r0, 80066ca <_printf_float+0x40e>
 8006698:	4643      	mov	r3, r8
 800669a:	463a      	mov	r2, r7
 800669c:	4659      	mov	r1, fp
 800669e:	4628      	mov	r0, r5
 80066a0:	47b0      	blx	r6
 80066a2:	3001      	adds	r0, #1
 80066a4:	d10d      	bne.n	80066c2 <_printf_float+0x406>
 80066a6:	e660      	b.n	800636a <_printf_float+0xae>
 80066a8:	2301      	movs	r3, #1
 80066aa:	4642      	mov	r2, r8
 80066ac:	4659      	mov	r1, fp
 80066ae:	4628      	mov	r0, r5
 80066b0:	47b0      	blx	r6
 80066b2:	3001      	adds	r0, #1
 80066b4:	f43f ae59 	beq.w	800636a <_printf_float+0xae>
 80066b8:	3701      	adds	r7, #1
 80066ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066bc:	3b01      	subs	r3, #1
 80066be:	42bb      	cmp	r3, r7
 80066c0:	dcf2      	bgt.n	80066a8 <_printf_float+0x3ec>
 80066c2:	464b      	mov	r3, r9
 80066c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80066c8:	e6e4      	b.n	8006494 <_printf_float+0x1d8>
 80066ca:	2700      	movs	r7, #0
 80066cc:	f104 081a 	add.w	r8, r4, #26
 80066d0:	e7f3      	b.n	80066ba <_printf_float+0x3fe>
 80066d2:	2301      	movs	r3, #1
 80066d4:	e7e1      	b.n	800669a <_printf_float+0x3de>
 80066d6:	2301      	movs	r3, #1
 80066d8:	4642      	mov	r2, r8
 80066da:	4659      	mov	r1, fp
 80066dc:	4628      	mov	r0, r5
 80066de:	47b0      	blx	r6
 80066e0:	3001      	adds	r0, #1
 80066e2:	f43f ae42 	beq.w	800636a <_printf_float+0xae>
 80066e6:	3701      	adds	r7, #1
 80066e8:	68e3      	ldr	r3, [r4, #12]
 80066ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80066ec:	1a9b      	subs	r3, r3, r2
 80066ee:	42bb      	cmp	r3, r7
 80066f0:	dcf1      	bgt.n	80066d6 <_printf_float+0x41a>
 80066f2:	e702      	b.n	80064fa <_printf_float+0x23e>
 80066f4:	2700      	movs	r7, #0
 80066f6:	f104 0819 	add.w	r8, r4, #25
 80066fa:	e7f5      	b.n	80066e8 <_printf_float+0x42c>
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f43f ae94 	beq.w	800642a <_printf_float+0x16e>
 8006702:	f04f 0c00 	mov.w	ip, #0
 8006706:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800670a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800670e:	6022      	str	r2, [r4, #0]
 8006710:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8006714:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	463a      	mov	r2, r7
 800671c:	464b      	mov	r3, r9
 800671e:	4628      	mov	r0, r5
 8006720:	f7ff fd3a 	bl	8006198 <__cvt>
 8006724:	4607      	mov	r7, r0
 8006726:	e64f      	b.n	80063c8 <_printf_float+0x10c>

08006728 <_printf_common>:
 8006728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800672c:	4691      	mov	r9, r2
 800672e:	461f      	mov	r7, r3
 8006730:	688a      	ldr	r2, [r1, #8]
 8006732:	690b      	ldr	r3, [r1, #16]
 8006734:	4606      	mov	r6, r0
 8006736:	4293      	cmp	r3, r2
 8006738:	bfb8      	it	lt
 800673a:	4613      	movlt	r3, r2
 800673c:	f8c9 3000 	str.w	r3, [r9]
 8006740:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006744:	460c      	mov	r4, r1
 8006746:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800674a:	b112      	cbz	r2, 8006752 <_printf_common+0x2a>
 800674c:	3301      	adds	r3, #1
 800674e:	f8c9 3000 	str.w	r3, [r9]
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	0699      	lsls	r1, r3, #26
 8006756:	bf42      	ittt	mi
 8006758:	f8d9 3000 	ldrmi.w	r3, [r9]
 800675c:	3302      	addmi	r3, #2
 800675e:	f8c9 3000 	strmi.w	r3, [r9]
 8006762:	6825      	ldr	r5, [r4, #0]
 8006764:	f015 0506 	ands.w	r5, r5, #6
 8006768:	d107      	bne.n	800677a <_printf_common+0x52>
 800676a:	f104 0a19 	add.w	sl, r4, #25
 800676e:	68e3      	ldr	r3, [r4, #12]
 8006770:	f8d9 2000 	ldr.w	r2, [r9]
 8006774:	1a9b      	subs	r3, r3, r2
 8006776:	42ab      	cmp	r3, r5
 8006778:	dc29      	bgt.n	80067ce <_printf_common+0xa6>
 800677a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800677e:	6822      	ldr	r2, [r4, #0]
 8006780:	3300      	adds	r3, #0
 8006782:	bf18      	it	ne
 8006784:	2301      	movne	r3, #1
 8006786:	0692      	lsls	r2, r2, #26
 8006788:	d42e      	bmi.n	80067e8 <_printf_common+0xc0>
 800678a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800678e:	4639      	mov	r1, r7
 8006790:	4630      	mov	r0, r6
 8006792:	47c0      	blx	r8
 8006794:	3001      	adds	r0, #1
 8006796:	d021      	beq.n	80067dc <_printf_common+0xb4>
 8006798:	6823      	ldr	r3, [r4, #0]
 800679a:	68e5      	ldr	r5, [r4, #12]
 800679c:	f003 0306 	and.w	r3, r3, #6
 80067a0:	2b04      	cmp	r3, #4
 80067a2:	bf18      	it	ne
 80067a4:	2500      	movne	r5, #0
 80067a6:	f8d9 2000 	ldr.w	r2, [r9]
 80067aa:	f04f 0900 	mov.w	r9, #0
 80067ae:	bf08      	it	eq
 80067b0:	1aad      	subeq	r5, r5, r2
 80067b2:	68a3      	ldr	r3, [r4, #8]
 80067b4:	6922      	ldr	r2, [r4, #16]
 80067b6:	bf08      	it	eq
 80067b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067bc:	4293      	cmp	r3, r2
 80067be:	bfc4      	itt	gt
 80067c0:	1a9b      	subgt	r3, r3, r2
 80067c2:	18ed      	addgt	r5, r5, r3
 80067c4:	341a      	adds	r4, #26
 80067c6:	454d      	cmp	r5, r9
 80067c8:	d11a      	bne.n	8006800 <_printf_common+0xd8>
 80067ca:	2000      	movs	r0, #0
 80067cc:	e008      	b.n	80067e0 <_printf_common+0xb8>
 80067ce:	2301      	movs	r3, #1
 80067d0:	4652      	mov	r2, sl
 80067d2:	4639      	mov	r1, r7
 80067d4:	4630      	mov	r0, r6
 80067d6:	47c0      	blx	r8
 80067d8:	3001      	adds	r0, #1
 80067da:	d103      	bne.n	80067e4 <_printf_common+0xbc>
 80067dc:	f04f 30ff 	mov.w	r0, #4294967295
 80067e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067e4:	3501      	adds	r5, #1
 80067e6:	e7c2      	b.n	800676e <_printf_common+0x46>
 80067e8:	2030      	movs	r0, #48	; 0x30
 80067ea:	18e1      	adds	r1, r4, r3
 80067ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067f0:	1c5a      	adds	r2, r3, #1
 80067f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067f6:	4422      	add	r2, r4
 80067f8:	3302      	adds	r3, #2
 80067fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067fe:	e7c4      	b.n	800678a <_printf_common+0x62>
 8006800:	2301      	movs	r3, #1
 8006802:	4622      	mov	r2, r4
 8006804:	4639      	mov	r1, r7
 8006806:	4630      	mov	r0, r6
 8006808:	47c0      	blx	r8
 800680a:	3001      	adds	r0, #1
 800680c:	d0e6      	beq.n	80067dc <_printf_common+0xb4>
 800680e:	f109 0901 	add.w	r9, r9, #1
 8006812:	e7d8      	b.n	80067c6 <_printf_common+0x9e>

08006814 <_printf_i>:
 8006814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006818:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800681c:	460c      	mov	r4, r1
 800681e:	7e09      	ldrb	r1, [r1, #24]
 8006820:	b085      	sub	sp, #20
 8006822:	296e      	cmp	r1, #110	; 0x6e
 8006824:	4617      	mov	r7, r2
 8006826:	4606      	mov	r6, r0
 8006828:	4698      	mov	r8, r3
 800682a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800682c:	f000 80b3 	beq.w	8006996 <_printf_i+0x182>
 8006830:	d822      	bhi.n	8006878 <_printf_i+0x64>
 8006832:	2963      	cmp	r1, #99	; 0x63
 8006834:	d036      	beq.n	80068a4 <_printf_i+0x90>
 8006836:	d80a      	bhi.n	800684e <_printf_i+0x3a>
 8006838:	2900      	cmp	r1, #0
 800683a:	f000 80b9 	beq.w	80069b0 <_printf_i+0x19c>
 800683e:	2958      	cmp	r1, #88	; 0x58
 8006840:	f000 8083 	beq.w	800694a <_printf_i+0x136>
 8006844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006848:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800684c:	e032      	b.n	80068b4 <_printf_i+0xa0>
 800684e:	2964      	cmp	r1, #100	; 0x64
 8006850:	d001      	beq.n	8006856 <_printf_i+0x42>
 8006852:	2969      	cmp	r1, #105	; 0x69
 8006854:	d1f6      	bne.n	8006844 <_printf_i+0x30>
 8006856:	6820      	ldr	r0, [r4, #0]
 8006858:	6813      	ldr	r3, [r2, #0]
 800685a:	0605      	lsls	r5, r0, #24
 800685c:	f103 0104 	add.w	r1, r3, #4
 8006860:	d52a      	bpl.n	80068b8 <_printf_i+0xa4>
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6011      	str	r1, [r2, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	da03      	bge.n	8006872 <_printf_i+0x5e>
 800686a:	222d      	movs	r2, #45	; 0x2d
 800686c:	425b      	negs	r3, r3
 800686e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006872:	486f      	ldr	r0, [pc, #444]	; (8006a30 <_printf_i+0x21c>)
 8006874:	220a      	movs	r2, #10
 8006876:	e039      	b.n	80068ec <_printf_i+0xd8>
 8006878:	2973      	cmp	r1, #115	; 0x73
 800687a:	f000 809d 	beq.w	80069b8 <_printf_i+0x1a4>
 800687e:	d808      	bhi.n	8006892 <_printf_i+0x7e>
 8006880:	296f      	cmp	r1, #111	; 0x6f
 8006882:	d020      	beq.n	80068c6 <_printf_i+0xb2>
 8006884:	2970      	cmp	r1, #112	; 0x70
 8006886:	d1dd      	bne.n	8006844 <_printf_i+0x30>
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	f043 0320 	orr.w	r3, r3, #32
 800688e:	6023      	str	r3, [r4, #0]
 8006890:	e003      	b.n	800689a <_printf_i+0x86>
 8006892:	2975      	cmp	r1, #117	; 0x75
 8006894:	d017      	beq.n	80068c6 <_printf_i+0xb2>
 8006896:	2978      	cmp	r1, #120	; 0x78
 8006898:	d1d4      	bne.n	8006844 <_printf_i+0x30>
 800689a:	2378      	movs	r3, #120	; 0x78
 800689c:	4865      	ldr	r0, [pc, #404]	; (8006a34 <_printf_i+0x220>)
 800689e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80068a2:	e055      	b.n	8006950 <_printf_i+0x13c>
 80068a4:	6813      	ldr	r3, [r2, #0]
 80068a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068aa:	1d19      	adds	r1, r3, #4
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	6011      	str	r1, [r2, #0]
 80068b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068b4:	2301      	movs	r3, #1
 80068b6:	e08c      	b.n	80069d2 <_printf_i+0x1be>
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80068be:	6011      	str	r1, [r2, #0]
 80068c0:	bf18      	it	ne
 80068c2:	b21b      	sxthne	r3, r3
 80068c4:	e7cf      	b.n	8006866 <_printf_i+0x52>
 80068c6:	6813      	ldr	r3, [r2, #0]
 80068c8:	6825      	ldr	r5, [r4, #0]
 80068ca:	1d18      	adds	r0, r3, #4
 80068cc:	6010      	str	r0, [r2, #0]
 80068ce:	0628      	lsls	r0, r5, #24
 80068d0:	d501      	bpl.n	80068d6 <_printf_i+0xc2>
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	e002      	b.n	80068dc <_printf_i+0xc8>
 80068d6:	0668      	lsls	r0, r5, #25
 80068d8:	d5fb      	bpl.n	80068d2 <_printf_i+0xbe>
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	296f      	cmp	r1, #111	; 0x6f
 80068de:	bf14      	ite	ne
 80068e0:	220a      	movne	r2, #10
 80068e2:	2208      	moveq	r2, #8
 80068e4:	4852      	ldr	r0, [pc, #328]	; (8006a30 <_printf_i+0x21c>)
 80068e6:	2100      	movs	r1, #0
 80068e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068ec:	6865      	ldr	r5, [r4, #4]
 80068ee:	2d00      	cmp	r5, #0
 80068f0:	60a5      	str	r5, [r4, #8]
 80068f2:	f2c0 8095 	blt.w	8006a20 <_printf_i+0x20c>
 80068f6:	6821      	ldr	r1, [r4, #0]
 80068f8:	f021 0104 	bic.w	r1, r1, #4
 80068fc:	6021      	str	r1, [r4, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d13d      	bne.n	800697e <_printf_i+0x16a>
 8006902:	2d00      	cmp	r5, #0
 8006904:	f040 808e 	bne.w	8006a24 <_printf_i+0x210>
 8006908:	4665      	mov	r5, ip
 800690a:	2a08      	cmp	r2, #8
 800690c:	d10b      	bne.n	8006926 <_printf_i+0x112>
 800690e:	6823      	ldr	r3, [r4, #0]
 8006910:	07db      	lsls	r3, r3, #31
 8006912:	d508      	bpl.n	8006926 <_printf_i+0x112>
 8006914:	6923      	ldr	r3, [r4, #16]
 8006916:	6862      	ldr	r2, [r4, #4]
 8006918:	429a      	cmp	r2, r3
 800691a:	bfde      	ittt	le
 800691c:	2330      	movle	r3, #48	; 0x30
 800691e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006922:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006926:	ebac 0305 	sub.w	r3, ip, r5
 800692a:	6123      	str	r3, [r4, #16]
 800692c:	f8cd 8000 	str.w	r8, [sp]
 8006930:	463b      	mov	r3, r7
 8006932:	aa03      	add	r2, sp, #12
 8006934:	4621      	mov	r1, r4
 8006936:	4630      	mov	r0, r6
 8006938:	f7ff fef6 	bl	8006728 <_printf_common>
 800693c:	3001      	adds	r0, #1
 800693e:	d14d      	bne.n	80069dc <_printf_i+0x1c8>
 8006940:	f04f 30ff 	mov.w	r0, #4294967295
 8006944:	b005      	add	sp, #20
 8006946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800694a:	4839      	ldr	r0, [pc, #228]	; (8006a30 <_printf_i+0x21c>)
 800694c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006950:	6813      	ldr	r3, [r2, #0]
 8006952:	6821      	ldr	r1, [r4, #0]
 8006954:	1d1d      	adds	r5, r3, #4
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6015      	str	r5, [r2, #0]
 800695a:	060a      	lsls	r2, r1, #24
 800695c:	d50b      	bpl.n	8006976 <_printf_i+0x162>
 800695e:	07ca      	lsls	r2, r1, #31
 8006960:	bf44      	itt	mi
 8006962:	f041 0120 	orrmi.w	r1, r1, #32
 8006966:	6021      	strmi	r1, [r4, #0]
 8006968:	b91b      	cbnz	r3, 8006972 <_printf_i+0x15e>
 800696a:	6822      	ldr	r2, [r4, #0]
 800696c:	f022 0220 	bic.w	r2, r2, #32
 8006970:	6022      	str	r2, [r4, #0]
 8006972:	2210      	movs	r2, #16
 8006974:	e7b7      	b.n	80068e6 <_printf_i+0xd2>
 8006976:	064d      	lsls	r5, r1, #25
 8006978:	bf48      	it	mi
 800697a:	b29b      	uxthmi	r3, r3
 800697c:	e7ef      	b.n	800695e <_printf_i+0x14a>
 800697e:	4665      	mov	r5, ip
 8006980:	fbb3 f1f2 	udiv	r1, r3, r2
 8006984:	fb02 3311 	mls	r3, r2, r1, r3
 8006988:	5cc3      	ldrb	r3, [r0, r3]
 800698a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800698e:	460b      	mov	r3, r1
 8006990:	2900      	cmp	r1, #0
 8006992:	d1f5      	bne.n	8006980 <_printf_i+0x16c>
 8006994:	e7b9      	b.n	800690a <_printf_i+0xf6>
 8006996:	6813      	ldr	r3, [r2, #0]
 8006998:	6825      	ldr	r5, [r4, #0]
 800699a:	1d18      	adds	r0, r3, #4
 800699c:	6961      	ldr	r1, [r4, #20]
 800699e:	6010      	str	r0, [r2, #0]
 80069a0:	0628      	lsls	r0, r5, #24
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	d501      	bpl.n	80069aa <_printf_i+0x196>
 80069a6:	6019      	str	r1, [r3, #0]
 80069a8:	e002      	b.n	80069b0 <_printf_i+0x19c>
 80069aa:	066a      	lsls	r2, r5, #25
 80069ac:	d5fb      	bpl.n	80069a6 <_printf_i+0x192>
 80069ae:	8019      	strh	r1, [r3, #0]
 80069b0:	2300      	movs	r3, #0
 80069b2:	4665      	mov	r5, ip
 80069b4:	6123      	str	r3, [r4, #16]
 80069b6:	e7b9      	b.n	800692c <_printf_i+0x118>
 80069b8:	6813      	ldr	r3, [r2, #0]
 80069ba:	1d19      	adds	r1, r3, #4
 80069bc:	6011      	str	r1, [r2, #0]
 80069be:	681d      	ldr	r5, [r3, #0]
 80069c0:	6862      	ldr	r2, [r4, #4]
 80069c2:	2100      	movs	r1, #0
 80069c4:	4628      	mov	r0, r5
 80069c6:	f000 fef5 	bl	80077b4 <memchr>
 80069ca:	b108      	cbz	r0, 80069d0 <_printf_i+0x1bc>
 80069cc:	1b40      	subs	r0, r0, r5
 80069ce:	6060      	str	r0, [r4, #4]
 80069d0:	6863      	ldr	r3, [r4, #4]
 80069d2:	6123      	str	r3, [r4, #16]
 80069d4:	2300      	movs	r3, #0
 80069d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069da:	e7a7      	b.n	800692c <_printf_i+0x118>
 80069dc:	6923      	ldr	r3, [r4, #16]
 80069de:	462a      	mov	r2, r5
 80069e0:	4639      	mov	r1, r7
 80069e2:	4630      	mov	r0, r6
 80069e4:	47c0      	blx	r8
 80069e6:	3001      	adds	r0, #1
 80069e8:	d0aa      	beq.n	8006940 <_printf_i+0x12c>
 80069ea:	6823      	ldr	r3, [r4, #0]
 80069ec:	079b      	lsls	r3, r3, #30
 80069ee:	d413      	bmi.n	8006a18 <_printf_i+0x204>
 80069f0:	68e0      	ldr	r0, [r4, #12]
 80069f2:	9b03      	ldr	r3, [sp, #12]
 80069f4:	4298      	cmp	r0, r3
 80069f6:	bfb8      	it	lt
 80069f8:	4618      	movlt	r0, r3
 80069fa:	e7a3      	b.n	8006944 <_printf_i+0x130>
 80069fc:	2301      	movs	r3, #1
 80069fe:	464a      	mov	r2, r9
 8006a00:	4639      	mov	r1, r7
 8006a02:	4630      	mov	r0, r6
 8006a04:	47c0      	blx	r8
 8006a06:	3001      	adds	r0, #1
 8006a08:	d09a      	beq.n	8006940 <_printf_i+0x12c>
 8006a0a:	3501      	adds	r5, #1
 8006a0c:	68e3      	ldr	r3, [r4, #12]
 8006a0e:	9a03      	ldr	r2, [sp, #12]
 8006a10:	1a9b      	subs	r3, r3, r2
 8006a12:	42ab      	cmp	r3, r5
 8006a14:	dcf2      	bgt.n	80069fc <_printf_i+0x1e8>
 8006a16:	e7eb      	b.n	80069f0 <_printf_i+0x1dc>
 8006a18:	2500      	movs	r5, #0
 8006a1a:	f104 0919 	add.w	r9, r4, #25
 8006a1e:	e7f5      	b.n	8006a0c <_printf_i+0x1f8>
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1ac      	bne.n	800697e <_printf_i+0x16a>
 8006a24:	7803      	ldrb	r3, [r0, #0]
 8006a26:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a2e:	e76c      	b.n	800690a <_printf_i+0xf6>
 8006a30:	080086e6 	.word	0x080086e6
 8006a34:	080086f7 	.word	0x080086f7

08006a38 <sniprintf>:
 8006a38:	b40c      	push	{r2, r3}
 8006a3a:	b530      	push	{r4, r5, lr}
 8006a3c:	4b17      	ldr	r3, [pc, #92]	; (8006a9c <sniprintf+0x64>)
 8006a3e:	1e0c      	subs	r4, r1, #0
 8006a40:	b09d      	sub	sp, #116	; 0x74
 8006a42:	681d      	ldr	r5, [r3, #0]
 8006a44:	da08      	bge.n	8006a58 <sniprintf+0x20>
 8006a46:	238b      	movs	r3, #139	; 0x8b
 8006a48:	f04f 30ff 	mov.w	r0, #4294967295
 8006a4c:	602b      	str	r3, [r5, #0]
 8006a4e:	b01d      	add	sp, #116	; 0x74
 8006a50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a54:	b002      	add	sp, #8
 8006a56:	4770      	bx	lr
 8006a58:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006a5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006a60:	bf0c      	ite	eq
 8006a62:	4623      	moveq	r3, r4
 8006a64:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006a68:	9304      	str	r3, [sp, #16]
 8006a6a:	9307      	str	r3, [sp, #28]
 8006a6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a70:	9002      	str	r0, [sp, #8]
 8006a72:	9006      	str	r0, [sp, #24]
 8006a74:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006a78:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006a7a:	ab21      	add	r3, sp, #132	; 0x84
 8006a7c:	a902      	add	r1, sp, #8
 8006a7e:	4628      	mov	r0, r5
 8006a80:	9301      	str	r3, [sp, #4]
 8006a82:	f001 fa9b 	bl	8007fbc <_svfiprintf_r>
 8006a86:	1c43      	adds	r3, r0, #1
 8006a88:	bfbc      	itt	lt
 8006a8a:	238b      	movlt	r3, #139	; 0x8b
 8006a8c:	602b      	strlt	r3, [r5, #0]
 8006a8e:	2c00      	cmp	r4, #0
 8006a90:	d0dd      	beq.n	8006a4e <sniprintf+0x16>
 8006a92:	2200      	movs	r2, #0
 8006a94:	9b02      	ldr	r3, [sp, #8]
 8006a96:	701a      	strb	r2, [r3, #0]
 8006a98:	e7d9      	b.n	8006a4e <sniprintf+0x16>
 8006a9a:	bf00      	nop
 8006a9c:	20000014 	.word	0x20000014

08006aa0 <siprintf>:
 8006aa0:	b40e      	push	{r1, r2, r3}
 8006aa2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006aa6:	b500      	push	{lr}
 8006aa8:	b09c      	sub	sp, #112	; 0x70
 8006aaa:	ab1d      	add	r3, sp, #116	; 0x74
 8006aac:	9002      	str	r0, [sp, #8]
 8006aae:	9006      	str	r0, [sp, #24]
 8006ab0:	9107      	str	r1, [sp, #28]
 8006ab2:	9104      	str	r1, [sp, #16]
 8006ab4:	4808      	ldr	r0, [pc, #32]	; (8006ad8 <siprintf+0x38>)
 8006ab6:	4909      	ldr	r1, [pc, #36]	; (8006adc <siprintf+0x3c>)
 8006ab8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006abc:	9105      	str	r1, [sp, #20]
 8006abe:	6800      	ldr	r0, [r0, #0]
 8006ac0:	a902      	add	r1, sp, #8
 8006ac2:	9301      	str	r3, [sp, #4]
 8006ac4:	f001 fa7a 	bl	8007fbc <_svfiprintf_r>
 8006ac8:	2200      	movs	r2, #0
 8006aca:	9b02      	ldr	r3, [sp, #8]
 8006acc:	701a      	strb	r2, [r3, #0]
 8006ace:	b01c      	add	sp, #112	; 0x70
 8006ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ad4:	b003      	add	sp, #12
 8006ad6:	4770      	bx	lr
 8006ad8:	20000014 	.word	0x20000014
 8006adc:	ffff0208 	.word	0xffff0208

08006ae0 <strcat>:
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	b510      	push	{r4, lr}
 8006ae4:	781a      	ldrb	r2, [r3, #0]
 8006ae6:	1c5c      	adds	r4, r3, #1
 8006ae8:	b93a      	cbnz	r2, 8006afa <strcat+0x1a>
 8006aea:	3b01      	subs	r3, #1
 8006aec:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006af0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006af4:	2a00      	cmp	r2, #0
 8006af6:	d1f9      	bne.n	8006aec <strcat+0xc>
 8006af8:	bd10      	pop	{r4, pc}
 8006afa:	4623      	mov	r3, r4
 8006afc:	e7f2      	b.n	8006ae4 <strcat+0x4>

08006afe <quorem>:
 8006afe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b02:	6903      	ldr	r3, [r0, #16]
 8006b04:	690c      	ldr	r4, [r1, #16]
 8006b06:	4680      	mov	r8, r0
 8006b08:	42a3      	cmp	r3, r4
 8006b0a:	f2c0 8084 	blt.w	8006c16 <quorem+0x118>
 8006b0e:	3c01      	subs	r4, #1
 8006b10:	f101 0714 	add.w	r7, r1, #20
 8006b14:	f100 0614 	add.w	r6, r0, #20
 8006b18:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006b1c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006b20:	3501      	adds	r5, #1
 8006b22:	fbb0 f5f5 	udiv	r5, r0, r5
 8006b26:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006b2a:	eb06 030c 	add.w	r3, r6, ip
 8006b2e:	eb07 090c 	add.w	r9, r7, ip
 8006b32:	9301      	str	r3, [sp, #4]
 8006b34:	b39d      	cbz	r5, 8006b9e <quorem+0xa0>
 8006b36:	f04f 0a00 	mov.w	sl, #0
 8006b3a:	4638      	mov	r0, r7
 8006b3c:	46b6      	mov	lr, r6
 8006b3e:	46d3      	mov	fp, sl
 8006b40:	f850 2b04 	ldr.w	r2, [r0], #4
 8006b44:	b293      	uxth	r3, r2
 8006b46:	fb05 a303 	mla	r3, r5, r3, sl
 8006b4a:	0c12      	lsrs	r2, r2, #16
 8006b4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b50:	fb05 a202 	mla	r2, r5, r2, sl
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	ebab 0303 	sub.w	r3, fp, r3
 8006b5a:	f8de b000 	ldr.w	fp, [lr]
 8006b5e:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006b62:	fa1f fb8b 	uxth.w	fp, fp
 8006b66:	445b      	add	r3, fp
 8006b68:	fa1f fb82 	uxth.w	fp, r2
 8006b6c:	f8de 2000 	ldr.w	r2, [lr]
 8006b70:	4581      	cmp	r9, r0
 8006b72:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006b76:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b80:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006b84:	f84e 3b04 	str.w	r3, [lr], #4
 8006b88:	d2da      	bcs.n	8006b40 <quorem+0x42>
 8006b8a:	f856 300c 	ldr.w	r3, [r6, ip]
 8006b8e:	b933      	cbnz	r3, 8006b9e <quorem+0xa0>
 8006b90:	9b01      	ldr	r3, [sp, #4]
 8006b92:	3b04      	subs	r3, #4
 8006b94:	429e      	cmp	r6, r3
 8006b96:	461a      	mov	r2, r3
 8006b98:	d331      	bcc.n	8006bfe <quorem+0x100>
 8006b9a:	f8c8 4010 	str.w	r4, [r8, #16]
 8006b9e:	4640      	mov	r0, r8
 8006ba0:	f001 f836 	bl	8007c10 <__mcmp>
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	db26      	blt.n	8006bf6 <quorem+0xf8>
 8006ba8:	4630      	mov	r0, r6
 8006baa:	f04f 0c00 	mov.w	ip, #0
 8006bae:	3501      	adds	r5, #1
 8006bb0:	f857 1b04 	ldr.w	r1, [r7], #4
 8006bb4:	f8d0 e000 	ldr.w	lr, [r0]
 8006bb8:	b28b      	uxth	r3, r1
 8006bba:	ebac 0303 	sub.w	r3, ip, r3
 8006bbe:	fa1f f28e 	uxth.w	r2, lr
 8006bc2:	4413      	add	r3, r2
 8006bc4:	0c0a      	lsrs	r2, r1, #16
 8006bc6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006bca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bd4:	45b9      	cmp	r9, r7
 8006bd6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006bda:	f840 3b04 	str.w	r3, [r0], #4
 8006bde:	d2e7      	bcs.n	8006bb0 <quorem+0xb2>
 8006be0:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006be4:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006be8:	b92a      	cbnz	r2, 8006bf6 <quorem+0xf8>
 8006bea:	3b04      	subs	r3, #4
 8006bec:	429e      	cmp	r6, r3
 8006bee:	461a      	mov	r2, r3
 8006bf0:	d30b      	bcc.n	8006c0a <quorem+0x10c>
 8006bf2:	f8c8 4010 	str.w	r4, [r8, #16]
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	b003      	add	sp, #12
 8006bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bfe:	6812      	ldr	r2, [r2, #0]
 8006c00:	3b04      	subs	r3, #4
 8006c02:	2a00      	cmp	r2, #0
 8006c04:	d1c9      	bne.n	8006b9a <quorem+0x9c>
 8006c06:	3c01      	subs	r4, #1
 8006c08:	e7c4      	b.n	8006b94 <quorem+0x96>
 8006c0a:	6812      	ldr	r2, [r2, #0]
 8006c0c:	3b04      	subs	r3, #4
 8006c0e:	2a00      	cmp	r2, #0
 8006c10:	d1ef      	bne.n	8006bf2 <quorem+0xf4>
 8006c12:	3c01      	subs	r4, #1
 8006c14:	e7ea      	b.n	8006bec <quorem+0xee>
 8006c16:	2000      	movs	r0, #0
 8006c18:	e7ee      	b.n	8006bf8 <quorem+0xfa>
 8006c1a:	0000      	movs	r0, r0
 8006c1c:	0000      	movs	r0, r0
	...

08006c20 <_dtoa_r>:
 8006c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c24:	4616      	mov	r6, r2
 8006c26:	461f      	mov	r7, r3
 8006c28:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006c2a:	b095      	sub	sp, #84	; 0x54
 8006c2c:	4604      	mov	r4, r0
 8006c2e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8006c32:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006c36:	b93d      	cbnz	r5, 8006c48 <_dtoa_r+0x28>
 8006c38:	2010      	movs	r0, #16
 8006c3a:	f000 fdb3 	bl	80077a4 <malloc>
 8006c3e:	6260      	str	r0, [r4, #36]	; 0x24
 8006c40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006c44:	6005      	str	r5, [r0, #0]
 8006c46:	60c5      	str	r5, [r0, #12]
 8006c48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c4a:	6819      	ldr	r1, [r3, #0]
 8006c4c:	b151      	cbz	r1, 8006c64 <_dtoa_r+0x44>
 8006c4e:	685a      	ldr	r2, [r3, #4]
 8006c50:	2301      	movs	r3, #1
 8006c52:	4093      	lsls	r3, r2
 8006c54:	604a      	str	r2, [r1, #4]
 8006c56:	608b      	str	r3, [r1, #8]
 8006c58:	4620      	mov	r0, r4
 8006c5a:	f000 fdf8 	bl	800784e <_Bfree>
 8006c5e:	2200      	movs	r2, #0
 8006c60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c62:	601a      	str	r2, [r3, #0]
 8006c64:	1e3b      	subs	r3, r7, #0
 8006c66:	bfaf      	iteee	ge
 8006c68:	2300      	movge	r3, #0
 8006c6a:	2201      	movlt	r2, #1
 8006c6c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006c70:	9303      	strlt	r3, [sp, #12]
 8006c72:	bfac      	ite	ge
 8006c74:	f8c8 3000 	strge.w	r3, [r8]
 8006c78:	f8c8 2000 	strlt.w	r2, [r8]
 8006c7c:	4bae      	ldr	r3, [pc, #696]	; (8006f38 <_dtoa_r+0x318>)
 8006c7e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006c82:	ea33 0308 	bics.w	r3, r3, r8
 8006c86:	d11b      	bne.n	8006cc0 <_dtoa_r+0xa0>
 8006c88:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c8c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006c8e:	6013      	str	r3, [r2, #0]
 8006c90:	9b02      	ldr	r3, [sp, #8]
 8006c92:	b923      	cbnz	r3, 8006c9e <_dtoa_r+0x7e>
 8006c94:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	f000 8545 	beq.w	8007728 <_dtoa_r+0xb08>
 8006c9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ca0:	b953      	cbnz	r3, 8006cb8 <_dtoa_r+0x98>
 8006ca2:	4ba6      	ldr	r3, [pc, #664]	; (8006f3c <_dtoa_r+0x31c>)
 8006ca4:	e021      	b.n	8006cea <_dtoa_r+0xca>
 8006ca6:	4ba6      	ldr	r3, [pc, #664]	; (8006f40 <_dtoa_r+0x320>)
 8006ca8:	9306      	str	r3, [sp, #24]
 8006caa:	3308      	adds	r3, #8
 8006cac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006cae:	6013      	str	r3, [r2, #0]
 8006cb0:	9806      	ldr	r0, [sp, #24]
 8006cb2:	b015      	add	sp, #84	; 0x54
 8006cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb8:	4ba0      	ldr	r3, [pc, #640]	; (8006f3c <_dtoa_r+0x31c>)
 8006cba:	9306      	str	r3, [sp, #24]
 8006cbc:	3303      	adds	r3, #3
 8006cbe:	e7f5      	b.n	8006cac <_dtoa_r+0x8c>
 8006cc0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	4630      	mov	r0, r6
 8006cca:	4639      	mov	r1, r7
 8006ccc:	f7f9 fe6c 	bl	80009a8 <__aeabi_dcmpeq>
 8006cd0:	4682      	mov	sl, r0
 8006cd2:	b160      	cbz	r0, 8006cee <_dtoa_r+0xce>
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006cd8:	6013      	str	r3, [r2, #0]
 8006cda:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 8520 	beq.w	8007722 <_dtoa_r+0xb02>
 8006ce2:	4b98      	ldr	r3, [pc, #608]	; (8006f44 <_dtoa_r+0x324>)
 8006ce4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006ce6:	6013      	str	r3, [r2, #0]
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	9306      	str	r3, [sp, #24]
 8006cec:	e7e0      	b.n	8006cb0 <_dtoa_r+0x90>
 8006cee:	ab12      	add	r3, sp, #72	; 0x48
 8006cf0:	9301      	str	r3, [sp, #4]
 8006cf2:	ab13      	add	r3, sp, #76	; 0x4c
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	4632      	mov	r2, r6
 8006cf8:	463b      	mov	r3, r7
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	f001 f800 	bl	8007d00 <__d2b>
 8006d00:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006d04:	4683      	mov	fp, r0
 8006d06:	2d00      	cmp	r5, #0
 8006d08:	d07d      	beq.n	8006e06 <_dtoa_r+0x1e6>
 8006d0a:	46b0      	mov	r8, r6
 8006d0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006d10:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8006d14:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8006d18:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006d1c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8006d20:	2200      	movs	r2, #0
 8006d22:	4b89      	ldr	r3, [pc, #548]	; (8006f48 <_dtoa_r+0x328>)
 8006d24:	4640      	mov	r0, r8
 8006d26:	4649      	mov	r1, r9
 8006d28:	f7f9 fa1e 	bl	8000168 <__aeabi_dsub>
 8006d2c:	a37c      	add	r3, pc, #496	; (adr r3, 8006f20 <_dtoa_r+0x300>)
 8006d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d32:	f7f9 fbd1 	bl	80004d8 <__aeabi_dmul>
 8006d36:	a37c      	add	r3, pc, #496	; (adr r3, 8006f28 <_dtoa_r+0x308>)
 8006d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3c:	f7f9 fa16 	bl	800016c <__adddf3>
 8006d40:	4606      	mov	r6, r0
 8006d42:	4628      	mov	r0, r5
 8006d44:	460f      	mov	r7, r1
 8006d46:	f7f9 fb5d 	bl	8000404 <__aeabi_i2d>
 8006d4a:	a379      	add	r3, pc, #484	; (adr r3, 8006f30 <_dtoa_r+0x310>)
 8006d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d50:	f7f9 fbc2 	bl	80004d8 <__aeabi_dmul>
 8006d54:	4602      	mov	r2, r0
 8006d56:	460b      	mov	r3, r1
 8006d58:	4630      	mov	r0, r6
 8006d5a:	4639      	mov	r1, r7
 8006d5c:	f7f9 fa06 	bl	800016c <__adddf3>
 8006d60:	4606      	mov	r6, r0
 8006d62:	460f      	mov	r7, r1
 8006d64:	f7f9 fe68 	bl	8000a38 <__aeabi_d2iz>
 8006d68:	2200      	movs	r2, #0
 8006d6a:	4682      	mov	sl, r0
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	4630      	mov	r0, r6
 8006d70:	4639      	mov	r1, r7
 8006d72:	f7f9 fe23 	bl	80009bc <__aeabi_dcmplt>
 8006d76:	b148      	cbz	r0, 8006d8c <_dtoa_r+0x16c>
 8006d78:	4650      	mov	r0, sl
 8006d7a:	f7f9 fb43 	bl	8000404 <__aeabi_i2d>
 8006d7e:	4632      	mov	r2, r6
 8006d80:	463b      	mov	r3, r7
 8006d82:	f7f9 fe11 	bl	80009a8 <__aeabi_dcmpeq>
 8006d86:	b908      	cbnz	r0, 8006d8c <_dtoa_r+0x16c>
 8006d88:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d8c:	f1ba 0f16 	cmp.w	sl, #22
 8006d90:	d85a      	bhi.n	8006e48 <_dtoa_r+0x228>
 8006d92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d96:	496d      	ldr	r1, [pc, #436]	; (8006f4c <_dtoa_r+0x32c>)
 8006d98:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006d9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006da0:	f7f9 fe2a 	bl	80009f8 <__aeabi_dcmpgt>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	d051      	beq.n	8006e4c <_dtoa_r+0x22c>
 8006da8:	2300      	movs	r3, #0
 8006daa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006dae:	930d      	str	r3, [sp, #52]	; 0x34
 8006db0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006db2:	1b5d      	subs	r5, r3, r5
 8006db4:	1e6b      	subs	r3, r5, #1
 8006db6:	9307      	str	r3, [sp, #28]
 8006db8:	bf43      	ittte	mi
 8006dba:	2300      	movmi	r3, #0
 8006dbc:	f1c5 0901 	rsbmi	r9, r5, #1
 8006dc0:	9307      	strmi	r3, [sp, #28]
 8006dc2:	f04f 0900 	movpl.w	r9, #0
 8006dc6:	f1ba 0f00 	cmp.w	sl, #0
 8006dca:	db41      	blt.n	8006e50 <_dtoa_r+0x230>
 8006dcc:	9b07      	ldr	r3, [sp, #28]
 8006dce:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8006dd2:	4453      	add	r3, sl
 8006dd4:	9307      	str	r3, [sp, #28]
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	9308      	str	r3, [sp, #32]
 8006dda:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006ddc:	2b09      	cmp	r3, #9
 8006dde:	f200 808f 	bhi.w	8006f00 <_dtoa_r+0x2e0>
 8006de2:	2b05      	cmp	r3, #5
 8006de4:	bfc4      	itt	gt
 8006de6:	3b04      	subgt	r3, #4
 8006de8:	931e      	strgt	r3, [sp, #120]	; 0x78
 8006dea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006dec:	bfc8      	it	gt
 8006dee:	2500      	movgt	r5, #0
 8006df0:	f1a3 0302 	sub.w	r3, r3, #2
 8006df4:	bfd8      	it	le
 8006df6:	2501      	movle	r5, #1
 8006df8:	2b03      	cmp	r3, #3
 8006dfa:	f200 808d 	bhi.w	8006f18 <_dtoa_r+0x2f8>
 8006dfe:	e8df f003 	tbb	[pc, r3]
 8006e02:	7d7b      	.short	0x7d7b
 8006e04:	6f2f      	.short	0x6f2f
 8006e06:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006e0a:	441d      	add	r5, r3
 8006e0c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006e10:	2820      	cmp	r0, #32
 8006e12:	dd13      	ble.n	8006e3c <_dtoa_r+0x21c>
 8006e14:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006e18:	9b02      	ldr	r3, [sp, #8]
 8006e1a:	fa08 f800 	lsl.w	r8, r8, r0
 8006e1e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006e22:	fa23 f000 	lsr.w	r0, r3, r0
 8006e26:	ea48 0000 	orr.w	r0, r8, r0
 8006e2a:	f7f9 fadb 	bl	80003e4 <__aeabi_ui2d>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	4680      	mov	r8, r0
 8006e32:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8006e36:	3d01      	subs	r5, #1
 8006e38:	9310      	str	r3, [sp, #64]	; 0x40
 8006e3a:	e771      	b.n	8006d20 <_dtoa_r+0x100>
 8006e3c:	9b02      	ldr	r3, [sp, #8]
 8006e3e:	f1c0 0020 	rsb	r0, r0, #32
 8006e42:	fa03 f000 	lsl.w	r0, r3, r0
 8006e46:	e7f0      	b.n	8006e2a <_dtoa_r+0x20a>
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e7b0      	b.n	8006dae <_dtoa_r+0x18e>
 8006e4c:	900d      	str	r0, [sp, #52]	; 0x34
 8006e4e:	e7af      	b.n	8006db0 <_dtoa_r+0x190>
 8006e50:	f1ca 0300 	rsb	r3, sl, #0
 8006e54:	9308      	str	r3, [sp, #32]
 8006e56:	2300      	movs	r3, #0
 8006e58:	eba9 090a 	sub.w	r9, r9, sl
 8006e5c:	930c      	str	r3, [sp, #48]	; 0x30
 8006e5e:	e7bc      	b.n	8006dda <_dtoa_r+0x1ba>
 8006e60:	2301      	movs	r3, #1
 8006e62:	9309      	str	r3, [sp, #36]	; 0x24
 8006e64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	dd74      	ble.n	8006f54 <_dtoa_r+0x334>
 8006e6a:	4698      	mov	r8, r3
 8006e6c:	9304      	str	r3, [sp, #16]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006e72:	6072      	str	r2, [r6, #4]
 8006e74:	2204      	movs	r2, #4
 8006e76:	f102 0014 	add.w	r0, r2, #20
 8006e7a:	4298      	cmp	r0, r3
 8006e7c:	6871      	ldr	r1, [r6, #4]
 8006e7e:	d96e      	bls.n	8006f5e <_dtoa_r+0x33e>
 8006e80:	4620      	mov	r0, r4
 8006e82:	f000 fcb0 	bl	80077e6 <_Balloc>
 8006e86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e88:	6030      	str	r0, [r6, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f1b8 0f0e 	cmp.w	r8, #14
 8006e90:	9306      	str	r3, [sp, #24]
 8006e92:	f200 80ed 	bhi.w	8007070 <_dtoa_r+0x450>
 8006e96:	2d00      	cmp	r5, #0
 8006e98:	f000 80ea 	beq.w	8007070 <_dtoa_r+0x450>
 8006e9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ea0:	f1ba 0f00 	cmp.w	sl, #0
 8006ea4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006ea8:	dd77      	ble.n	8006f9a <_dtoa_r+0x37a>
 8006eaa:	4a28      	ldr	r2, [pc, #160]	; (8006f4c <_dtoa_r+0x32c>)
 8006eac:	f00a 030f 	and.w	r3, sl, #15
 8006eb0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006eb4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006eb8:	06f0      	lsls	r0, r6, #27
 8006eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006ec2:	d568      	bpl.n	8006f96 <_dtoa_r+0x376>
 8006ec4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006ec8:	4b21      	ldr	r3, [pc, #132]	; (8006f50 <_dtoa_r+0x330>)
 8006eca:	2503      	movs	r5, #3
 8006ecc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ed0:	f7f9 fc2c 	bl	800072c <__aeabi_ddiv>
 8006ed4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ed8:	f006 060f 	and.w	r6, r6, #15
 8006edc:	4f1c      	ldr	r7, [pc, #112]	; (8006f50 <_dtoa_r+0x330>)
 8006ede:	e04f      	b.n	8006f80 <_dtoa_r+0x360>
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ee4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006ee6:	4453      	add	r3, sl
 8006ee8:	f103 0801 	add.w	r8, r3, #1
 8006eec:	9304      	str	r3, [sp, #16]
 8006eee:	4643      	mov	r3, r8
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	bfb8      	it	lt
 8006ef4:	2301      	movlt	r3, #1
 8006ef6:	e7ba      	b.n	8006e6e <_dtoa_r+0x24e>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	e7b2      	b.n	8006e62 <_dtoa_r+0x242>
 8006efc:	2300      	movs	r3, #0
 8006efe:	e7f0      	b.n	8006ee2 <_dtoa_r+0x2c2>
 8006f00:	2501      	movs	r5, #1
 8006f02:	2300      	movs	r3, #0
 8006f04:	9509      	str	r5, [sp, #36]	; 0x24
 8006f06:	931e      	str	r3, [sp, #120]	; 0x78
 8006f08:	f04f 33ff 	mov.w	r3, #4294967295
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	9304      	str	r3, [sp, #16]
 8006f10:	4698      	mov	r8, r3
 8006f12:	2312      	movs	r3, #18
 8006f14:	921f      	str	r2, [sp, #124]	; 0x7c
 8006f16:	e7aa      	b.n	8006e6e <_dtoa_r+0x24e>
 8006f18:	2301      	movs	r3, #1
 8006f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8006f1c:	e7f4      	b.n	8006f08 <_dtoa_r+0x2e8>
 8006f1e:	bf00      	nop
 8006f20:	636f4361 	.word	0x636f4361
 8006f24:	3fd287a7 	.word	0x3fd287a7
 8006f28:	8b60c8b3 	.word	0x8b60c8b3
 8006f2c:	3fc68a28 	.word	0x3fc68a28
 8006f30:	509f79fb 	.word	0x509f79fb
 8006f34:	3fd34413 	.word	0x3fd34413
 8006f38:	7ff00000 	.word	0x7ff00000
 8006f3c:	08008711 	.word	0x08008711
 8006f40:	08008708 	.word	0x08008708
 8006f44:	080086e5 	.word	0x080086e5
 8006f48:	3ff80000 	.word	0x3ff80000
 8006f4c:	08008740 	.word	0x08008740
 8006f50:	08008718 	.word	0x08008718
 8006f54:	2301      	movs	r3, #1
 8006f56:	9304      	str	r3, [sp, #16]
 8006f58:	4698      	mov	r8, r3
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	e7da      	b.n	8006f14 <_dtoa_r+0x2f4>
 8006f5e:	3101      	adds	r1, #1
 8006f60:	6071      	str	r1, [r6, #4]
 8006f62:	0052      	lsls	r2, r2, #1
 8006f64:	e787      	b.n	8006e76 <_dtoa_r+0x256>
 8006f66:	07f1      	lsls	r1, r6, #31
 8006f68:	d508      	bpl.n	8006f7c <_dtoa_r+0x35c>
 8006f6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f72:	f7f9 fab1 	bl	80004d8 <__aeabi_dmul>
 8006f76:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006f7a:	3501      	adds	r5, #1
 8006f7c:	1076      	asrs	r6, r6, #1
 8006f7e:	3708      	adds	r7, #8
 8006f80:	2e00      	cmp	r6, #0
 8006f82:	d1f0      	bne.n	8006f66 <_dtoa_r+0x346>
 8006f84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006f88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f8c:	f7f9 fbce 	bl	800072c <__aeabi_ddiv>
 8006f90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f94:	e01b      	b.n	8006fce <_dtoa_r+0x3ae>
 8006f96:	2502      	movs	r5, #2
 8006f98:	e7a0      	b.n	8006edc <_dtoa_r+0x2bc>
 8006f9a:	f000 80a4 	beq.w	80070e6 <_dtoa_r+0x4c6>
 8006f9e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006fa2:	f1ca 0600 	rsb	r6, sl, #0
 8006fa6:	4ba0      	ldr	r3, [pc, #640]	; (8007228 <_dtoa_r+0x608>)
 8006fa8:	f006 020f 	and.w	r2, r6, #15
 8006fac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb4:	f7f9 fa90 	bl	80004d8 <__aeabi_dmul>
 8006fb8:	2502      	movs	r5, #2
 8006fba:	2300      	movs	r3, #0
 8006fbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fc0:	4f9a      	ldr	r7, [pc, #616]	; (800722c <_dtoa_r+0x60c>)
 8006fc2:	1136      	asrs	r6, r6, #4
 8006fc4:	2e00      	cmp	r6, #0
 8006fc6:	f040 8083 	bne.w	80070d0 <_dtoa_r+0x4b0>
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1e0      	bne.n	8006f90 <_dtoa_r+0x370>
 8006fce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 808a 	beq.w	80070ea <_dtoa_r+0x4ca>
 8006fd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fda:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006fde:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	4b92      	ldr	r3, [pc, #584]	; (8007230 <_dtoa_r+0x610>)
 8006fe6:	f7f9 fce9 	bl	80009bc <__aeabi_dcmplt>
 8006fea:	2800      	cmp	r0, #0
 8006fec:	d07d      	beq.n	80070ea <_dtoa_r+0x4ca>
 8006fee:	f1b8 0f00 	cmp.w	r8, #0
 8006ff2:	d07a      	beq.n	80070ea <_dtoa_r+0x4ca>
 8006ff4:	9b04      	ldr	r3, [sp, #16]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	dd36      	ble.n	8007068 <_dtoa_r+0x448>
 8006ffa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006ffe:	2200      	movs	r2, #0
 8007000:	4b8c      	ldr	r3, [pc, #560]	; (8007234 <_dtoa_r+0x614>)
 8007002:	f7f9 fa69 	bl	80004d8 <__aeabi_dmul>
 8007006:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800700a:	9e04      	ldr	r6, [sp, #16]
 800700c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8007010:	3501      	adds	r5, #1
 8007012:	4628      	mov	r0, r5
 8007014:	f7f9 f9f6 	bl	8000404 <__aeabi_i2d>
 8007018:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800701c:	f7f9 fa5c 	bl	80004d8 <__aeabi_dmul>
 8007020:	2200      	movs	r2, #0
 8007022:	4b85      	ldr	r3, [pc, #532]	; (8007238 <_dtoa_r+0x618>)
 8007024:	f7f9 f8a2 	bl	800016c <__adddf3>
 8007028:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800702c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007030:	950b      	str	r5, [sp, #44]	; 0x2c
 8007032:	2e00      	cmp	r6, #0
 8007034:	d15c      	bne.n	80070f0 <_dtoa_r+0x4d0>
 8007036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800703a:	2200      	movs	r2, #0
 800703c:	4b7f      	ldr	r3, [pc, #508]	; (800723c <_dtoa_r+0x61c>)
 800703e:	f7f9 f893 	bl	8000168 <__aeabi_dsub>
 8007042:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007044:	462b      	mov	r3, r5
 8007046:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800704a:	f7f9 fcd5 	bl	80009f8 <__aeabi_dcmpgt>
 800704e:	2800      	cmp	r0, #0
 8007050:	f040 8281 	bne.w	8007556 <_dtoa_r+0x936>
 8007054:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007058:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800705a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800705e:	f7f9 fcad 	bl	80009bc <__aeabi_dcmplt>
 8007062:	2800      	cmp	r0, #0
 8007064:	f040 8275 	bne.w	8007552 <_dtoa_r+0x932>
 8007068:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800706c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007070:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007072:	2b00      	cmp	r3, #0
 8007074:	f2c0 814b 	blt.w	800730e <_dtoa_r+0x6ee>
 8007078:	f1ba 0f0e 	cmp.w	sl, #14
 800707c:	f300 8147 	bgt.w	800730e <_dtoa_r+0x6ee>
 8007080:	4b69      	ldr	r3, [pc, #420]	; (8007228 <_dtoa_r+0x608>)
 8007082:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800708e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007090:	2b00      	cmp	r3, #0
 8007092:	f280 80d7 	bge.w	8007244 <_dtoa_r+0x624>
 8007096:	f1b8 0f00 	cmp.w	r8, #0
 800709a:	f300 80d3 	bgt.w	8007244 <_dtoa_r+0x624>
 800709e:	f040 8257 	bne.w	8007550 <_dtoa_r+0x930>
 80070a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070a6:	2200      	movs	r2, #0
 80070a8:	4b64      	ldr	r3, [pc, #400]	; (800723c <_dtoa_r+0x61c>)
 80070aa:	f7f9 fa15 	bl	80004d8 <__aeabi_dmul>
 80070ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070b2:	f7f9 fc97 	bl	80009e4 <__aeabi_dcmpge>
 80070b6:	4646      	mov	r6, r8
 80070b8:	4647      	mov	r7, r8
 80070ba:	2800      	cmp	r0, #0
 80070bc:	f040 822d 	bne.w	800751a <_dtoa_r+0x8fa>
 80070c0:	9b06      	ldr	r3, [sp, #24]
 80070c2:	9a06      	ldr	r2, [sp, #24]
 80070c4:	1c5d      	adds	r5, r3, #1
 80070c6:	2331      	movs	r3, #49	; 0x31
 80070c8:	f10a 0a01 	add.w	sl, sl, #1
 80070cc:	7013      	strb	r3, [r2, #0]
 80070ce:	e228      	b.n	8007522 <_dtoa_r+0x902>
 80070d0:	07f2      	lsls	r2, r6, #31
 80070d2:	d505      	bpl.n	80070e0 <_dtoa_r+0x4c0>
 80070d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070d8:	f7f9 f9fe 	bl	80004d8 <__aeabi_dmul>
 80070dc:	2301      	movs	r3, #1
 80070de:	3501      	adds	r5, #1
 80070e0:	1076      	asrs	r6, r6, #1
 80070e2:	3708      	adds	r7, #8
 80070e4:	e76e      	b.n	8006fc4 <_dtoa_r+0x3a4>
 80070e6:	2502      	movs	r5, #2
 80070e8:	e771      	b.n	8006fce <_dtoa_r+0x3ae>
 80070ea:	4657      	mov	r7, sl
 80070ec:	4646      	mov	r6, r8
 80070ee:	e790      	b.n	8007012 <_dtoa_r+0x3f2>
 80070f0:	4b4d      	ldr	r3, [pc, #308]	; (8007228 <_dtoa_r+0x608>)
 80070f2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80070f6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80070fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d048      	beq.n	8007192 <_dtoa_r+0x572>
 8007100:	4602      	mov	r2, r0
 8007102:	460b      	mov	r3, r1
 8007104:	2000      	movs	r0, #0
 8007106:	494e      	ldr	r1, [pc, #312]	; (8007240 <_dtoa_r+0x620>)
 8007108:	f7f9 fb10 	bl	800072c <__aeabi_ddiv>
 800710c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007110:	f7f9 f82a 	bl	8000168 <__aeabi_dsub>
 8007114:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007118:	9d06      	ldr	r5, [sp, #24]
 800711a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800711e:	f7f9 fc8b 	bl	8000a38 <__aeabi_d2iz>
 8007122:	9011      	str	r0, [sp, #68]	; 0x44
 8007124:	f7f9 f96e 	bl	8000404 <__aeabi_i2d>
 8007128:	4602      	mov	r2, r0
 800712a:	460b      	mov	r3, r1
 800712c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007130:	f7f9 f81a 	bl	8000168 <__aeabi_dsub>
 8007134:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007136:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800713a:	3330      	adds	r3, #48	; 0x30
 800713c:	f805 3b01 	strb.w	r3, [r5], #1
 8007140:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007144:	f7f9 fc3a 	bl	80009bc <__aeabi_dcmplt>
 8007148:	2800      	cmp	r0, #0
 800714a:	d163      	bne.n	8007214 <_dtoa_r+0x5f4>
 800714c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007150:	2000      	movs	r0, #0
 8007152:	4937      	ldr	r1, [pc, #220]	; (8007230 <_dtoa_r+0x610>)
 8007154:	f7f9 f808 	bl	8000168 <__aeabi_dsub>
 8007158:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800715c:	f7f9 fc2e 	bl	80009bc <__aeabi_dcmplt>
 8007160:	2800      	cmp	r0, #0
 8007162:	f040 80b5 	bne.w	80072d0 <_dtoa_r+0x6b0>
 8007166:	9b06      	ldr	r3, [sp, #24]
 8007168:	1aeb      	subs	r3, r5, r3
 800716a:	429e      	cmp	r6, r3
 800716c:	f77f af7c 	ble.w	8007068 <_dtoa_r+0x448>
 8007170:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007174:	2200      	movs	r2, #0
 8007176:	4b2f      	ldr	r3, [pc, #188]	; (8007234 <_dtoa_r+0x614>)
 8007178:	f7f9 f9ae 	bl	80004d8 <__aeabi_dmul>
 800717c:	2200      	movs	r2, #0
 800717e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007182:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007186:	4b2b      	ldr	r3, [pc, #172]	; (8007234 <_dtoa_r+0x614>)
 8007188:	f7f9 f9a6 	bl	80004d8 <__aeabi_dmul>
 800718c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007190:	e7c3      	b.n	800711a <_dtoa_r+0x4fa>
 8007192:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007196:	f7f9 f99f 	bl	80004d8 <__aeabi_dmul>
 800719a:	9b06      	ldr	r3, [sp, #24]
 800719c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80071a0:	199d      	adds	r5, r3, r6
 80071a2:	461e      	mov	r6, r3
 80071a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071a8:	f7f9 fc46 	bl	8000a38 <__aeabi_d2iz>
 80071ac:	9011      	str	r0, [sp, #68]	; 0x44
 80071ae:	f7f9 f929 	bl	8000404 <__aeabi_i2d>
 80071b2:	4602      	mov	r2, r0
 80071b4:	460b      	mov	r3, r1
 80071b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071ba:	f7f8 ffd5 	bl	8000168 <__aeabi_dsub>
 80071be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071c4:	3330      	adds	r3, #48	; 0x30
 80071c6:	f806 3b01 	strb.w	r3, [r6], #1
 80071ca:	42ae      	cmp	r6, r5
 80071cc:	f04f 0200 	mov.w	r2, #0
 80071d0:	d124      	bne.n	800721c <_dtoa_r+0x5fc>
 80071d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80071d6:	4b1a      	ldr	r3, [pc, #104]	; (8007240 <_dtoa_r+0x620>)
 80071d8:	f7f8 ffc8 	bl	800016c <__adddf3>
 80071dc:	4602      	mov	r2, r0
 80071de:	460b      	mov	r3, r1
 80071e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071e4:	f7f9 fc08 	bl	80009f8 <__aeabi_dcmpgt>
 80071e8:	2800      	cmp	r0, #0
 80071ea:	d171      	bne.n	80072d0 <_dtoa_r+0x6b0>
 80071ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80071f0:	2000      	movs	r0, #0
 80071f2:	4913      	ldr	r1, [pc, #76]	; (8007240 <_dtoa_r+0x620>)
 80071f4:	f7f8 ffb8 	bl	8000168 <__aeabi_dsub>
 80071f8:	4602      	mov	r2, r0
 80071fa:	460b      	mov	r3, r1
 80071fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007200:	f7f9 fbdc 	bl	80009bc <__aeabi_dcmplt>
 8007204:	2800      	cmp	r0, #0
 8007206:	f43f af2f 	beq.w	8007068 <_dtoa_r+0x448>
 800720a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800720e:	1e6a      	subs	r2, r5, #1
 8007210:	2b30      	cmp	r3, #48	; 0x30
 8007212:	d001      	beq.n	8007218 <_dtoa_r+0x5f8>
 8007214:	46ba      	mov	sl, r7
 8007216:	e04a      	b.n	80072ae <_dtoa_r+0x68e>
 8007218:	4615      	mov	r5, r2
 800721a:	e7f6      	b.n	800720a <_dtoa_r+0x5ea>
 800721c:	4b05      	ldr	r3, [pc, #20]	; (8007234 <_dtoa_r+0x614>)
 800721e:	f7f9 f95b 	bl	80004d8 <__aeabi_dmul>
 8007222:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007226:	e7bd      	b.n	80071a4 <_dtoa_r+0x584>
 8007228:	08008740 	.word	0x08008740
 800722c:	08008718 	.word	0x08008718
 8007230:	3ff00000 	.word	0x3ff00000
 8007234:	40240000 	.word	0x40240000
 8007238:	401c0000 	.word	0x401c0000
 800723c:	40140000 	.word	0x40140000
 8007240:	3fe00000 	.word	0x3fe00000
 8007244:	9d06      	ldr	r5, [sp, #24]
 8007246:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800724a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800724e:	4630      	mov	r0, r6
 8007250:	4639      	mov	r1, r7
 8007252:	f7f9 fa6b 	bl	800072c <__aeabi_ddiv>
 8007256:	f7f9 fbef 	bl	8000a38 <__aeabi_d2iz>
 800725a:	4681      	mov	r9, r0
 800725c:	f7f9 f8d2 	bl	8000404 <__aeabi_i2d>
 8007260:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007264:	f7f9 f938 	bl	80004d8 <__aeabi_dmul>
 8007268:	4602      	mov	r2, r0
 800726a:	460b      	mov	r3, r1
 800726c:	4630      	mov	r0, r6
 800726e:	4639      	mov	r1, r7
 8007270:	f7f8 ff7a 	bl	8000168 <__aeabi_dsub>
 8007274:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8007278:	f805 6b01 	strb.w	r6, [r5], #1
 800727c:	9e06      	ldr	r6, [sp, #24]
 800727e:	4602      	mov	r2, r0
 8007280:	1bae      	subs	r6, r5, r6
 8007282:	45b0      	cmp	r8, r6
 8007284:	460b      	mov	r3, r1
 8007286:	d135      	bne.n	80072f4 <_dtoa_r+0x6d4>
 8007288:	f7f8 ff70 	bl	800016c <__adddf3>
 800728c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007290:	4606      	mov	r6, r0
 8007292:	460f      	mov	r7, r1
 8007294:	f7f9 fbb0 	bl	80009f8 <__aeabi_dcmpgt>
 8007298:	b9c8      	cbnz	r0, 80072ce <_dtoa_r+0x6ae>
 800729a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800729e:	4630      	mov	r0, r6
 80072a0:	4639      	mov	r1, r7
 80072a2:	f7f9 fb81 	bl	80009a8 <__aeabi_dcmpeq>
 80072a6:	b110      	cbz	r0, 80072ae <_dtoa_r+0x68e>
 80072a8:	f019 0f01 	tst.w	r9, #1
 80072ac:	d10f      	bne.n	80072ce <_dtoa_r+0x6ae>
 80072ae:	4659      	mov	r1, fp
 80072b0:	4620      	mov	r0, r4
 80072b2:	f000 facc 	bl	800784e <_Bfree>
 80072b6:	2300      	movs	r3, #0
 80072b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80072ba:	702b      	strb	r3, [r5, #0]
 80072bc:	f10a 0301 	add.w	r3, sl, #1
 80072c0:	6013      	str	r3, [r2, #0]
 80072c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f43f acf3 	beq.w	8006cb0 <_dtoa_r+0x90>
 80072ca:	601d      	str	r5, [r3, #0]
 80072cc:	e4f0      	b.n	8006cb0 <_dtoa_r+0x90>
 80072ce:	4657      	mov	r7, sl
 80072d0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80072d4:	1e6b      	subs	r3, r5, #1
 80072d6:	2a39      	cmp	r2, #57	; 0x39
 80072d8:	d106      	bne.n	80072e8 <_dtoa_r+0x6c8>
 80072da:	9a06      	ldr	r2, [sp, #24]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d107      	bne.n	80072f0 <_dtoa_r+0x6d0>
 80072e0:	2330      	movs	r3, #48	; 0x30
 80072e2:	7013      	strb	r3, [r2, #0]
 80072e4:	4613      	mov	r3, r2
 80072e6:	3701      	adds	r7, #1
 80072e8:	781a      	ldrb	r2, [r3, #0]
 80072ea:	3201      	adds	r2, #1
 80072ec:	701a      	strb	r2, [r3, #0]
 80072ee:	e791      	b.n	8007214 <_dtoa_r+0x5f4>
 80072f0:	461d      	mov	r5, r3
 80072f2:	e7ed      	b.n	80072d0 <_dtoa_r+0x6b0>
 80072f4:	2200      	movs	r2, #0
 80072f6:	4b99      	ldr	r3, [pc, #612]	; (800755c <_dtoa_r+0x93c>)
 80072f8:	f7f9 f8ee 	bl	80004d8 <__aeabi_dmul>
 80072fc:	2200      	movs	r2, #0
 80072fe:	2300      	movs	r3, #0
 8007300:	4606      	mov	r6, r0
 8007302:	460f      	mov	r7, r1
 8007304:	f7f9 fb50 	bl	80009a8 <__aeabi_dcmpeq>
 8007308:	2800      	cmp	r0, #0
 800730a:	d09e      	beq.n	800724a <_dtoa_r+0x62a>
 800730c:	e7cf      	b.n	80072ae <_dtoa_r+0x68e>
 800730e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007310:	2a00      	cmp	r2, #0
 8007312:	f000 8088 	beq.w	8007426 <_dtoa_r+0x806>
 8007316:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007318:	2a01      	cmp	r2, #1
 800731a:	dc6d      	bgt.n	80073f8 <_dtoa_r+0x7d8>
 800731c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800731e:	2a00      	cmp	r2, #0
 8007320:	d066      	beq.n	80073f0 <_dtoa_r+0x7d0>
 8007322:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007326:	464d      	mov	r5, r9
 8007328:	9e08      	ldr	r6, [sp, #32]
 800732a:	9a07      	ldr	r2, [sp, #28]
 800732c:	2101      	movs	r1, #1
 800732e:	441a      	add	r2, r3
 8007330:	4620      	mov	r0, r4
 8007332:	4499      	add	r9, r3
 8007334:	9207      	str	r2, [sp, #28]
 8007336:	f000 fb2a 	bl	800798e <__i2b>
 800733a:	4607      	mov	r7, r0
 800733c:	2d00      	cmp	r5, #0
 800733e:	dd0b      	ble.n	8007358 <_dtoa_r+0x738>
 8007340:	9b07      	ldr	r3, [sp, #28]
 8007342:	2b00      	cmp	r3, #0
 8007344:	dd08      	ble.n	8007358 <_dtoa_r+0x738>
 8007346:	42ab      	cmp	r3, r5
 8007348:	bfa8      	it	ge
 800734a:	462b      	movge	r3, r5
 800734c:	9a07      	ldr	r2, [sp, #28]
 800734e:	eba9 0903 	sub.w	r9, r9, r3
 8007352:	1aed      	subs	r5, r5, r3
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	9307      	str	r3, [sp, #28]
 8007358:	9b08      	ldr	r3, [sp, #32]
 800735a:	b1eb      	cbz	r3, 8007398 <_dtoa_r+0x778>
 800735c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800735e:	2b00      	cmp	r3, #0
 8007360:	d065      	beq.n	800742e <_dtoa_r+0x80e>
 8007362:	b18e      	cbz	r6, 8007388 <_dtoa_r+0x768>
 8007364:	4639      	mov	r1, r7
 8007366:	4632      	mov	r2, r6
 8007368:	4620      	mov	r0, r4
 800736a:	f000 fbaf 	bl	8007acc <__pow5mult>
 800736e:	465a      	mov	r2, fp
 8007370:	4601      	mov	r1, r0
 8007372:	4607      	mov	r7, r0
 8007374:	4620      	mov	r0, r4
 8007376:	f000 fb13 	bl	80079a0 <__multiply>
 800737a:	4659      	mov	r1, fp
 800737c:	900a      	str	r0, [sp, #40]	; 0x28
 800737e:	4620      	mov	r0, r4
 8007380:	f000 fa65 	bl	800784e <_Bfree>
 8007384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007386:	469b      	mov	fp, r3
 8007388:	9b08      	ldr	r3, [sp, #32]
 800738a:	1b9a      	subs	r2, r3, r6
 800738c:	d004      	beq.n	8007398 <_dtoa_r+0x778>
 800738e:	4659      	mov	r1, fp
 8007390:	4620      	mov	r0, r4
 8007392:	f000 fb9b 	bl	8007acc <__pow5mult>
 8007396:	4683      	mov	fp, r0
 8007398:	2101      	movs	r1, #1
 800739a:	4620      	mov	r0, r4
 800739c:	f000 faf7 	bl	800798e <__i2b>
 80073a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073a2:	4606      	mov	r6, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f000 81c6 	beq.w	8007736 <_dtoa_r+0xb16>
 80073aa:	461a      	mov	r2, r3
 80073ac:	4601      	mov	r1, r0
 80073ae:	4620      	mov	r0, r4
 80073b0:	f000 fb8c 	bl	8007acc <__pow5mult>
 80073b4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80073b6:	4606      	mov	r6, r0
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	dc3e      	bgt.n	800743a <_dtoa_r+0x81a>
 80073bc:	9b02      	ldr	r3, [sp, #8]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d137      	bne.n	8007432 <_dtoa_r+0x812>
 80073c2:	9b03      	ldr	r3, [sp, #12]
 80073c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d134      	bne.n	8007436 <_dtoa_r+0x816>
 80073cc:	9b03      	ldr	r3, [sp, #12]
 80073ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073d2:	0d1b      	lsrs	r3, r3, #20
 80073d4:	051b      	lsls	r3, r3, #20
 80073d6:	b12b      	cbz	r3, 80073e4 <_dtoa_r+0x7c4>
 80073d8:	9b07      	ldr	r3, [sp, #28]
 80073da:	f109 0901 	add.w	r9, r9, #1
 80073de:	3301      	adds	r3, #1
 80073e0:	9307      	str	r3, [sp, #28]
 80073e2:	2301      	movs	r3, #1
 80073e4:	9308      	str	r3, [sp, #32]
 80073e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d128      	bne.n	800743e <_dtoa_r+0x81e>
 80073ec:	2001      	movs	r0, #1
 80073ee:	e02e      	b.n	800744e <_dtoa_r+0x82e>
 80073f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073f2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80073f6:	e796      	b.n	8007326 <_dtoa_r+0x706>
 80073f8:	9b08      	ldr	r3, [sp, #32]
 80073fa:	f108 36ff 	add.w	r6, r8, #4294967295
 80073fe:	42b3      	cmp	r3, r6
 8007400:	bfb7      	itett	lt
 8007402:	9b08      	ldrlt	r3, [sp, #32]
 8007404:	1b9e      	subge	r6, r3, r6
 8007406:	1af2      	sublt	r2, r6, r3
 8007408:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800740a:	bfbf      	itttt	lt
 800740c:	9608      	strlt	r6, [sp, #32]
 800740e:	189b      	addlt	r3, r3, r2
 8007410:	930c      	strlt	r3, [sp, #48]	; 0x30
 8007412:	2600      	movlt	r6, #0
 8007414:	f1b8 0f00 	cmp.w	r8, #0
 8007418:	bfb9      	ittee	lt
 800741a:	eba9 0508 	sublt.w	r5, r9, r8
 800741e:	2300      	movlt	r3, #0
 8007420:	464d      	movge	r5, r9
 8007422:	4643      	movge	r3, r8
 8007424:	e781      	b.n	800732a <_dtoa_r+0x70a>
 8007426:	9e08      	ldr	r6, [sp, #32]
 8007428:	464d      	mov	r5, r9
 800742a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800742c:	e786      	b.n	800733c <_dtoa_r+0x71c>
 800742e:	9a08      	ldr	r2, [sp, #32]
 8007430:	e7ad      	b.n	800738e <_dtoa_r+0x76e>
 8007432:	2300      	movs	r3, #0
 8007434:	e7d6      	b.n	80073e4 <_dtoa_r+0x7c4>
 8007436:	9b02      	ldr	r3, [sp, #8]
 8007438:	e7d4      	b.n	80073e4 <_dtoa_r+0x7c4>
 800743a:	2300      	movs	r3, #0
 800743c:	9308      	str	r3, [sp, #32]
 800743e:	6933      	ldr	r3, [r6, #16]
 8007440:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007444:	6918      	ldr	r0, [r3, #16]
 8007446:	f000 fa54 	bl	80078f2 <__hi0bits>
 800744a:	f1c0 0020 	rsb	r0, r0, #32
 800744e:	9b07      	ldr	r3, [sp, #28]
 8007450:	4418      	add	r0, r3
 8007452:	f010 001f 	ands.w	r0, r0, #31
 8007456:	d047      	beq.n	80074e8 <_dtoa_r+0x8c8>
 8007458:	f1c0 0320 	rsb	r3, r0, #32
 800745c:	2b04      	cmp	r3, #4
 800745e:	dd3b      	ble.n	80074d8 <_dtoa_r+0x8b8>
 8007460:	9b07      	ldr	r3, [sp, #28]
 8007462:	f1c0 001c 	rsb	r0, r0, #28
 8007466:	4481      	add	r9, r0
 8007468:	4405      	add	r5, r0
 800746a:	4403      	add	r3, r0
 800746c:	9307      	str	r3, [sp, #28]
 800746e:	f1b9 0f00 	cmp.w	r9, #0
 8007472:	dd05      	ble.n	8007480 <_dtoa_r+0x860>
 8007474:	4659      	mov	r1, fp
 8007476:	464a      	mov	r2, r9
 8007478:	4620      	mov	r0, r4
 800747a:	f000 fb75 	bl	8007b68 <__lshift>
 800747e:	4683      	mov	fp, r0
 8007480:	9b07      	ldr	r3, [sp, #28]
 8007482:	2b00      	cmp	r3, #0
 8007484:	dd05      	ble.n	8007492 <_dtoa_r+0x872>
 8007486:	4631      	mov	r1, r6
 8007488:	461a      	mov	r2, r3
 800748a:	4620      	mov	r0, r4
 800748c:	f000 fb6c 	bl	8007b68 <__lshift>
 8007490:	4606      	mov	r6, r0
 8007492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007494:	b353      	cbz	r3, 80074ec <_dtoa_r+0x8cc>
 8007496:	4631      	mov	r1, r6
 8007498:	4658      	mov	r0, fp
 800749a:	f000 fbb9 	bl	8007c10 <__mcmp>
 800749e:	2800      	cmp	r0, #0
 80074a0:	da24      	bge.n	80074ec <_dtoa_r+0x8cc>
 80074a2:	2300      	movs	r3, #0
 80074a4:	4659      	mov	r1, fp
 80074a6:	220a      	movs	r2, #10
 80074a8:	4620      	mov	r0, r4
 80074aa:	f000 f9e7 	bl	800787c <__multadd>
 80074ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80074b4:	4683      	mov	fp, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f000 8144 	beq.w	8007744 <_dtoa_r+0xb24>
 80074bc:	2300      	movs	r3, #0
 80074be:	4639      	mov	r1, r7
 80074c0:	220a      	movs	r2, #10
 80074c2:	4620      	mov	r0, r4
 80074c4:	f000 f9da 	bl	800787c <__multadd>
 80074c8:	9b04      	ldr	r3, [sp, #16]
 80074ca:	4607      	mov	r7, r0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	dc4d      	bgt.n	800756c <_dtoa_r+0x94c>
 80074d0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	dd4a      	ble.n	800756c <_dtoa_r+0x94c>
 80074d6:	e011      	b.n	80074fc <_dtoa_r+0x8dc>
 80074d8:	d0c9      	beq.n	800746e <_dtoa_r+0x84e>
 80074da:	9a07      	ldr	r2, [sp, #28]
 80074dc:	331c      	adds	r3, #28
 80074de:	441a      	add	r2, r3
 80074e0:	4499      	add	r9, r3
 80074e2:	441d      	add	r5, r3
 80074e4:	4613      	mov	r3, r2
 80074e6:	e7c1      	b.n	800746c <_dtoa_r+0x84c>
 80074e8:	4603      	mov	r3, r0
 80074ea:	e7f6      	b.n	80074da <_dtoa_r+0x8ba>
 80074ec:	f1b8 0f00 	cmp.w	r8, #0
 80074f0:	dc36      	bgt.n	8007560 <_dtoa_r+0x940>
 80074f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	dd33      	ble.n	8007560 <_dtoa_r+0x940>
 80074f8:	f8cd 8010 	str.w	r8, [sp, #16]
 80074fc:	9b04      	ldr	r3, [sp, #16]
 80074fe:	b963      	cbnz	r3, 800751a <_dtoa_r+0x8fa>
 8007500:	4631      	mov	r1, r6
 8007502:	2205      	movs	r2, #5
 8007504:	4620      	mov	r0, r4
 8007506:	f000 f9b9 	bl	800787c <__multadd>
 800750a:	4601      	mov	r1, r0
 800750c:	4606      	mov	r6, r0
 800750e:	4658      	mov	r0, fp
 8007510:	f000 fb7e 	bl	8007c10 <__mcmp>
 8007514:	2800      	cmp	r0, #0
 8007516:	f73f add3 	bgt.w	80070c0 <_dtoa_r+0x4a0>
 800751a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800751c:	9d06      	ldr	r5, [sp, #24]
 800751e:	ea6f 0a03 	mvn.w	sl, r3
 8007522:	f04f 0900 	mov.w	r9, #0
 8007526:	4631      	mov	r1, r6
 8007528:	4620      	mov	r0, r4
 800752a:	f000 f990 	bl	800784e <_Bfree>
 800752e:	2f00      	cmp	r7, #0
 8007530:	f43f aebd 	beq.w	80072ae <_dtoa_r+0x68e>
 8007534:	f1b9 0f00 	cmp.w	r9, #0
 8007538:	d005      	beq.n	8007546 <_dtoa_r+0x926>
 800753a:	45b9      	cmp	r9, r7
 800753c:	d003      	beq.n	8007546 <_dtoa_r+0x926>
 800753e:	4649      	mov	r1, r9
 8007540:	4620      	mov	r0, r4
 8007542:	f000 f984 	bl	800784e <_Bfree>
 8007546:	4639      	mov	r1, r7
 8007548:	4620      	mov	r0, r4
 800754a:	f000 f980 	bl	800784e <_Bfree>
 800754e:	e6ae      	b.n	80072ae <_dtoa_r+0x68e>
 8007550:	2600      	movs	r6, #0
 8007552:	4637      	mov	r7, r6
 8007554:	e7e1      	b.n	800751a <_dtoa_r+0x8fa>
 8007556:	46ba      	mov	sl, r7
 8007558:	4637      	mov	r7, r6
 800755a:	e5b1      	b.n	80070c0 <_dtoa_r+0x4a0>
 800755c:	40240000 	.word	0x40240000
 8007560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007562:	f8cd 8010 	str.w	r8, [sp, #16]
 8007566:	2b00      	cmp	r3, #0
 8007568:	f000 80f3 	beq.w	8007752 <_dtoa_r+0xb32>
 800756c:	2d00      	cmp	r5, #0
 800756e:	dd05      	ble.n	800757c <_dtoa_r+0x95c>
 8007570:	4639      	mov	r1, r7
 8007572:	462a      	mov	r2, r5
 8007574:	4620      	mov	r0, r4
 8007576:	f000 faf7 	bl	8007b68 <__lshift>
 800757a:	4607      	mov	r7, r0
 800757c:	9b08      	ldr	r3, [sp, #32]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d04c      	beq.n	800761c <_dtoa_r+0x9fc>
 8007582:	6879      	ldr	r1, [r7, #4]
 8007584:	4620      	mov	r0, r4
 8007586:	f000 f92e 	bl	80077e6 <_Balloc>
 800758a:	4605      	mov	r5, r0
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	f107 010c 	add.w	r1, r7, #12
 8007592:	3202      	adds	r2, #2
 8007594:	0092      	lsls	r2, r2, #2
 8007596:	300c      	adds	r0, #12
 8007598:	f000 f91a 	bl	80077d0 <memcpy>
 800759c:	2201      	movs	r2, #1
 800759e:	4629      	mov	r1, r5
 80075a0:	4620      	mov	r0, r4
 80075a2:	f000 fae1 	bl	8007b68 <__lshift>
 80075a6:	46b9      	mov	r9, r7
 80075a8:	4607      	mov	r7, r0
 80075aa:	9b06      	ldr	r3, [sp, #24]
 80075ac:	9307      	str	r3, [sp, #28]
 80075ae:	9b02      	ldr	r3, [sp, #8]
 80075b0:	f003 0301 	and.w	r3, r3, #1
 80075b4:	9308      	str	r3, [sp, #32]
 80075b6:	4631      	mov	r1, r6
 80075b8:	4658      	mov	r0, fp
 80075ba:	f7ff faa0 	bl	8006afe <quorem>
 80075be:	4649      	mov	r1, r9
 80075c0:	4605      	mov	r5, r0
 80075c2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80075c6:	4658      	mov	r0, fp
 80075c8:	f000 fb22 	bl	8007c10 <__mcmp>
 80075cc:	463a      	mov	r2, r7
 80075ce:	9002      	str	r0, [sp, #8]
 80075d0:	4631      	mov	r1, r6
 80075d2:	4620      	mov	r0, r4
 80075d4:	f000 fb36 	bl	8007c44 <__mdiff>
 80075d8:	68c3      	ldr	r3, [r0, #12]
 80075da:	4602      	mov	r2, r0
 80075dc:	bb03      	cbnz	r3, 8007620 <_dtoa_r+0xa00>
 80075de:	4601      	mov	r1, r0
 80075e0:	9009      	str	r0, [sp, #36]	; 0x24
 80075e2:	4658      	mov	r0, fp
 80075e4:	f000 fb14 	bl	8007c10 <__mcmp>
 80075e8:	4603      	mov	r3, r0
 80075ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075ec:	4611      	mov	r1, r2
 80075ee:	4620      	mov	r0, r4
 80075f0:	9309      	str	r3, [sp, #36]	; 0x24
 80075f2:	f000 f92c 	bl	800784e <_Bfree>
 80075f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075f8:	b9a3      	cbnz	r3, 8007624 <_dtoa_r+0xa04>
 80075fa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80075fc:	b992      	cbnz	r2, 8007624 <_dtoa_r+0xa04>
 80075fe:	9a08      	ldr	r2, [sp, #32]
 8007600:	b982      	cbnz	r2, 8007624 <_dtoa_r+0xa04>
 8007602:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007606:	d029      	beq.n	800765c <_dtoa_r+0xa3c>
 8007608:	9b02      	ldr	r3, [sp, #8]
 800760a:	2b00      	cmp	r3, #0
 800760c:	dd01      	ble.n	8007612 <_dtoa_r+0x9f2>
 800760e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007612:	9b07      	ldr	r3, [sp, #28]
 8007614:	1c5d      	adds	r5, r3, #1
 8007616:	f883 8000 	strb.w	r8, [r3]
 800761a:	e784      	b.n	8007526 <_dtoa_r+0x906>
 800761c:	4638      	mov	r0, r7
 800761e:	e7c2      	b.n	80075a6 <_dtoa_r+0x986>
 8007620:	2301      	movs	r3, #1
 8007622:	e7e3      	b.n	80075ec <_dtoa_r+0x9cc>
 8007624:	9a02      	ldr	r2, [sp, #8]
 8007626:	2a00      	cmp	r2, #0
 8007628:	db04      	blt.n	8007634 <_dtoa_r+0xa14>
 800762a:	d123      	bne.n	8007674 <_dtoa_r+0xa54>
 800762c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800762e:	bb0a      	cbnz	r2, 8007674 <_dtoa_r+0xa54>
 8007630:	9a08      	ldr	r2, [sp, #32]
 8007632:	b9fa      	cbnz	r2, 8007674 <_dtoa_r+0xa54>
 8007634:	2b00      	cmp	r3, #0
 8007636:	ddec      	ble.n	8007612 <_dtoa_r+0x9f2>
 8007638:	4659      	mov	r1, fp
 800763a:	2201      	movs	r2, #1
 800763c:	4620      	mov	r0, r4
 800763e:	f000 fa93 	bl	8007b68 <__lshift>
 8007642:	4631      	mov	r1, r6
 8007644:	4683      	mov	fp, r0
 8007646:	f000 fae3 	bl	8007c10 <__mcmp>
 800764a:	2800      	cmp	r0, #0
 800764c:	dc03      	bgt.n	8007656 <_dtoa_r+0xa36>
 800764e:	d1e0      	bne.n	8007612 <_dtoa_r+0x9f2>
 8007650:	f018 0f01 	tst.w	r8, #1
 8007654:	d0dd      	beq.n	8007612 <_dtoa_r+0x9f2>
 8007656:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800765a:	d1d8      	bne.n	800760e <_dtoa_r+0x9ee>
 800765c:	9b07      	ldr	r3, [sp, #28]
 800765e:	9a07      	ldr	r2, [sp, #28]
 8007660:	1c5d      	adds	r5, r3, #1
 8007662:	2339      	movs	r3, #57	; 0x39
 8007664:	7013      	strb	r3, [r2, #0]
 8007666:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800766a:	1e6a      	subs	r2, r5, #1
 800766c:	2b39      	cmp	r3, #57	; 0x39
 800766e:	d04d      	beq.n	800770c <_dtoa_r+0xaec>
 8007670:	3301      	adds	r3, #1
 8007672:	e052      	b.n	800771a <_dtoa_r+0xafa>
 8007674:	9a07      	ldr	r2, [sp, #28]
 8007676:	2b00      	cmp	r3, #0
 8007678:	f102 0501 	add.w	r5, r2, #1
 800767c:	dd06      	ble.n	800768c <_dtoa_r+0xa6c>
 800767e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007682:	d0eb      	beq.n	800765c <_dtoa_r+0xa3c>
 8007684:	f108 0801 	add.w	r8, r8, #1
 8007688:	9b07      	ldr	r3, [sp, #28]
 800768a:	e7c4      	b.n	8007616 <_dtoa_r+0x9f6>
 800768c:	9b06      	ldr	r3, [sp, #24]
 800768e:	9a04      	ldr	r2, [sp, #16]
 8007690:	1aeb      	subs	r3, r5, r3
 8007692:	4293      	cmp	r3, r2
 8007694:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007698:	d021      	beq.n	80076de <_dtoa_r+0xabe>
 800769a:	4659      	mov	r1, fp
 800769c:	2300      	movs	r3, #0
 800769e:	220a      	movs	r2, #10
 80076a0:	4620      	mov	r0, r4
 80076a2:	f000 f8eb 	bl	800787c <__multadd>
 80076a6:	45b9      	cmp	r9, r7
 80076a8:	4683      	mov	fp, r0
 80076aa:	f04f 0300 	mov.w	r3, #0
 80076ae:	f04f 020a 	mov.w	r2, #10
 80076b2:	4649      	mov	r1, r9
 80076b4:	4620      	mov	r0, r4
 80076b6:	d105      	bne.n	80076c4 <_dtoa_r+0xaa4>
 80076b8:	f000 f8e0 	bl	800787c <__multadd>
 80076bc:	4681      	mov	r9, r0
 80076be:	4607      	mov	r7, r0
 80076c0:	9507      	str	r5, [sp, #28]
 80076c2:	e778      	b.n	80075b6 <_dtoa_r+0x996>
 80076c4:	f000 f8da 	bl	800787c <__multadd>
 80076c8:	4639      	mov	r1, r7
 80076ca:	4681      	mov	r9, r0
 80076cc:	2300      	movs	r3, #0
 80076ce:	220a      	movs	r2, #10
 80076d0:	4620      	mov	r0, r4
 80076d2:	f000 f8d3 	bl	800787c <__multadd>
 80076d6:	4607      	mov	r7, r0
 80076d8:	e7f2      	b.n	80076c0 <_dtoa_r+0xaa0>
 80076da:	f04f 0900 	mov.w	r9, #0
 80076de:	4659      	mov	r1, fp
 80076e0:	2201      	movs	r2, #1
 80076e2:	4620      	mov	r0, r4
 80076e4:	f000 fa40 	bl	8007b68 <__lshift>
 80076e8:	4631      	mov	r1, r6
 80076ea:	4683      	mov	fp, r0
 80076ec:	f000 fa90 	bl	8007c10 <__mcmp>
 80076f0:	2800      	cmp	r0, #0
 80076f2:	dcb8      	bgt.n	8007666 <_dtoa_r+0xa46>
 80076f4:	d102      	bne.n	80076fc <_dtoa_r+0xadc>
 80076f6:	f018 0f01 	tst.w	r8, #1
 80076fa:	d1b4      	bne.n	8007666 <_dtoa_r+0xa46>
 80076fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007700:	1e6a      	subs	r2, r5, #1
 8007702:	2b30      	cmp	r3, #48	; 0x30
 8007704:	f47f af0f 	bne.w	8007526 <_dtoa_r+0x906>
 8007708:	4615      	mov	r5, r2
 800770a:	e7f7      	b.n	80076fc <_dtoa_r+0xadc>
 800770c:	9b06      	ldr	r3, [sp, #24]
 800770e:	4293      	cmp	r3, r2
 8007710:	d105      	bne.n	800771e <_dtoa_r+0xafe>
 8007712:	2331      	movs	r3, #49	; 0x31
 8007714:	9a06      	ldr	r2, [sp, #24]
 8007716:	f10a 0a01 	add.w	sl, sl, #1
 800771a:	7013      	strb	r3, [r2, #0]
 800771c:	e703      	b.n	8007526 <_dtoa_r+0x906>
 800771e:	4615      	mov	r5, r2
 8007720:	e7a1      	b.n	8007666 <_dtoa_r+0xa46>
 8007722:	4b17      	ldr	r3, [pc, #92]	; (8007780 <_dtoa_r+0xb60>)
 8007724:	f7ff bae1 	b.w	8006cea <_dtoa_r+0xca>
 8007728:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800772a:	2b00      	cmp	r3, #0
 800772c:	f47f aabb 	bne.w	8006ca6 <_dtoa_r+0x86>
 8007730:	4b14      	ldr	r3, [pc, #80]	; (8007784 <_dtoa_r+0xb64>)
 8007732:	f7ff bada 	b.w	8006cea <_dtoa_r+0xca>
 8007736:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007738:	2b01      	cmp	r3, #1
 800773a:	f77f ae3f 	ble.w	80073bc <_dtoa_r+0x79c>
 800773e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007740:	9308      	str	r3, [sp, #32]
 8007742:	e653      	b.n	80073ec <_dtoa_r+0x7cc>
 8007744:	9b04      	ldr	r3, [sp, #16]
 8007746:	2b00      	cmp	r3, #0
 8007748:	dc03      	bgt.n	8007752 <_dtoa_r+0xb32>
 800774a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800774c:	2b02      	cmp	r3, #2
 800774e:	f73f aed5 	bgt.w	80074fc <_dtoa_r+0x8dc>
 8007752:	9d06      	ldr	r5, [sp, #24]
 8007754:	4631      	mov	r1, r6
 8007756:	4658      	mov	r0, fp
 8007758:	f7ff f9d1 	bl	8006afe <quorem>
 800775c:	9b06      	ldr	r3, [sp, #24]
 800775e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007762:	f805 8b01 	strb.w	r8, [r5], #1
 8007766:	9a04      	ldr	r2, [sp, #16]
 8007768:	1aeb      	subs	r3, r5, r3
 800776a:	429a      	cmp	r2, r3
 800776c:	ddb5      	ble.n	80076da <_dtoa_r+0xaba>
 800776e:	4659      	mov	r1, fp
 8007770:	2300      	movs	r3, #0
 8007772:	220a      	movs	r2, #10
 8007774:	4620      	mov	r0, r4
 8007776:	f000 f881 	bl	800787c <__multadd>
 800777a:	4683      	mov	fp, r0
 800777c:	e7ea      	b.n	8007754 <_dtoa_r+0xb34>
 800777e:	bf00      	nop
 8007780:	080086e4 	.word	0x080086e4
 8007784:	08008708 	.word	0x08008708

08007788 <_localeconv_r>:
 8007788:	4b04      	ldr	r3, [pc, #16]	; (800779c <_localeconv_r+0x14>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	6a18      	ldr	r0, [r3, #32]
 800778e:	4b04      	ldr	r3, [pc, #16]	; (80077a0 <_localeconv_r+0x18>)
 8007790:	2800      	cmp	r0, #0
 8007792:	bf08      	it	eq
 8007794:	4618      	moveq	r0, r3
 8007796:	30f0      	adds	r0, #240	; 0xf0
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	20000014 	.word	0x20000014
 80077a0:	20000078 	.word	0x20000078

080077a4 <malloc>:
 80077a4:	4b02      	ldr	r3, [pc, #8]	; (80077b0 <malloc+0xc>)
 80077a6:	4601      	mov	r1, r0
 80077a8:	6818      	ldr	r0, [r3, #0]
 80077aa:	f000 bb53 	b.w	8007e54 <_malloc_r>
 80077ae:	bf00      	nop
 80077b0:	20000014 	.word	0x20000014

080077b4 <memchr>:
 80077b4:	b510      	push	{r4, lr}
 80077b6:	b2c9      	uxtb	r1, r1
 80077b8:	4402      	add	r2, r0
 80077ba:	4290      	cmp	r0, r2
 80077bc:	4603      	mov	r3, r0
 80077be:	d101      	bne.n	80077c4 <memchr+0x10>
 80077c0:	2300      	movs	r3, #0
 80077c2:	e003      	b.n	80077cc <memchr+0x18>
 80077c4:	781c      	ldrb	r4, [r3, #0]
 80077c6:	3001      	adds	r0, #1
 80077c8:	428c      	cmp	r4, r1
 80077ca:	d1f6      	bne.n	80077ba <memchr+0x6>
 80077cc:	4618      	mov	r0, r3
 80077ce:	bd10      	pop	{r4, pc}

080077d0 <memcpy>:
 80077d0:	b510      	push	{r4, lr}
 80077d2:	1e43      	subs	r3, r0, #1
 80077d4:	440a      	add	r2, r1
 80077d6:	4291      	cmp	r1, r2
 80077d8:	d100      	bne.n	80077dc <memcpy+0xc>
 80077da:	bd10      	pop	{r4, pc}
 80077dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077e4:	e7f7      	b.n	80077d6 <memcpy+0x6>

080077e6 <_Balloc>:
 80077e6:	b570      	push	{r4, r5, r6, lr}
 80077e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80077ea:	4604      	mov	r4, r0
 80077ec:	460e      	mov	r6, r1
 80077ee:	b93d      	cbnz	r5, 8007800 <_Balloc+0x1a>
 80077f0:	2010      	movs	r0, #16
 80077f2:	f7ff ffd7 	bl	80077a4 <malloc>
 80077f6:	6260      	str	r0, [r4, #36]	; 0x24
 80077f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80077fc:	6005      	str	r5, [r0, #0]
 80077fe:	60c5      	str	r5, [r0, #12]
 8007800:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007802:	68eb      	ldr	r3, [r5, #12]
 8007804:	b183      	cbz	r3, 8007828 <_Balloc+0x42>
 8007806:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800780e:	b9b8      	cbnz	r0, 8007840 <_Balloc+0x5a>
 8007810:	2101      	movs	r1, #1
 8007812:	fa01 f506 	lsl.w	r5, r1, r6
 8007816:	1d6a      	adds	r2, r5, #5
 8007818:	0092      	lsls	r2, r2, #2
 800781a:	4620      	mov	r0, r4
 800781c:	f000 fabf 	bl	8007d9e <_calloc_r>
 8007820:	b160      	cbz	r0, 800783c <_Balloc+0x56>
 8007822:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007826:	e00e      	b.n	8007846 <_Balloc+0x60>
 8007828:	2221      	movs	r2, #33	; 0x21
 800782a:	2104      	movs	r1, #4
 800782c:	4620      	mov	r0, r4
 800782e:	f000 fab6 	bl	8007d9e <_calloc_r>
 8007832:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007834:	60e8      	str	r0, [r5, #12]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1e4      	bne.n	8007806 <_Balloc+0x20>
 800783c:	2000      	movs	r0, #0
 800783e:	bd70      	pop	{r4, r5, r6, pc}
 8007840:	6802      	ldr	r2, [r0, #0]
 8007842:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007846:	2300      	movs	r3, #0
 8007848:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800784c:	e7f7      	b.n	800783e <_Balloc+0x58>

0800784e <_Bfree>:
 800784e:	b570      	push	{r4, r5, r6, lr}
 8007850:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007852:	4606      	mov	r6, r0
 8007854:	460d      	mov	r5, r1
 8007856:	b93c      	cbnz	r4, 8007868 <_Bfree+0x1a>
 8007858:	2010      	movs	r0, #16
 800785a:	f7ff ffa3 	bl	80077a4 <malloc>
 800785e:	6270      	str	r0, [r6, #36]	; 0x24
 8007860:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007864:	6004      	str	r4, [r0, #0]
 8007866:	60c4      	str	r4, [r0, #12]
 8007868:	b13d      	cbz	r5, 800787a <_Bfree+0x2c>
 800786a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800786c:	686a      	ldr	r2, [r5, #4]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007874:	6029      	str	r1, [r5, #0]
 8007876:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800787a:	bd70      	pop	{r4, r5, r6, pc}

0800787c <__multadd>:
 800787c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007880:	461f      	mov	r7, r3
 8007882:	4606      	mov	r6, r0
 8007884:	460c      	mov	r4, r1
 8007886:	2300      	movs	r3, #0
 8007888:	690d      	ldr	r5, [r1, #16]
 800788a:	f101 0c14 	add.w	ip, r1, #20
 800788e:	f8dc 0000 	ldr.w	r0, [ip]
 8007892:	3301      	adds	r3, #1
 8007894:	b281      	uxth	r1, r0
 8007896:	fb02 7101 	mla	r1, r2, r1, r7
 800789a:	0c00      	lsrs	r0, r0, #16
 800789c:	0c0f      	lsrs	r7, r1, #16
 800789e:	fb02 7000 	mla	r0, r2, r0, r7
 80078a2:	b289      	uxth	r1, r1
 80078a4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80078a8:	429d      	cmp	r5, r3
 80078aa:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80078ae:	f84c 1b04 	str.w	r1, [ip], #4
 80078b2:	dcec      	bgt.n	800788e <__multadd+0x12>
 80078b4:	b1d7      	cbz	r7, 80078ec <__multadd+0x70>
 80078b6:	68a3      	ldr	r3, [r4, #8]
 80078b8:	42ab      	cmp	r3, r5
 80078ba:	dc12      	bgt.n	80078e2 <__multadd+0x66>
 80078bc:	6861      	ldr	r1, [r4, #4]
 80078be:	4630      	mov	r0, r6
 80078c0:	3101      	adds	r1, #1
 80078c2:	f7ff ff90 	bl	80077e6 <_Balloc>
 80078c6:	4680      	mov	r8, r0
 80078c8:	6922      	ldr	r2, [r4, #16]
 80078ca:	f104 010c 	add.w	r1, r4, #12
 80078ce:	3202      	adds	r2, #2
 80078d0:	0092      	lsls	r2, r2, #2
 80078d2:	300c      	adds	r0, #12
 80078d4:	f7ff ff7c 	bl	80077d0 <memcpy>
 80078d8:	4621      	mov	r1, r4
 80078da:	4630      	mov	r0, r6
 80078dc:	f7ff ffb7 	bl	800784e <_Bfree>
 80078e0:	4644      	mov	r4, r8
 80078e2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80078e6:	3501      	adds	r5, #1
 80078e8:	615f      	str	r7, [r3, #20]
 80078ea:	6125      	str	r5, [r4, #16]
 80078ec:	4620      	mov	r0, r4
 80078ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080078f2 <__hi0bits>:
 80078f2:	0c02      	lsrs	r2, r0, #16
 80078f4:	0412      	lsls	r2, r2, #16
 80078f6:	4603      	mov	r3, r0
 80078f8:	b9b2      	cbnz	r2, 8007928 <__hi0bits+0x36>
 80078fa:	0403      	lsls	r3, r0, #16
 80078fc:	2010      	movs	r0, #16
 80078fe:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007902:	bf04      	itt	eq
 8007904:	021b      	lsleq	r3, r3, #8
 8007906:	3008      	addeq	r0, #8
 8007908:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800790c:	bf04      	itt	eq
 800790e:	011b      	lsleq	r3, r3, #4
 8007910:	3004      	addeq	r0, #4
 8007912:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007916:	bf04      	itt	eq
 8007918:	009b      	lsleq	r3, r3, #2
 800791a:	3002      	addeq	r0, #2
 800791c:	2b00      	cmp	r3, #0
 800791e:	db06      	blt.n	800792e <__hi0bits+0x3c>
 8007920:	005b      	lsls	r3, r3, #1
 8007922:	d503      	bpl.n	800792c <__hi0bits+0x3a>
 8007924:	3001      	adds	r0, #1
 8007926:	4770      	bx	lr
 8007928:	2000      	movs	r0, #0
 800792a:	e7e8      	b.n	80078fe <__hi0bits+0xc>
 800792c:	2020      	movs	r0, #32
 800792e:	4770      	bx	lr

08007930 <__lo0bits>:
 8007930:	6803      	ldr	r3, [r0, #0]
 8007932:	4601      	mov	r1, r0
 8007934:	f013 0207 	ands.w	r2, r3, #7
 8007938:	d00b      	beq.n	8007952 <__lo0bits+0x22>
 800793a:	07da      	lsls	r2, r3, #31
 800793c:	d423      	bmi.n	8007986 <__lo0bits+0x56>
 800793e:	0798      	lsls	r0, r3, #30
 8007940:	bf49      	itett	mi
 8007942:	085b      	lsrmi	r3, r3, #1
 8007944:	089b      	lsrpl	r3, r3, #2
 8007946:	2001      	movmi	r0, #1
 8007948:	600b      	strmi	r3, [r1, #0]
 800794a:	bf5c      	itt	pl
 800794c:	600b      	strpl	r3, [r1, #0]
 800794e:	2002      	movpl	r0, #2
 8007950:	4770      	bx	lr
 8007952:	b298      	uxth	r0, r3
 8007954:	b9a8      	cbnz	r0, 8007982 <__lo0bits+0x52>
 8007956:	2010      	movs	r0, #16
 8007958:	0c1b      	lsrs	r3, r3, #16
 800795a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800795e:	bf04      	itt	eq
 8007960:	0a1b      	lsreq	r3, r3, #8
 8007962:	3008      	addeq	r0, #8
 8007964:	071a      	lsls	r2, r3, #28
 8007966:	bf04      	itt	eq
 8007968:	091b      	lsreq	r3, r3, #4
 800796a:	3004      	addeq	r0, #4
 800796c:	079a      	lsls	r2, r3, #30
 800796e:	bf04      	itt	eq
 8007970:	089b      	lsreq	r3, r3, #2
 8007972:	3002      	addeq	r0, #2
 8007974:	07da      	lsls	r2, r3, #31
 8007976:	d402      	bmi.n	800797e <__lo0bits+0x4e>
 8007978:	085b      	lsrs	r3, r3, #1
 800797a:	d006      	beq.n	800798a <__lo0bits+0x5a>
 800797c:	3001      	adds	r0, #1
 800797e:	600b      	str	r3, [r1, #0]
 8007980:	4770      	bx	lr
 8007982:	4610      	mov	r0, r2
 8007984:	e7e9      	b.n	800795a <__lo0bits+0x2a>
 8007986:	2000      	movs	r0, #0
 8007988:	4770      	bx	lr
 800798a:	2020      	movs	r0, #32
 800798c:	4770      	bx	lr

0800798e <__i2b>:
 800798e:	b510      	push	{r4, lr}
 8007990:	460c      	mov	r4, r1
 8007992:	2101      	movs	r1, #1
 8007994:	f7ff ff27 	bl	80077e6 <_Balloc>
 8007998:	2201      	movs	r2, #1
 800799a:	6144      	str	r4, [r0, #20]
 800799c:	6102      	str	r2, [r0, #16]
 800799e:	bd10      	pop	{r4, pc}

080079a0 <__multiply>:
 80079a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a4:	4614      	mov	r4, r2
 80079a6:	690a      	ldr	r2, [r1, #16]
 80079a8:	6923      	ldr	r3, [r4, #16]
 80079aa:	4688      	mov	r8, r1
 80079ac:	429a      	cmp	r2, r3
 80079ae:	bfbe      	ittt	lt
 80079b0:	460b      	movlt	r3, r1
 80079b2:	46a0      	movlt	r8, r4
 80079b4:	461c      	movlt	r4, r3
 80079b6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80079ba:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80079be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80079c2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80079c6:	eb07 0609 	add.w	r6, r7, r9
 80079ca:	42b3      	cmp	r3, r6
 80079cc:	bfb8      	it	lt
 80079ce:	3101      	addlt	r1, #1
 80079d0:	f7ff ff09 	bl	80077e6 <_Balloc>
 80079d4:	f100 0514 	add.w	r5, r0, #20
 80079d8:	462b      	mov	r3, r5
 80079da:	2200      	movs	r2, #0
 80079dc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80079e0:	4573      	cmp	r3, lr
 80079e2:	d316      	bcc.n	8007a12 <__multiply+0x72>
 80079e4:	f104 0214 	add.w	r2, r4, #20
 80079e8:	f108 0114 	add.w	r1, r8, #20
 80079ec:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80079f0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80079f4:	9300      	str	r3, [sp, #0]
 80079f6:	9b00      	ldr	r3, [sp, #0]
 80079f8:	9201      	str	r2, [sp, #4]
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d80c      	bhi.n	8007a18 <__multiply+0x78>
 80079fe:	2e00      	cmp	r6, #0
 8007a00:	dd03      	ble.n	8007a0a <__multiply+0x6a>
 8007a02:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d05d      	beq.n	8007ac6 <__multiply+0x126>
 8007a0a:	6106      	str	r6, [r0, #16]
 8007a0c:	b003      	add	sp, #12
 8007a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a12:	f843 2b04 	str.w	r2, [r3], #4
 8007a16:	e7e3      	b.n	80079e0 <__multiply+0x40>
 8007a18:	f8b2 b000 	ldrh.w	fp, [r2]
 8007a1c:	f1bb 0f00 	cmp.w	fp, #0
 8007a20:	d023      	beq.n	8007a6a <__multiply+0xca>
 8007a22:	4689      	mov	r9, r1
 8007a24:	46ac      	mov	ip, r5
 8007a26:	f04f 0800 	mov.w	r8, #0
 8007a2a:	f859 4b04 	ldr.w	r4, [r9], #4
 8007a2e:	f8dc a000 	ldr.w	sl, [ip]
 8007a32:	b2a3      	uxth	r3, r4
 8007a34:	fa1f fa8a 	uxth.w	sl, sl
 8007a38:	fb0b a303 	mla	r3, fp, r3, sl
 8007a3c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007a40:	f8dc 4000 	ldr.w	r4, [ip]
 8007a44:	4443      	add	r3, r8
 8007a46:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007a4a:	fb0b 840a 	mla	r4, fp, sl, r8
 8007a4e:	46e2      	mov	sl, ip
 8007a50:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007a5a:	454f      	cmp	r7, r9
 8007a5c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007a60:	f84a 3b04 	str.w	r3, [sl], #4
 8007a64:	d82b      	bhi.n	8007abe <__multiply+0x11e>
 8007a66:	f8cc 8004 	str.w	r8, [ip, #4]
 8007a6a:	9b01      	ldr	r3, [sp, #4]
 8007a6c:	3204      	adds	r2, #4
 8007a6e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007a72:	f1ba 0f00 	cmp.w	sl, #0
 8007a76:	d020      	beq.n	8007aba <__multiply+0x11a>
 8007a78:	4689      	mov	r9, r1
 8007a7a:	46a8      	mov	r8, r5
 8007a7c:	f04f 0b00 	mov.w	fp, #0
 8007a80:	682b      	ldr	r3, [r5, #0]
 8007a82:	f8b9 c000 	ldrh.w	ip, [r9]
 8007a86:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	fb0a 440c 	mla	r4, sl, ip, r4
 8007a90:	46c4      	mov	ip, r8
 8007a92:	445c      	add	r4, fp
 8007a94:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007a98:	f84c 3b04 	str.w	r3, [ip], #4
 8007a9c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007aa0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007aa4:	0c1b      	lsrs	r3, r3, #16
 8007aa6:	fb0a b303 	mla	r3, sl, r3, fp
 8007aaa:	454f      	cmp	r7, r9
 8007aac:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007ab0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007ab4:	d805      	bhi.n	8007ac2 <__multiply+0x122>
 8007ab6:	f8c8 3004 	str.w	r3, [r8, #4]
 8007aba:	3504      	adds	r5, #4
 8007abc:	e79b      	b.n	80079f6 <__multiply+0x56>
 8007abe:	46d4      	mov	ip, sl
 8007ac0:	e7b3      	b.n	8007a2a <__multiply+0x8a>
 8007ac2:	46e0      	mov	r8, ip
 8007ac4:	e7dd      	b.n	8007a82 <__multiply+0xe2>
 8007ac6:	3e01      	subs	r6, #1
 8007ac8:	e799      	b.n	80079fe <__multiply+0x5e>
	...

08007acc <__pow5mult>:
 8007acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ad0:	4615      	mov	r5, r2
 8007ad2:	f012 0203 	ands.w	r2, r2, #3
 8007ad6:	4606      	mov	r6, r0
 8007ad8:	460f      	mov	r7, r1
 8007ada:	d007      	beq.n	8007aec <__pow5mult+0x20>
 8007adc:	4c21      	ldr	r4, [pc, #132]	; (8007b64 <__pow5mult+0x98>)
 8007ade:	3a01      	subs	r2, #1
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ae6:	f7ff fec9 	bl	800787c <__multadd>
 8007aea:	4607      	mov	r7, r0
 8007aec:	10ad      	asrs	r5, r5, #2
 8007aee:	d035      	beq.n	8007b5c <__pow5mult+0x90>
 8007af0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007af2:	b93c      	cbnz	r4, 8007b04 <__pow5mult+0x38>
 8007af4:	2010      	movs	r0, #16
 8007af6:	f7ff fe55 	bl	80077a4 <malloc>
 8007afa:	6270      	str	r0, [r6, #36]	; 0x24
 8007afc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b00:	6004      	str	r4, [r0, #0]
 8007b02:	60c4      	str	r4, [r0, #12]
 8007b04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007b08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b0c:	b94c      	cbnz	r4, 8007b22 <__pow5mult+0x56>
 8007b0e:	f240 2171 	movw	r1, #625	; 0x271
 8007b12:	4630      	mov	r0, r6
 8007b14:	f7ff ff3b 	bl	800798e <__i2b>
 8007b18:	2300      	movs	r3, #0
 8007b1a:	4604      	mov	r4, r0
 8007b1c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b20:	6003      	str	r3, [r0, #0]
 8007b22:	f04f 0800 	mov.w	r8, #0
 8007b26:	07eb      	lsls	r3, r5, #31
 8007b28:	d50a      	bpl.n	8007b40 <__pow5mult+0x74>
 8007b2a:	4639      	mov	r1, r7
 8007b2c:	4622      	mov	r2, r4
 8007b2e:	4630      	mov	r0, r6
 8007b30:	f7ff ff36 	bl	80079a0 <__multiply>
 8007b34:	4681      	mov	r9, r0
 8007b36:	4639      	mov	r1, r7
 8007b38:	4630      	mov	r0, r6
 8007b3a:	f7ff fe88 	bl	800784e <_Bfree>
 8007b3e:	464f      	mov	r7, r9
 8007b40:	106d      	asrs	r5, r5, #1
 8007b42:	d00b      	beq.n	8007b5c <__pow5mult+0x90>
 8007b44:	6820      	ldr	r0, [r4, #0]
 8007b46:	b938      	cbnz	r0, 8007b58 <__pow5mult+0x8c>
 8007b48:	4622      	mov	r2, r4
 8007b4a:	4621      	mov	r1, r4
 8007b4c:	4630      	mov	r0, r6
 8007b4e:	f7ff ff27 	bl	80079a0 <__multiply>
 8007b52:	6020      	str	r0, [r4, #0]
 8007b54:	f8c0 8000 	str.w	r8, [r0]
 8007b58:	4604      	mov	r4, r0
 8007b5a:	e7e4      	b.n	8007b26 <__pow5mult+0x5a>
 8007b5c:	4638      	mov	r0, r7
 8007b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b62:	bf00      	nop
 8007b64:	08008808 	.word	0x08008808

08007b68 <__lshift>:
 8007b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	4607      	mov	r7, r0
 8007b70:	4616      	mov	r6, r2
 8007b72:	6923      	ldr	r3, [r4, #16]
 8007b74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b78:	eb0a 0903 	add.w	r9, sl, r3
 8007b7c:	6849      	ldr	r1, [r1, #4]
 8007b7e:	68a3      	ldr	r3, [r4, #8]
 8007b80:	f109 0501 	add.w	r5, r9, #1
 8007b84:	42ab      	cmp	r3, r5
 8007b86:	db32      	blt.n	8007bee <__lshift+0x86>
 8007b88:	4638      	mov	r0, r7
 8007b8a:	f7ff fe2c 	bl	80077e6 <_Balloc>
 8007b8e:	2300      	movs	r3, #0
 8007b90:	4680      	mov	r8, r0
 8007b92:	461a      	mov	r2, r3
 8007b94:	f100 0114 	add.w	r1, r0, #20
 8007b98:	4553      	cmp	r3, sl
 8007b9a:	db2b      	blt.n	8007bf4 <__lshift+0x8c>
 8007b9c:	6920      	ldr	r0, [r4, #16]
 8007b9e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ba2:	f104 0314 	add.w	r3, r4, #20
 8007ba6:	f016 021f 	ands.w	r2, r6, #31
 8007baa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007bae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007bb2:	d025      	beq.n	8007c00 <__lshift+0x98>
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	f1c2 0e20 	rsb	lr, r2, #32
 8007bba:	468a      	mov	sl, r1
 8007bbc:	681e      	ldr	r6, [r3, #0]
 8007bbe:	4096      	lsls	r6, r2
 8007bc0:	4330      	orrs	r0, r6
 8007bc2:	f84a 0b04 	str.w	r0, [sl], #4
 8007bc6:	f853 0b04 	ldr.w	r0, [r3], #4
 8007bca:	459c      	cmp	ip, r3
 8007bcc:	fa20 f00e 	lsr.w	r0, r0, lr
 8007bd0:	d814      	bhi.n	8007bfc <__lshift+0x94>
 8007bd2:	6048      	str	r0, [r1, #4]
 8007bd4:	b108      	cbz	r0, 8007bda <__lshift+0x72>
 8007bd6:	f109 0502 	add.w	r5, r9, #2
 8007bda:	3d01      	subs	r5, #1
 8007bdc:	4638      	mov	r0, r7
 8007bde:	f8c8 5010 	str.w	r5, [r8, #16]
 8007be2:	4621      	mov	r1, r4
 8007be4:	f7ff fe33 	bl	800784e <_Bfree>
 8007be8:	4640      	mov	r0, r8
 8007bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bee:	3101      	adds	r1, #1
 8007bf0:	005b      	lsls	r3, r3, #1
 8007bf2:	e7c7      	b.n	8007b84 <__lshift+0x1c>
 8007bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	e7cd      	b.n	8007b98 <__lshift+0x30>
 8007bfc:	4651      	mov	r1, sl
 8007bfe:	e7dc      	b.n	8007bba <__lshift+0x52>
 8007c00:	3904      	subs	r1, #4
 8007c02:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c06:	459c      	cmp	ip, r3
 8007c08:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c0c:	d8f9      	bhi.n	8007c02 <__lshift+0x9a>
 8007c0e:	e7e4      	b.n	8007bda <__lshift+0x72>

08007c10 <__mcmp>:
 8007c10:	6903      	ldr	r3, [r0, #16]
 8007c12:	690a      	ldr	r2, [r1, #16]
 8007c14:	b530      	push	{r4, r5, lr}
 8007c16:	1a9b      	subs	r3, r3, r2
 8007c18:	d10c      	bne.n	8007c34 <__mcmp+0x24>
 8007c1a:	0092      	lsls	r2, r2, #2
 8007c1c:	3014      	adds	r0, #20
 8007c1e:	3114      	adds	r1, #20
 8007c20:	1884      	adds	r4, r0, r2
 8007c22:	4411      	add	r1, r2
 8007c24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007c28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007c2c:	4295      	cmp	r5, r2
 8007c2e:	d003      	beq.n	8007c38 <__mcmp+0x28>
 8007c30:	d305      	bcc.n	8007c3e <__mcmp+0x2e>
 8007c32:	2301      	movs	r3, #1
 8007c34:	4618      	mov	r0, r3
 8007c36:	bd30      	pop	{r4, r5, pc}
 8007c38:	42a0      	cmp	r0, r4
 8007c3a:	d3f3      	bcc.n	8007c24 <__mcmp+0x14>
 8007c3c:	e7fa      	b.n	8007c34 <__mcmp+0x24>
 8007c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c42:	e7f7      	b.n	8007c34 <__mcmp+0x24>

08007c44 <__mdiff>:
 8007c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c48:	460d      	mov	r5, r1
 8007c4a:	4607      	mov	r7, r0
 8007c4c:	4611      	mov	r1, r2
 8007c4e:	4628      	mov	r0, r5
 8007c50:	4614      	mov	r4, r2
 8007c52:	f7ff ffdd 	bl	8007c10 <__mcmp>
 8007c56:	1e06      	subs	r6, r0, #0
 8007c58:	d108      	bne.n	8007c6c <__mdiff+0x28>
 8007c5a:	4631      	mov	r1, r6
 8007c5c:	4638      	mov	r0, r7
 8007c5e:	f7ff fdc2 	bl	80077e6 <_Balloc>
 8007c62:	2301      	movs	r3, #1
 8007c64:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c6c:	bfa4      	itt	ge
 8007c6e:	4623      	movge	r3, r4
 8007c70:	462c      	movge	r4, r5
 8007c72:	4638      	mov	r0, r7
 8007c74:	6861      	ldr	r1, [r4, #4]
 8007c76:	bfa6      	itte	ge
 8007c78:	461d      	movge	r5, r3
 8007c7a:	2600      	movge	r6, #0
 8007c7c:	2601      	movlt	r6, #1
 8007c7e:	f7ff fdb2 	bl	80077e6 <_Balloc>
 8007c82:	f04f 0e00 	mov.w	lr, #0
 8007c86:	60c6      	str	r6, [r0, #12]
 8007c88:	692b      	ldr	r3, [r5, #16]
 8007c8a:	6926      	ldr	r6, [r4, #16]
 8007c8c:	f104 0214 	add.w	r2, r4, #20
 8007c90:	f105 0914 	add.w	r9, r5, #20
 8007c94:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007c98:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007c9c:	f100 0114 	add.w	r1, r0, #20
 8007ca0:	f852 ab04 	ldr.w	sl, [r2], #4
 8007ca4:	f859 5b04 	ldr.w	r5, [r9], #4
 8007ca8:	fa1f f38a 	uxth.w	r3, sl
 8007cac:	4473      	add	r3, lr
 8007cae:	b2ac      	uxth	r4, r5
 8007cb0:	1b1b      	subs	r3, r3, r4
 8007cb2:	0c2c      	lsrs	r4, r5, #16
 8007cb4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8007cb8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8007cc2:	45c8      	cmp	r8, r9
 8007cc4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007cc8:	4694      	mov	ip, r2
 8007cca:	f841 4b04 	str.w	r4, [r1], #4
 8007cce:	d8e7      	bhi.n	8007ca0 <__mdiff+0x5c>
 8007cd0:	45bc      	cmp	ip, r7
 8007cd2:	d304      	bcc.n	8007cde <__mdiff+0x9a>
 8007cd4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007cd8:	b183      	cbz	r3, 8007cfc <__mdiff+0xb8>
 8007cda:	6106      	str	r6, [r0, #16]
 8007cdc:	e7c4      	b.n	8007c68 <__mdiff+0x24>
 8007cde:	f85c 4b04 	ldr.w	r4, [ip], #4
 8007ce2:	b2a2      	uxth	r2, r4
 8007ce4:	4472      	add	r2, lr
 8007ce6:	1413      	asrs	r3, r2, #16
 8007ce8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007cec:	b292      	uxth	r2, r2
 8007cee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007cf2:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007cf6:	f841 2b04 	str.w	r2, [r1], #4
 8007cfa:	e7e9      	b.n	8007cd0 <__mdiff+0x8c>
 8007cfc:	3e01      	subs	r6, #1
 8007cfe:	e7e9      	b.n	8007cd4 <__mdiff+0x90>

08007d00 <__d2b>:
 8007d00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007d04:	461c      	mov	r4, r3
 8007d06:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8007d0a:	2101      	movs	r1, #1
 8007d0c:	4690      	mov	r8, r2
 8007d0e:	f7ff fd6a 	bl	80077e6 <_Balloc>
 8007d12:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007d16:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007d1a:	4607      	mov	r7, r0
 8007d1c:	bb34      	cbnz	r4, 8007d6c <__d2b+0x6c>
 8007d1e:	9201      	str	r2, [sp, #4]
 8007d20:	f1b8 0200 	subs.w	r2, r8, #0
 8007d24:	d027      	beq.n	8007d76 <__d2b+0x76>
 8007d26:	a802      	add	r0, sp, #8
 8007d28:	f840 2d08 	str.w	r2, [r0, #-8]!
 8007d2c:	f7ff fe00 	bl	8007930 <__lo0bits>
 8007d30:	9900      	ldr	r1, [sp, #0]
 8007d32:	b1f0      	cbz	r0, 8007d72 <__d2b+0x72>
 8007d34:	9a01      	ldr	r2, [sp, #4]
 8007d36:	f1c0 0320 	rsb	r3, r0, #32
 8007d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d3e:	430b      	orrs	r3, r1
 8007d40:	40c2      	lsrs	r2, r0
 8007d42:	617b      	str	r3, [r7, #20]
 8007d44:	9201      	str	r2, [sp, #4]
 8007d46:	9b01      	ldr	r3, [sp, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	bf14      	ite	ne
 8007d4c:	2102      	movne	r1, #2
 8007d4e:	2101      	moveq	r1, #1
 8007d50:	61bb      	str	r3, [r7, #24]
 8007d52:	6139      	str	r1, [r7, #16]
 8007d54:	b1c4      	cbz	r4, 8007d88 <__d2b+0x88>
 8007d56:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007d5a:	4404      	add	r4, r0
 8007d5c:	6034      	str	r4, [r6, #0]
 8007d5e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007d62:	6028      	str	r0, [r5, #0]
 8007d64:	4638      	mov	r0, r7
 8007d66:	b002      	add	sp, #8
 8007d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d6c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007d70:	e7d5      	b.n	8007d1e <__d2b+0x1e>
 8007d72:	6179      	str	r1, [r7, #20]
 8007d74:	e7e7      	b.n	8007d46 <__d2b+0x46>
 8007d76:	a801      	add	r0, sp, #4
 8007d78:	f7ff fdda 	bl	8007930 <__lo0bits>
 8007d7c:	2101      	movs	r1, #1
 8007d7e:	9b01      	ldr	r3, [sp, #4]
 8007d80:	6139      	str	r1, [r7, #16]
 8007d82:	617b      	str	r3, [r7, #20]
 8007d84:	3020      	adds	r0, #32
 8007d86:	e7e5      	b.n	8007d54 <__d2b+0x54>
 8007d88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007d8c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007d90:	6030      	str	r0, [r6, #0]
 8007d92:	6918      	ldr	r0, [r3, #16]
 8007d94:	f7ff fdad 	bl	80078f2 <__hi0bits>
 8007d98:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007d9c:	e7e1      	b.n	8007d62 <__d2b+0x62>

08007d9e <_calloc_r>:
 8007d9e:	b538      	push	{r3, r4, r5, lr}
 8007da0:	fb02 f401 	mul.w	r4, r2, r1
 8007da4:	4621      	mov	r1, r4
 8007da6:	f000 f855 	bl	8007e54 <_malloc_r>
 8007daa:	4605      	mov	r5, r0
 8007dac:	b118      	cbz	r0, 8007db6 <_calloc_r+0x18>
 8007dae:	4622      	mov	r2, r4
 8007db0:	2100      	movs	r1, #0
 8007db2:	f7fe f9e9 	bl	8006188 <memset>
 8007db6:	4628      	mov	r0, r5
 8007db8:	bd38      	pop	{r3, r4, r5, pc}
	...

08007dbc <_free_r>:
 8007dbc:	b538      	push	{r3, r4, r5, lr}
 8007dbe:	4605      	mov	r5, r0
 8007dc0:	2900      	cmp	r1, #0
 8007dc2:	d043      	beq.n	8007e4c <_free_r+0x90>
 8007dc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dc8:	1f0c      	subs	r4, r1, #4
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	bfb8      	it	lt
 8007dce:	18e4      	addlt	r4, r4, r3
 8007dd0:	f000 fa27 	bl	8008222 <__malloc_lock>
 8007dd4:	4a1e      	ldr	r2, [pc, #120]	; (8007e50 <_free_r+0x94>)
 8007dd6:	6813      	ldr	r3, [r2, #0]
 8007dd8:	4610      	mov	r0, r2
 8007dda:	b933      	cbnz	r3, 8007dea <_free_r+0x2e>
 8007ddc:	6063      	str	r3, [r4, #4]
 8007dde:	6014      	str	r4, [r2, #0]
 8007de0:	4628      	mov	r0, r5
 8007de2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007de6:	f000 ba1d 	b.w	8008224 <__malloc_unlock>
 8007dea:	42a3      	cmp	r3, r4
 8007dec:	d90b      	bls.n	8007e06 <_free_r+0x4a>
 8007dee:	6821      	ldr	r1, [r4, #0]
 8007df0:	1862      	adds	r2, r4, r1
 8007df2:	4293      	cmp	r3, r2
 8007df4:	bf01      	itttt	eq
 8007df6:	681a      	ldreq	r2, [r3, #0]
 8007df8:	685b      	ldreq	r3, [r3, #4]
 8007dfa:	1852      	addeq	r2, r2, r1
 8007dfc:	6022      	streq	r2, [r4, #0]
 8007dfe:	6063      	str	r3, [r4, #4]
 8007e00:	6004      	str	r4, [r0, #0]
 8007e02:	e7ed      	b.n	8007de0 <_free_r+0x24>
 8007e04:	4613      	mov	r3, r2
 8007e06:	685a      	ldr	r2, [r3, #4]
 8007e08:	b10a      	cbz	r2, 8007e0e <_free_r+0x52>
 8007e0a:	42a2      	cmp	r2, r4
 8007e0c:	d9fa      	bls.n	8007e04 <_free_r+0x48>
 8007e0e:	6819      	ldr	r1, [r3, #0]
 8007e10:	1858      	adds	r0, r3, r1
 8007e12:	42a0      	cmp	r0, r4
 8007e14:	d10b      	bne.n	8007e2e <_free_r+0x72>
 8007e16:	6820      	ldr	r0, [r4, #0]
 8007e18:	4401      	add	r1, r0
 8007e1a:	1858      	adds	r0, r3, r1
 8007e1c:	4282      	cmp	r2, r0
 8007e1e:	6019      	str	r1, [r3, #0]
 8007e20:	d1de      	bne.n	8007de0 <_free_r+0x24>
 8007e22:	6810      	ldr	r0, [r2, #0]
 8007e24:	6852      	ldr	r2, [r2, #4]
 8007e26:	4401      	add	r1, r0
 8007e28:	6019      	str	r1, [r3, #0]
 8007e2a:	605a      	str	r2, [r3, #4]
 8007e2c:	e7d8      	b.n	8007de0 <_free_r+0x24>
 8007e2e:	d902      	bls.n	8007e36 <_free_r+0x7a>
 8007e30:	230c      	movs	r3, #12
 8007e32:	602b      	str	r3, [r5, #0]
 8007e34:	e7d4      	b.n	8007de0 <_free_r+0x24>
 8007e36:	6820      	ldr	r0, [r4, #0]
 8007e38:	1821      	adds	r1, r4, r0
 8007e3a:	428a      	cmp	r2, r1
 8007e3c:	bf01      	itttt	eq
 8007e3e:	6811      	ldreq	r1, [r2, #0]
 8007e40:	6852      	ldreq	r2, [r2, #4]
 8007e42:	1809      	addeq	r1, r1, r0
 8007e44:	6021      	streq	r1, [r4, #0]
 8007e46:	6062      	str	r2, [r4, #4]
 8007e48:	605c      	str	r4, [r3, #4]
 8007e4a:	e7c9      	b.n	8007de0 <_free_r+0x24>
 8007e4c:	bd38      	pop	{r3, r4, r5, pc}
 8007e4e:	bf00      	nop
 8007e50:	20000a24 	.word	0x20000a24

08007e54 <_malloc_r>:
 8007e54:	b570      	push	{r4, r5, r6, lr}
 8007e56:	1ccd      	adds	r5, r1, #3
 8007e58:	f025 0503 	bic.w	r5, r5, #3
 8007e5c:	3508      	adds	r5, #8
 8007e5e:	2d0c      	cmp	r5, #12
 8007e60:	bf38      	it	cc
 8007e62:	250c      	movcc	r5, #12
 8007e64:	2d00      	cmp	r5, #0
 8007e66:	4606      	mov	r6, r0
 8007e68:	db01      	blt.n	8007e6e <_malloc_r+0x1a>
 8007e6a:	42a9      	cmp	r1, r5
 8007e6c:	d903      	bls.n	8007e76 <_malloc_r+0x22>
 8007e6e:	230c      	movs	r3, #12
 8007e70:	6033      	str	r3, [r6, #0]
 8007e72:	2000      	movs	r0, #0
 8007e74:	bd70      	pop	{r4, r5, r6, pc}
 8007e76:	f000 f9d4 	bl	8008222 <__malloc_lock>
 8007e7a:	4a21      	ldr	r2, [pc, #132]	; (8007f00 <_malloc_r+0xac>)
 8007e7c:	6814      	ldr	r4, [r2, #0]
 8007e7e:	4621      	mov	r1, r4
 8007e80:	b991      	cbnz	r1, 8007ea8 <_malloc_r+0x54>
 8007e82:	4c20      	ldr	r4, [pc, #128]	; (8007f04 <_malloc_r+0xb0>)
 8007e84:	6823      	ldr	r3, [r4, #0]
 8007e86:	b91b      	cbnz	r3, 8007e90 <_malloc_r+0x3c>
 8007e88:	4630      	mov	r0, r6
 8007e8a:	f000 f98f 	bl	80081ac <_sbrk_r>
 8007e8e:	6020      	str	r0, [r4, #0]
 8007e90:	4629      	mov	r1, r5
 8007e92:	4630      	mov	r0, r6
 8007e94:	f000 f98a 	bl	80081ac <_sbrk_r>
 8007e98:	1c43      	adds	r3, r0, #1
 8007e9a:	d124      	bne.n	8007ee6 <_malloc_r+0x92>
 8007e9c:	230c      	movs	r3, #12
 8007e9e:	4630      	mov	r0, r6
 8007ea0:	6033      	str	r3, [r6, #0]
 8007ea2:	f000 f9bf 	bl	8008224 <__malloc_unlock>
 8007ea6:	e7e4      	b.n	8007e72 <_malloc_r+0x1e>
 8007ea8:	680b      	ldr	r3, [r1, #0]
 8007eaa:	1b5b      	subs	r3, r3, r5
 8007eac:	d418      	bmi.n	8007ee0 <_malloc_r+0x8c>
 8007eae:	2b0b      	cmp	r3, #11
 8007eb0:	d90f      	bls.n	8007ed2 <_malloc_r+0x7e>
 8007eb2:	600b      	str	r3, [r1, #0]
 8007eb4:	18cc      	adds	r4, r1, r3
 8007eb6:	50cd      	str	r5, [r1, r3]
 8007eb8:	4630      	mov	r0, r6
 8007eba:	f000 f9b3 	bl	8008224 <__malloc_unlock>
 8007ebe:	f104 000b 	add.w	r0, r4, #11
 8007ec2:	1d23      	adds	r3, r4, #4
 8007ec4:	f020 0007 	bic.w	r0, r0, #7
 8007ec8:	1ac3      	subs	r3, r0, r3
 8007eca:	d0d3      	beq.n	8007e74 <_malloc_r+0x20>
 8007ecc:	425a      	negs	r2, r3
 8007ece:	50e2      	str	r2, [r4, r3]
 8007ed0:	e7d0      	b.n	8007e74 <_malloc_r+0x20>
 8007ed2:	684b      	ldr	r3, [r1, #4]
 8007ed4:	428c      	cmp	r4, r1
 8007ed6:	bf16      	itet	ne
 8007ed8:	6063      	strne	r3, [r4, #4]
 8007eda:	6013      	streq	r3, [r2, #0]
 8007edc:	460c      	movne	r4, r1
 8007ede:	e7eb      	b.n	8007eb8 <_malloc_r+0x64>
 8007ee0:	460c      	mov	r4, r1
 8007ee2:	6849      	ldr	r1, [r1, #4]
 8007ee4:	e7cc      	b.n	8007e80 <_malloc_r+0x2c>
 8007ee6:	1cc4      	adds	r4, r0, #3
 8007ee8:	f024 0403 	bic.w	r4, r4, #3
 8007eec:	42a0      	cmp	r0, r4
 8007eee:	d005      	beq.n	8007efc <_malloc_r+0xa8>
 8007ef0:	1a21      	subs	r1, r4, r0
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	f000 f95a 	bl	80081ac <_sbrk_r>
 8007ef8:	3001      	adds	r0, #1
 8007efa:	d0cf      	beq.n	8007e9c <_malloc_r+0x48>
 8007efc:	6025      	str	r5, [r4, #0]
 8007efe:	e7db      	b.n	8007eb8 <_malloc_r+0x64>
 8007f00:	20000a24 	.word	0x20000a24
 8007f04:	20000a28 	.word	0x20000a28

08007f08 <__ssputs_r>:
 8007f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f0c:	688e      	ldr	r6, [r1, #8]
 8007f0e:	4682      	mov	sl, r0
 8007f10:	429e      	cmp	r6, r3
 8007f12:	460c      	mov	r4, r1
 8007f14:	4690      	mov	r8, r2
 8007f16:	4699      	mov	r9, r3
 8007f18:	d837      	bhi.n	8007f8a <__ssputs_r+0x82>
 8007f1a:	898a      	ldrh	r2, [r1, #12]
 8007f1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f20:	d031      	beq.n	8007f86 <__ssputs_r+0x7e>
 8007f22:	2302      	movs	r3, #2
 8007f24:	6825      	ldr	r5, [r4, #0]
 8007f26:	6909      	ldr	r1, [r1, #16]
 8007f28:	1a6f      	subs	r7, r5, r1
 8007f2a:	6965      	ldr	r5, [r4, #20]
 8007f2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f30:	fb95 f5f3 	sdiv	r5, r5, r3
 8007f34:	f109 0301 	add.w	r3, r9, #1
 8007f38:	443b      	add	r3, r7
 8007f3a:	429d      	cmp	r5, r3
 8007f3c:	bf38      	it	cc
 8007f3e:	461d      	movcc	r5, r3
 8007f40:	0553      	lsls	r3, r2, #21
 8007f42:	d530      	bpl.n	8007fa6 <__ssputs_r+0x9e>
 8007f44:	4629      	mov	r1, r5
 8007f46:	f7ff ff85 	bl	8007e54 <_malloc_r>
 8007f4a:	4606      	mov	r6, r0
 8007f4c:	b950      	cbnz	r0, 8007f64 <__ssputs_r+0x5c>
 8007f4e:	230c      	movs	r3, #12
 8007f50:	f04f 30ff 	mov.w	r0, #4294967295
 8007f54:	f8ca 3000 	str.w	r3, [sl]
 8007f58:	89a3      	ldrh	r3, [r4, #12]
 8007f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f5e:	81a3      	strh	r3, [r4, #12]
 8007f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f64:	463a      	mov	r2, r7
 8007f66:	6921      	ldr	r1, [r4, #16]
 8007f68:	f7ff fc32 	bl	80077d0 <memcpy>
 8007f6c:	89a3      	ldrh	r3, [r4, #12]
 8007f6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f76:	81a3      	strh	r3, [r4, #12]
 8007f78:	6126      	str	r6, [r4, #16]
 8007f7a:	443e      	add	r6, r7
 8007f7c:	6026      	str	r6, [r4, #0]
 8007f7e:	464e      	mov	r6, r9
 8007f80:	6165      	str	r5, [r4, #20]
 8007f82:	1bed      	subs	r5, r5, r7
 8007f84:	60a5      	str	r5, [r4, #8]
 8007f86:	454e      	cmp	r6, r9
 8007f88:	d900      	bls.n	8007f8c <__ssputs_r+0x84>
 8007f8a:	464e      	mov	r6, r9
 8007f8c:	4632      	mov	r2, r6
 8007f8e:	4641      	mov	r1, r8
 8007f90:	6820      	ldr	r0, [r4, #0]
 8007f92:	f000 f92d 	bl	80081f0 <memmove>
 8007f96:	68a3      	ldr	r3, [r4, #8]
 8007f98:	2000      	movs	r0, #0
 8007f9a:	1b9b      	subs	r3, r3, r6
 8007f9c:	60a3      	str	r3, [r4, #8]
 8007f9e:	6823      	ldr	r3, [r4, #0]
 8007fa0:	441e      	add	r6, r3
 8007fa2:	6026      	str	r6, [r4, #0]
 8007fa4:	e7dc      	b.n	8007f60 <__ssputs_r+0x58>
 8007fa6:	462a      	mov	r2, r5
 8007fa8:	f000 f93d 	bl	8008226 <_realloc_r>
 8007fac:	4606      	mov	r6, r0
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	d1e2      	bne.n	8007f78 <__ssputs_r+0x70>
 8007fb2:	6921      	ldr	r1, [r4, #16]
 8007fb4:	4650      	mov	r0, sl
 8007fb6:	f7ff ff01 	bl	8007dbc <_free_r>
 8007fba:	e7c8      	b.n	8007f4e <__ssputs_r+0x46>

08007fbc <_svfiprintf_r>:
 8007fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc0:	461d      	mov	r5, r3
 8007fc2:	898b      	ldrh	r3, [r1, #12]
 8007fc4:	b09d      	sub	sp, #116	; 0x74
 8007fc6:	061f      	lsls	r7, r3, #24
 8007fc8:	4680      	mov	r8, r0
 8007fca:	460c      	mov	r4, r1
 8007fcc:	4616      	mov	r6, r2
 8007fce:	d50f      	bpl.n	8007ff0 <_svfiprintf_r+0x34>
 8007fd0:	690b      	ldr	r3, [r1, #16]
 8007fd2:	b96b      	cbnz	r3, 8007ff0 <_svfiprintf_r+0x34>
 8007fd4:	2140      	movs	r1, #64	; 0x40
 8007fd6:	f7ff ff3d 	bl	8007e54 <_malloc_r>
 8007fda:	6020      	str	r0, [r4, #0]
 8007fdc:	6120      	str	r0, [r4, #16]
 8007fde:	b928      	cbnz	r0, 8007fec <_svfiprintf_r+0x30>
 8007fe0:	230c      	movs	r3, #12
 8007fe2:	f8c8 3000 	str.w	r3, [r8]
 8007fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8007fea:	e0c8      	b.n	800817e <_svfiprintf_r+0x1c2>
 8007fec:	2340      	movs	r3, #64	; 0x40
 8007fee:	6163      	str	r3, [r4, #20]
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ff4:	2320      	movs	r3, #32
 8007ff6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ffa:	2330      	movs	r3, #48	; 0x30
 8007ffc:	f04f 0b01 	mov.w	fp, #1
 8008000:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008004:	9503      	str	r5, [sp, #12]
 8008006:	4637      	mov	r7, r6
 8008008:	463d      	mov	r5, r7
 800800a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800800e:	b10b      	cbz	r3, 8008014 <_svfiprintf_r+0x58>
 8008010:	2b25      	cmp	r3, #37	; 0x25
 8008012:	d13e      	bne.n	8008092 <_svfiprintf_r+0xd6>
 8008014:	ebb7 0a06 	subs.w	sl, r7, r6
 8008018:	d00b      	beq.n	8008032 <_svfiprintf_r+0x76>
 800801a:	4653      	mov	r3, sl
 800801c:	4632      	mov	r2, r6
 800801e:	4621      	mov	r1, r4
 8008020:	4640      	mov	r0, r8
 8008022:	f7ff ff71 	bl	8007f08 <__ssputs_r>
 8008026:	3001      	adds	r0, #1
 8008028:	f000 80a4 	beq.w	8008174 <_svfiprintf_r+0x1b8>
 800802c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800802e:	4453      	add	r3, sl
 8008030:	9309      	str	r3, [sp, #36]	; 0x24
 8008032:	783b      	ldrb	r3, [r7, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	f000 809d 	beq.w	8008174 <_svfiprintf_r+0x1b8>
 800803a:	2300      	movs	r3, #0
 800803c:	f04f 32ff 	mov.w	r2, #4294967295
 8008040:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008044:	9304      	str	r3, [sp, #16]
 8008046:	9307      	str	r3, [sp, #28]
 8008048:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800804c:	931a      	str	r3, [sp, #104]	; 0x68
 800804e:	462f      	mov	r7, r5
 8008050:	2205      	movs	r2, #5
 8008052:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008056:	4850      	ldr	r0, [pc, #320]	; (8008198 <_svfiprintf_r+0x1dc>)
 8008058:	f7ff fbac 	bl	80077b4 <memchr>
 800805c:	9b04      	ldr	r3, [sp, #16]
 800805e:	b9d0      	cbnz	r0, 8008096 <_svfiprintf_r+0xda>
 8008060:	06d9      	lsls	r1, r3, #27
 8008062:	bf44      	itt	mi
 8008064:	2220      	movmi	r2, #32
 8008066:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800806a:	071a      	lsls	r2, r3, #28
 800806c:	bf44      	itt	mi
 800806e:	222b      	movmi	r2, #43	; 0x2b
 8008070:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008074:	782a      	ldrb	r2, [r5, #0]
 8008076:	2a2a      	cmp	r2, #42	; 0x2a
 8008078:	d015      	beq.n	80080a6 <_svfiprintf_r+0xea>
 800807a:	462f      	mov	r7, r5
 800807c:	2000      	movs	r0, #0
 800807e:	250a      	movs	r5, #10
 8008080:	9a07      	ldr	r2, [sp, #28]
 8008082:	4639      	mov	r1, r7
 8008084:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008088:	3b30      	subs	r3, #48	; 0x30
 800808a:	2b09      	cmp	r3, #9
 800808c:	d94d      	bls.n	800812a <_svfiprintf_r+0x16e>
 800808e:	b1b8      	cbz	r0, 80080c0 <_svfiprintf_r+0x104>
 8008090:	e00f      	b.n	80080b2 <_svfiprintf_r+0xf6>
 8008092:	462f      	mov	r7, r5
 8008094:	e7b8      	b.n	8008008 <_svfiprintf_r+0x4c>
 8008096:	4a40      	ldr	r2, [pc, #256]	; (8008198 <_svfiprintf_r+0x1dc>)
 8008098:	463d      	mov	r5, r7
 800809a:	1a80      	subs	r0, r0, r2
 800809c:	fa0b f000 	lsl.w	r0, fp, r0
 80080a0:	4318      	orrs	r0, r3
 80080a2:	9004      	str	r0, [sp, #16]
 80080a4:	e7d3      	b.n	800804e <_svfiprintf_r+0x92>
 80080a6:	9a03      	ldr	r2, [sp, #12]
 80080a8:	1d11      	adds	r1, r2, #4
 80080aa:	6812      	ldr	r2, [r2, #0]
 80080ac:	9103      	str	r1, [sp, #12]
 80080ae:	2a00      	cmp	r2, #0
 80080b0:	db01      	blt.n	80080b6 <_svfiprintf_r+0xfa>
 80080b2:	9207      	str	r2, [sp, #28]
 80080b4:	e004      	b.n	80080c0 <_svfiprintf_r+0x104>
 80080b6:	4252      	negs	r2, r2
 80080b8:	f043 0302 	orr.w	r3, r3, #2
 80080bc:	9207      	str	r2, [sp, #28]
 80080be:	9304      	str	r3, [sp, #16]
 80080c0:	783b      	ldrb	r3, [r7, #0]
 80080c2:	2b2e      	cmp	r3, #46	; 0x2e
 80080c4:	d10c      	bne.n	80080e0 <_svfiprintf_r+0x124>
 80080c6:	787b      	ldrb	r3, [r7, #1]
 80080c8:	2b2a      	cmp	r3, #42	; 0x2a
 80080ca:	d133      	bne.n	8008134 <_svfiprintf_r+0x178>
 80080cc:	9b03      	ldr	r3, [sp, #12]
 80080ce:	3702      	adds	r7, #2
 80080d0:	1d1a      	adds	r2, r3, #4
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	9203      	str	r2, [sp, #12]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	bfb8      	it	lt
 80080da:	f04f 33ff 	movlt.w	r3, #4294967295
 80080de:	9305      	str	r3, [sp, #20]
 80080e0:	4d2e      	ldr	r5, [pc, #184]	; (800819c <_svfiprintf_r+0x1e0>)
 80080e2:	2203      	movs	r2, #3
 80080e4:	7839      	ldrb	r1, [r7, #0]
 80080e6:	4628      	mov	r0, r5
 80080e8:	f7ff fb64 	bl	80077b4 <memchr>
 80080ec:	b138      	cbz	r0, 80080fe <_svfiprintf_r+0x142>
 80080ee:	2340      	movs	r3, #64	; 0x40
 80080f0:	1b40      	subs	r0, r0, r5
 80080f2:	fa03 f000 	lsl.w	r0, r3, r0
 80080f6:	9b04      	ldr	r3, [sp, #16]
 80080f8:	3701      	adds	r7, #1
 80080fa:	4303      	orrs	r3, r0
 80080fc:	9304      	str	r3, [sp, #16]
 80080fe:	7839      	ldrb	r1, [r7, #0]
 8008100:	2206      	movs	r2, #6
 8008102:	4827      	ldr	r0, [pc, #156]	; (80081a0 <_svfiprintf_r+0x1e4>)
 8008104:	1c7e      	adds	r6, r7, #1
 8008106:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800810a:	f7ff fb53 	bl	80077b4 <memchr>
 800810e:	2800      	cmp	r0, #0
 8008110:	d038      	beq.n	8008184 <_svfiprintf_r+0x1c8>
 8008112:	4b24      	ldr	r3, [pc, #144]	; (80081a4 <_svfiprintf_r+0x1e8>)
 8008114:	bb13      	cbnz	r3, 800815c <_svfiprintf_r+0x1a0>
 8008116:	9b03      	ldr	r3, [sp, #12]
 8008118:	3307      	adds	r3, #7
 800811a:	f023 0307 	bic.w	r3, r3, #7
 800811e:	3308      	adds	r3, #8
 8008120:	9303      	str	r3, [sp, #12]
 8008122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008124:	444b      	add	r3, r9
 8008126:	9309      	str	r3, [sp, #36]	; 0x24
 8008128:	e76d      	b.n	8008006 <_svfiprintf_r+0x4a>
 800812a:	fb05 3202 	mla	r2, r5, r2, r3
 800812e:	2001      	movs	r0, #1
 8008130:	460f      	mov	r7, r1
 8008132:	e7a6      	b.n	8008082 <_svfiprintf_r+0xc6>
 8008134:	2300      	movs	r3, #0
 8008136:	250a      	movs	r5, #10
 8008138:	4619      	mov	r1, r3
 800813a:	3701      	adds	r7, #1
 800813c:	9305      	str	r3, [sp, #20]
 800813e:	4638      	mov	r0, r7
 8008140:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008144:	3a30      	subs	r2, #48	; 0x30
 8008146:	2a09      	cmp	r2, #9
 8008148:	d903      	bls.n	8008152 <_svfiprintf_r+0x196>
 800814a:	2b00      	cmp	r3, #0
 800814c:	d0c8      	beq.n	80080e0 <_svfiprintf_r+0x124>
 800814e:	9105      	str	r1, [sp, #20]
 8008150:	e7c6      	b.n	80080e0 <_svfiprintf_r+0x124>
 8008152:	fb05 2101 	mla	r1, r5, r1, r2
 8008156:	2301      	movs	r3, #1
 8008158:	4607      	mov	r7, r0
 800815a:	e7f0      	b.n	800813e <_svfiprintf_r+0x182>
 800815c:	ab03      	add	r3, sp, #12
 800815e:	9300      	str	r3, [sp, #0]
 8008160:	4622      	mov	r2, r4
 8008162:	4b11      	ldr	r3, [pc, #68]	; (80081a8 <_svfiprintf_r+0x1ec>)
 8008164:	a904      	add	r1, sp, #16
 8008166:	4640      	mov	r0, r8
 8008168:	f7fe f8a8 	bl	80062bc <_printf_float>
 800816c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008170:	4681      	mov	r9, r0
 8008172:	d1d6      	bne.n	8008122 <_svfiprintf_r+0x166>
 8008174:	89a3      	ldrh	r3, [r4, #12]
 8008176:	065b      	lsls	r3, r3, #25
 8008178:	f53f af35 	bmi.w	8007fe6 <_svfiprintf_r+0x2a>
 800817c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800817e:	b01d      	add	sp, #116	; 0x74
 8008180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008184:	ab03      	add	r3, sp, #12
 8008186:	9300      	str	r3, [sp, #0]
 8008188:	4622      	mov	r2, r4
 800818a:	4b07      	ldr	r3, [pc, #28]	; (80081a8 <_svfiprintf_r+0x1ec>)
 800818c:	a904      	add	r1, sp, #16
 800818e:	4640      	mov	r0, r8
 8008190:	f7fe fb40 	bl	8006814 <_printf_i>
 8008194:	e7ea      	b.n	800816c <_svfiprintf_r+0x1b0>
 8008196:	bf00      	nop
 8008198:	08008814 	.word	0x08008814
 800819c:	0800881a 	.word	0x0800881a
 80081a0:	0800881e 	.word	0x0800881e
 80081a4:	080062bd 	.word	0x080062bd
 80081a8:	08007f09 	.word	0x08007f09

080081ac <_sbrk_r>:
 80081ac:	b538      	push	{r3, r4, r5, lr}
 80081ae:	2300      	movs	r3, #0
 80081b0:	4c05      	ldr	r4, [pc, #20]	; (80081c8 <_sbrk_r+0x1c>)
 80081b2:	4605      	mov	r5, r0
 80081b4:	4608      	mov	r0, r1
 80081b6:	6023      	str	r3, [r4, #0]
 80081b8:	f7fa ffc0 	bl	800313c <_sbrk>
 80081bc:	1c43      	adds	r3, r0, #1
 80081be:	d102      	bne.n	80081c6 <_sbrk_r+0x1a>
 80081c0:	6823      	ldr	r3, [r4, #0]
 80081c2:	b103      	cbz	r3, 80081c6 <_sbrk_r+0x1a>
 80081c4:	602b      	str	r3, [r5, #0]
 80081c6:	bd38      	pop	{r3, r4, r5, pc}
 80081c8:	20000cbc 	.word	0x20000cbc

080081cc <__ascii_mbtowc>:
 80081cc:	b082      	sub	sp, #8
 80081ce:	b901      	cbnz	r1, 80081d2 <__ascii_mbtowc+0x6>
 80081d0:	a901      	add	r1, sp, #4
 80081d2:	b142      	cbz	r2, 80081e6 <__ascii_mbtowc+0x1a>
 80081d4:	b14b      	cbz	r3, 80081ea <__ascii_mbtowc+0x1e>
 80081d6:	7813      	ldrb	r3, [r2, #0]
 80081d8:	600b      	str	r3, [r1, #0]
 80081da:	7812      	ldrb	r2, [r2, #0]
 80081dc:	1c10      	adds	r0, r2, #0
 80081de:	bf18      	it	ne
 80081e0:	2001      	movne	r0, #1
 80081e2:	b002      	add	sp, #8
 80081e4:	4770      	bx	lr
 80081e6:	4610      	mov	r0, r2
 80081e8:	e7fb      	b.n	80081e2 <__ascii_mbtowc+0x16>
 80081ea:	f06f 0001 	mvn.w	r0, #1
 80081ee:	e7f8      	b.n	80081e2 <__ascii_mbtowc+0x16>

080081f0 <memmove>:
 80081f0:	4288      	cmp	r0, r1
 80081f2:	b510      	push	{r4, lr}
 80081f4:	eb01 0302 	add.w	r3, r1, r2
 80081f8:	d807      	bhi.n	800820a <memmove+0x1a>
 80081fa:	1e42      	subs	r2, r0, #1
 80081fc:	4299      	cmp	r1, r3
 80081fe:	d00a      	beq.n	8008216 <memmove+0x26>
 8008200:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008204:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008208:	e7f8      	b.n	80081fc <memmove+0xc>
 800820a:	4283      	cmp	r3, r0
 800820c:	d9f5      	bls.n	80081fa <memmove+0xa>
 800820e:	1881      	adds	r1, r0, r2
 8008210:	1ad2      	subs	r2, r2, r3
 8008212:	42d3      	cmn	r3, r2
 8008214:	d100      	bne.n	8008218 <memmove+0x28>
 8008216:	bd10      	pop	{r4, pc}
 8008218:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800821c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008220:	e7f7      	b.n	8008212 <memmove+0x22>

08008222 <__malloc_lock>:
 8008222:	4770      	bx	lr

08008224 <__malloc_unlock>:
 8008224:	4770      	bx	lr

08008226 <_realloc_r>:
 8008226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008228:	4607      	mov	r7, r0
 800822a:	4614      	mov	r4, r2
 800822c:	460e      	mov	r6, r1
 800822e:	b921      	cbnz	r1, 800823a <_realloc_r+0x14>
 8008230:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008234:	4611      	mov	r1, r2
 8008236:	f7ff be0d 	b.w	8007e54 <_malloc_r>
 800823a:	b922      	cbnz	r2, 8008246 <_realloc_r+0x20>
 800823c:	f7ff fdbe 	bl	8007dbc <_free_r>
 8008240:	4625      	mov	r5, r4
 8008242:	4628      	mov	r0, r5
 8008244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008246:	f000 f821 	bl	800828c <_malloc_usable_size_r>
 800824a:	42a0      	cmp	r0, r4
 800824c:	d20f      	bcs.n	800826e <_realloc_r+0x48>
 800824e:	4621      	mov	r1, r4
 8008250:	4638      	mov	r0, r7
 8008252:	f7ff fdff 	bl	8007e54 <_malloc_r>
 8008256:	4605      	mov	r5, r0
 8008258:	2800      	cmp	r0, #0
 800825a:	d0f2      	beq.n	8008242 <_realloc_r+0x1c>
 800825c:	4631      	mov	r1, r6
 800825e:	4622      	mov	r2, r4
 8008260:	f7ff fab6 	bl	80077d0 <memcpy>
 8008264:	4631      	mov	r1, r6
 8008266:	4638      	mov	r0, r7
 8008268:	f7ff fda8 	bl	8007dbc <_free_r>
 800826c:	e7e9      	b.n	8008242 <_realloc_r+0x1c>
 800826e:	4635      	mov	r5, r6
 8008270:	e7e7      	b.n	8008242 <_realloc_r+0x1c>

08008272 <__ascii_wctomb>:
 8008272:	b149      	cbz	r1, 8008288 <__ascii_wctomb+0x16>
 8008274:	2aff      	cmp	r2, #255	; 0xff
 8008276:	bf8b      	itete	hi
 8008278:	238a      	movhi	r3, #138	; 0x8a
 800827a:	700a      	strbls	r2, [r1, #0]
 800827c:	6003      	strhi	r3, [r0, #0]
 800827e:	2001      	movls	r0, #1
 8008280:	bf88      	it	hi
 8008282:	f04f 30ff 	movhi.w	r0, #4294967295
 8008286:	4770      	bx	lr
 8008288:	4608      	mov	r0, r1
 800828a:	4770      	bx	lr

0800828c <_malloc_usable_size_r>:
 800828c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008290:	1f18      	subs	r0, r3, #4
 8008292:	2b00      	cmp	r3, #0
 8008294:	bfbc      	itt	lt
 8008296:	580b      	ldrlt	r3, [r1, r0]
 8008298:	18c0      	addlt	r0, r0, r3
 800829a:	4770      	bx	lr

0800829c <_init>:
 800829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829e:	bf00      	nop
 80082a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082a2:	bc08      	pop	{r3}
 80082a4:	469e      	mov	lr, r3
 80082a6:	4770      	bx	lr

080082a8 <_fini>:
 80082a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082aa:	bf00      	nop
 80082ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ae:	bc08      	pop	{r3}
 80082b0:	469e      	mov	lr, r3
 80082b2:	4770      	bx	lr
